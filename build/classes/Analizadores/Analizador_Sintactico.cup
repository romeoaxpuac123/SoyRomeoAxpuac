
package Analizadores;


import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Analizadores.IDE.TABLA_DE_ERRORES_SINTACTICOS;
import CodigoASTCUP.*;
import Codigo.*;


parser code
{:      
    public NodoAbstracto Raiz;
    public ArrayList <NodoAbstracto> Expresiones = new ArrayList();
    public String Lado1, Lado2 = "";
    public String Manejor_Error = "";
     public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila+1);
        System.out.println("\t\tColumna: "+columna);

         TError ERRORES = new TError(lexema,fila,columna,"Sintactico", "Sentencia incorrecta" );
         TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
       
        
        
    }

//Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       // TERROR ERRORES = new TERROR(lexema,"Error Sintactico","Caracter no esperado",fila,columna);
       // TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
     
    }


    public void semantic(String msg, Object obj) {}
:}

action code
{:
:}  



terminal llavecerrar, llaveabrir, parentesisabrir, parentesiscerrar,corcheteabrir,corchetecerrar;
terminal puntoycoma;
terminal igual,mas,menos,por,div,potencia,modulo,igualdad,Noigualdad,MenorQue,MayorQue;
terminal MenorIgualQue, MayorIgualQue, AND,OR, NOT,PREGUNTAC,DOSP,FuncionC;
terminal String id,coma;
terminal String entero,ttrue,tfalse,nulo;
terminal String decimal;
terminal String imprimir;
terminal String cadena;

non terminal NodoAbstracto INICIO;
non terminal NodoAbstracto SENTENCIAS,SENTENCIA;
non terminal NodoAbstracto DECLARAR,ASIGNAR,DECLARARASIGNAR,IMPRIM,FINAL;
non terminal NodoAbstracto OPERACIONES,DECLARARVECTORC, LISTAEXPRESIONES, MODVECTOR;
non terminal NodoAbstracto EXP,NUMERO;

precedence right NOT;
precedence left PREGUNTAC;
precedence left AND,OR;
precedence left igualdad,Noigualdad;
precedence left MenorQue,MayorQue,MenorIgualQue, MayorIgualQue;
precedence left potencia;
precedence left mas,menos;
precedence left por,div,modulo;



start with INICIO;

INICIO::=          SENTENCIAS:nod 
                    {:
                        NodoAbstracto nuevo = new Nodo("INICIO");
                        nuevo.Hijos.add(nod);
                        parser.Raiz = nuevo;
                    :} ;

SENTENCIAS::=       SENTENCIAS:nodsentencias SENTENCIA:nod
                    {:
                        
                        //NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        //nuevo.Hijos.add(nodsentencias);
                        //nuevo.Hijos.add(nod);
                        //RESULT = nuevo;
                        
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                    :}
                    |SENTENCIA:nod
                    {:
                        NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    :}
                     ;

SENTENCIA::=        DECLARARASIGNAR:nod
                    {:
                        
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        RESULT=nod;
                    :}
                    |IMPRIM:nod
                    {:
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        //System.out.println("ID LINEA : SENTENCIA IMPRIMIR" + nodleft + " Columna " + nodright);
                        RESULT=nod;
                    :}
                    |DECLARARVECTORC:nod
                    {:
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        RESULT=nod;
                    :}
                    | MODVECTOR:nod
                    {:
                      Manejor_Error = "SENTENCIA INCORRECTA";
                      RESULT=nod;
                    :}
                    | error puntoycoma {:
                         NodoAbstracto nuevo = new ERRORES("Error");
                         NodoAbstracto nuevoid = new Nodo("#Error En alguna mulada XD");
                         nuevo.Cadena   = "#Error Semantico Encontrado ver reporte";
                         RESULT= nuevo; 
                     :} 
                     | error  SENTENCIA{:
                         NodoAbstracto nuevo = new ERRORES("Error");
                         NodoAbstracto nuevoid = new Nodo("#Error En alguna mulada XD");
                         nuevo.Cadena  = "#Error Semantico Encontrado ver reporte";
                         RESULT= nuevo; 
                     :} 
                    ;

MODVECTOR::= id:valor corcheteabrir EXP:exp1 corchetecerrar igual EXP:exp2  FINAL{:
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            :}
            | id:valor corcheteabrir EXP:exp1 corchetecerrar igual FuncionC  EXP:exp2   parentesiscerrar FINAL{:
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            :}
             
             ;


DECLARARVECTORC::= id:valor igual FuncionC  LISTAEXPRESIONES:Lista parentesiscerrar FINAL
                    {:
                        NodoAbstracto nuevo = new FuncionC("CASTEAR");
                        NodoAbstracto nuevoid = new Nodo(valor);
                        nuevo.Hijos.add(nuevoid);
                        for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
                        Expresiones.clear();
                        nuevo.Hijos.add(Lista);
                        Manejor_Error = "Error al crear vector" + valor;
                        RESULT = nuevo;

                    :} ;

LISTAEXPRESIONES::= LISTAEXPRESIONES:nodsentencias coma EXP:nod
                    {:
                        NodoAbstracto nuevo = new Nodo("LISTAEXPRESIONES");
                        nuevo.Hijos.add(nodsentencias);
                        nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                        RESULT = nuevo;
                    :}
                    |EXP:nod{:
                        NodoAbstracto nuevo = new Nodo("LISTAEXPRESIONES");
                        nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                        RESULT = nuevo;
                    :};

DECLARARASIGNAR::=  id:valor igual EXP:exp1 FINAL
                    {:
                        NodoAbstracto nuevo = new DeclararAsignar("DECLARARASIGNAR");
                        NodoAbstracto nuevoid = new Nodo(valor);
                        nuevo.Hijos.add(nuevoid);
                        nuevo.Hijos.add(exp1);
                        Manejor_Error = "Error al crear vector" + valor;
                        //System.out.println("ID LINEA : SENTENCIA IMPRIMIR" + nodleft + " Columna " + nodright);
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                        RESULT = nuevo;
                    :};

FINAL::= puntoycoma | ;
IMPRIM::=           imprimir parentesisabrir EXP:exp1 parentesiscerrar puntoycoma
                    {:
                        NodoAbstracto nuevo = new Imprimir("IMPRIMIR");
                        nuevo.Hijos.add(exp1);
                         Manejor_Error = "Error al imprimir";
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                        RESULT = nuevo;
                    :}
                    ;



EXP::=              EXP:exp1 PREGUNTAC EXP:exp2 DOSP EXP:exp3{:
                        NodoAbstracto nuevo = new Ternario("EXP");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(exp2);  
                        nuevo.Hijos.add(exp3);
                         Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}
                    |NOT EXP:exp1{:
                        NodoAbstracto nuevo = new NOT("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;

                    :}
                    |menos EXP:exp1{:
                        NodoAbstracto nuevo = new Negativo("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}
                    |EXP:exp1 mas EXP:exp2
                    {:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("+");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    :}
                    |EXP:exp1 menos EXP:exp2
                    {:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                    
                        RESULT = nuevo;
                    :}
                    |EXP:exp1 por EXP:exp2
                    {:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("*");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}
                  
                        

                    |EXP:exp1 div EXP:exp2
                    {:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("/");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                      
                        RESULT = nuevo;
                    :}

                    |EXP:exp1 modulo EXP:exp2
                    {:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("%%");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2); 
                        Manejor_Error = "Error en expresion";                   
                        RESULT = nuevo;
                    :}
|EXP:exp1 potencia EXP:exp2
                    {:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("^");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);   
                        Manejor_Error = "Error en expresion";                 
                        RESULT = nuevo;
                    :}

                    |EXP:exp1 igualdad EXP:exp2{:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("==");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    :}

                    |EXP:exp1 Noigualdad EXP:exp2{:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}
                    |EXP:exp1 MayorQue EXP:exp2{:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}
                     |EXP:exp1 MenorQue EXP:exp2{:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}



                    |EXP:exp1 MayorIgualQue EXP:exp2{:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}
                     |EXP:exp1 MenorIgualQue EXP:exp2{:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}



|EXP:exp1 AND EXP:exp2{:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("&&");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";                      
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    :}


|EXP:exp1 OR EXP:exp2{:
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("||");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    :}
                    |parentesisabrir EXP:exp1 parentesiscerrar
                    {:
                        Manejor_Error = "Error en expresion";
                        RESULT = exp1;
                    :}
                    |NUMERO:nod
                    {:
                        Manejor_Error = "Error en expresion";
                        RESULT = nod;
                    :}
        |id:valor
                    {:
                        NodoAbstracto nuevo = new Nodo("id");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "id";
                        nuevo.Nombre = valor;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}
        |nulo:valor
                    {:
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}
        |id:valor corcheteabrir EXP:pos corchetecerrar
                        {:
                        NodoAbstracto nuevo = new Nodo("Vector");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(pos);
                        nuevo.TipoDato = "vector";
                        Manejor_Error = "Error en expresion";
                        //RESULT = nuevo;
                        //nuevo.id = Integer.parseInt(pos);
                        nuevo.columna = valorleft;
                        nuevo.linea = valorright;
                        RESULT = nuevo;
                    :}
        |cadena:valor
                    {:
                        valor =  valor.replaceAll("\"", "");
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}
                    |ttrue:valor
                    {:
                        
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}
                    |tfalse:valor
                    {:
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}
                    ;

NUMERO::=           entero:valor        
                    {:
                        NodoAbstracto nuevo = new Nodo("Entero");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}
                    |decimal:valor
                    {:
                        NodoAbstracto nuevo = new Nodo("Decimal");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "decimal";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    :}
                  
                    ;