/* Gramatica.java */
/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
/** Analizador de expresiones aritmeticas sencillas. */
package Analizador;


import java.util.ArrayList;
import CodigoASTCUP.*;
import Codigo.*;


public class Gramatica implements GramaticaConstants {

/** Fin Lexico */


/** ProducciÃ³n inicial 
    Analizar -> (Instruccion)+ EOF
*/
  final public 
ArrayList<NodoAbstracto> Analizar(ArrayList<NodoAbstracto> ins) throws ParseException {NodoAbstracto e;
    try {
      label_1:
      while (true) {
        e = Instruccion();
ins.add(e);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENTERO:
        case CADENA:
        case IMPRIMIR:
        case MIENTRAS:
        case FUNCION:
        case RETORNO:
        case BREAK:
        case CONTINUE:
        case SI:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
{if ("" != null) return ins;}
    } catch (ParseException exc) {
Token t;
            System.out.println(exc.toString());
            do {
                t = getNextToken();
                if(t.kind == EOF){
                 {if ("" != null) return ins;}
                }
             } while (t.kind != PCOMA && t!=null && t.kind != EOF );
            {if ("" != null) return Analizar(ins);}
    }
    throw new Error("Missing return statement in function");
  }

/** Instruccion -> imprimir 
                 | declaracion
                 | asignacion
                 | si
                 | mientras
*/
  final public NodoAbstracto Instruccion() throws ParseException {NodoAbstracto e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IMPRIMIR:{
      e = Imprimir();
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_1(2)) {
        e = GrupoSentencias();
        jj_consume_token(PCOMA);
{if ("" != null) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENTERO:
        case CADENA:{
          e = Declaracion();
{if ("" != null) return e;}
          break;
          }
        case IDENTIFICADOR:{
          e = DECLARARASIGNAR();
{if ("" != null) return e;}
          break;
          }
        case SI:{
          e = ELIF();
{if ("" != null) return e;}
          break;
          }
        case MIENTRAS:{
          e = ElWhile();
{if ("" != null) return e;}
          break;
          }
        case FUNCION:{
          e = Funcion();
{if ("" != null) return e;}
          break;
          }
        case RETORNO:{
          e = retorno();
{if ("" != null) return e;}
          break;
          }
        case BREAK:{
          e = detener();
{if ("" != null) return e;}
          break;
          }
        case CONTINUE:{
          e = Continue();
{if ("" != null) return e;}
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

/** Tipo -> numero
         |  cadena
*/
  final public String Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENTERO:{
      jj_consume_token(ENTERO);
{if ("" != null) return  "Entero";}
      break;
      }
    case CADENA:{
      jj_consume_token(CADENA);
{if ("" != null) return "Cadena";}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Imprimir -> imprimir ( Expresion ); */
  final public NodoAbstracto Imprimir() throws ParseException {NodoAbstracto e;
    jj_consume_token(IMPRIMIR);
    jj_consume_token(PARENI);
    e = Expresion();
    jj_consume_token(PAREND);
    jj_consume_token(PCOMA);
NodoAbstracto nuevo = new Imprimir("IMPRIMIR");
                        nuevo.Hijos.add(e);
                        {if ("" != null) return nuevo;}
    throw new Error("Missing return statement in function");
  }

/** Declaracion -> tipo id = expresion; */
  final public NodoAbstracto Declaracion() throws ParseException {NodoAbstracto dec, e = null; String t; Token id;
    t = Tipo();
    id = jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:{
      jj_consume_token(IGUAL);
      e = Expresion();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(PCOMA);
NodoAbstracto nuevo = new DeclararAsignar("DECLARARASIGNAR");
                        NodoAbstracto nuevoid = new Nodo(id.image);
                        nuevo.Hijos.add(nuevoid);
                        nuevo.Hijos.add(e);
                        {if ("" != null) return nuevo;}
    throw new Error("Missing return statement in function");
  }

/** Asignacion -> id = expresion; */
  final public NodoAbstracto DECLARARASIGNAR() throws ParseException {NodoAbstracto e; Token id;
    id = jj_consume_token(IDENTIFICADOR);
    jj_consume_token(IGUAL);
    e = Expresion();
    jj_consume_token(PCOMA);
NodoAbstracto nuevo = new DeclararAsignar("DECLARARASIGNAR");
                        NodoAbstracto nuevoid = new Nodo(id.image);
                        nuevo.Hijos.add(nuevoid);
                        nuevo.Hijos.add(e);
                        {if ("" != null) return nuevo;}
    throw new Error("Missing return statement in function");
  }

/** Si -> if(condicion) instrucciones (else if(condicion) instrucciones)* (else instrucciones)? */
  final public NodoAbstracto ELIF() throws ParseException {NodoAbstracto e, If; ArrayList<NodoAbstracto> insIf, insElse = new ArrayList<NodoAbstracto>();
    jj_consume_token(SI);
    jj_consume_token(PARENI);
    e = Expresion();
    jj_consume_token(PAREND);
    insIf = Bloque();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SINO:{
      if (jj_2_2(2)) {
        jj_consume_token(SINO);
        If = ELIF();
insElse.add(If);
      } else if (jj_2_3(2)) {
        jj_consume_token(SINO);
        insElse = Bloque();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
NodoAbstracto nuevo = new SentenciaIF("IF");
            nuevo.Hijos.add(e);
            nuevo.Expresiones = insIf;
            nuevo.Expresiones2 = insElse;
            {if ("" != null) return nuevo;}
    throw new Error("Missing return statement in function");
  }

/** While -> while(condicion) instrucciones */
  final public NodoAbstracto ElWhile() throws ParseException {NodoAbstracto e; ArrayList<NodoAbstracto> ins;
    jj_consume_token(MIENTRAS);
    jj_consume_token(PARENI);
    e = Expresion();
    jj_consume_token(PAREND);
    ins = Bloque();
NodoAbstracto nuevo = new While("WHILE");
            nuevo.Hijos.add(e);
            nuevo.Expresiones = ins;
            {if ("" != null) return nuevo;}
    throw new Error("Missing return statement in function");
  }

/** Bloque -> { (Instruccion)+ }
*/
  final public ArrayList<NodoAbstracto> Bloque() throws ParseException {ArrayList<NodoAbstracto> insBloque = new ArrayList<NodoAbstracto>(); NodoAbstracto e;
    jj_consume_token(LLAVEI);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTERO:
      case CADENA:
      case IMPRIMIR:
      case MIENTRAS:
      case FUNCION:
      case RETORNO:
      case BREAK:
      case CONTINUE:
      case SI:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      e = Instruccion();
insBloque.add(e);
    }
    jj_consume_token(LLAVED);
{if ("" != null) return insBloque;}
    throw new Error("Missing return statement in function");
  }

/** Funcion -> funcion nombre (params){INSTRUCCIONES}
*/
  final public 
NodoAbstracto Funcion() throws ParseException {Token id; ArrayList<NodoAbstracto> expresiones; ArrayList<NodoAbstracto> insBloque; String tipo;
    jj_consume_token(FUNCION);
    tipo = Tipo();
    id = jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PARENI);
    expresiones = Lista_Parametros();
    jj_consume_token(PAREND);
    insBloque = Bloque();
NodoAbstracto nuevo = new Funciones1("FUNCION_CON PARAMETROS");
                        NodoAbstracto FuncionNombre = new Nodo(id.image);
                        nuevo.Hijos.add(FuncionNombre);
                        nuevo.TipoDato = tipo;
                        nuevo.Expresiones = expresiones;
                        nuevo.Expresiones2 = insBloque;
                        {if ("" != null) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoAbstracto GrupoSentencias() throws ParseException {ArrayList<NodoAbstracto> expresiones; Token t;
    t = jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PARENI);
    expresiones = Lista_Expresiones();
    jj_consume_token(PAREND);
NodoAbstracto nuevo = new Funciones1("FUNCION");
                        NodoAbstracto FuncionNombre = new Nodo(t.image);
                        nuevo.Hijos.add(FuncionNombre);
                        nuevo.Expresiones = expresiones;
        {if ("" != null) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<NodoAbstracto> Lista_Parametros() throws ParseException {ArrayList<NodoAbstracto> lista = new ArrayList<NodoAbstracto>(); NodoAbstracto e = null; String t; Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENTERO:
    case CADENA:{
      t = Tipo();
      id = jj_consume_token(IDENTIFICADOR);
NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        NodoAbstracto nuevoid = new Nodo(id.image);
                        nuevo.Hijos.add(nuevoid);
                        nuevo.Hijos.add(e);
                        nuevo.TipoDato = t;
                        lista.add(nuevo );
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMA);
        t = Tipo();
        id = jj_consume_token(IDENTIFICADOR);
lista.add(e);
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
{if ("" != null) return lista;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<NodoAbstracto> Lista_Expresiones() throws ParseException {ArrayList<NodoAbstracto> lista = new ArrayList<NodoAbstracto>(); NodoAbstracto e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMERO:
    case DECIMAL:
    case PARENI:
    case CORI:
    case MENOS:
    case NOT:
    case IDENTIFICADOR:
    case STRING:{
      e = Expresion();
lista.add(e);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMA);
        e = Expresion();
lista.add(e);
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
{if ("" != null) return lista;}
    throw new Error("Missing return statement in function");
  }

  final public NodoAbstracto expresiones() throws ParseException {ArrayList<NodoAbstracto> lista;
    jj_consume_token(CORI);
    lista = Lista_Expresiones();
    jj_consume_token(CORD);
{if ("" != null) return Lista_Expresiones().get(0);}
    throw new Error("Missing return statement in function");
  }

  final public NodoAbstracto retorno() throws ParseException {NodoAbstracto  e = null;
    jj_consume_token(RETORNO);
    jj_consume_token(PCOMA);
NodoAbstracto nuevo = new Retorno("RETORNO");
            nuevo.Hijos.add(e);
            {if ("" != null) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoAbstracto detener() throws ParseException {NodoAbstracto e;
    jj_consume_token(BREAK);
    jj_consume_token(PCOMA);
NodoAbstracto nuevo = new Break("Break"); {if ("" != null) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoAbstracto Continue() throws ParseException {NodoAbstracto e;
    jj_consume_token(CONTINUE);
    jj_consume_token(PCOMA);
NodoAbstracto nuevo = new Continue("Break"); {if ("" != null) return nuevo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoAbstracto Expresion() throws ParseException {NodoAbstracto e, e1;
    e = CondicionAnd();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      jj_consume_token(OR);
      e1 = CondicionAnd();
NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("||");
                        nuevo.Hijos.add(e);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(e1);
                        nuevo.TipoDato = "booleano";
                        {if ("" != null) return nuevo;}
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public NodoAbstracto CondicionAnd() throws ParseException {NodoAbstracto e, e1;
    e = ExpresionIgualdad();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(AND);
      e1 = ExpresionIgualdad();
NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("&&");
                        nuevo.Hijos.add(e);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(e1);
                        nuevo.TipoDato = "booleano";
                        {if ("" != null) return nuevo;}
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionIgualdad -> ExpresionRelacional ('==' ExpresionRelacional)*
                     |  ExpresionRelacional ('!=' ExpresionRelacional)*
*/
  final public NodoAbstracto ExpresionIgualdad() throws ParseException {NodoAbstracto e, e1;
    e = ExpresionRelacional();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUALACION:
      case DIFERENCIACION:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUALACION:{
        jj_consume_token(IGUALACION);
        e1 = ExpresionRelacional();
NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("==");
                        nuevo.Hijos.add(e);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(e1);
                        nuevo.TipoDato = "booleano";
                        {if ("" != null) return nuevo;}
                        ;
        break;
        }
      case DIFERENCIACION:{
        jj_consume_token(DIFERENCIACION);
        e1 = ExpresionRelacional();
NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!=");
                        nuevo.Hijos.add(e);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(e1);
                        nuevo.TipoDato = "booleano";
                        {if ("" != null) return nuevo;}
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionRelacional -> ExpresionAditiva ('>' ExpresionAditiva)*
                     |  ExpresionAditiva ('<' ExpresionAditiva)*
                     |  ExpresionAditiva ('>=' ExpresionAditiva)*
                     |  ExpresionAditiva ('<=' ExpresionAditiva)*
*/
  final public NodoAbstracto ExpresionRelacional() throws ParseException {NodoAbstracto e, e1;
    e = ExpresionAditiva();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MENORQUE:
      case MAYORQUE:
      case MENORIGUAL:
      case MAYORIGUAL:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAYORQUE:{
        jj_consume_token(MAYORQUE);
        e1 = ExpresionAditiva();
NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">");
                        nuevo.Hijos.add(e);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(e1);
                        {if ("" != null) return nuevo;}
        break;
        }
      case MENORQUE:{
        jj_consume_token(MENORQUE);
        e1 = ExpresionAditiva();
NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<");
                        nuevo.Hijos.add(e);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(e1);
                        {if ("" != null) return nuevo;}
        break;
        }
      case MAYORIGUAL:{
        jj_consume_token(MAYORIGUAL);
        e1 = ExpresionAditiva();
NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">=");
                        nuevo.Hijos.add(e);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(e1);
                        {if ("" != null) return nuevo;}
        break;
        }
      case MENORIGUAL:{
        jj_consume_token(MENORIGUAL);
        e1 = ExpresionAditiva();
NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<=");
                        nuevo.Hijos.add(e);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(e1);
                        {if ("" != null) return nuevo;}
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionAditiva -> ExpresionMultiplicativa ('+' ExpresionMultiplicativa)*
                     |  ExpresionMultiplicativa ('-' ExpresionMultiplicativa)*
*/
  final public NodoAbstracto ExpresionAditiva() throws ParseException {NodoAbstracto e, e1;
    e = ExpresionMultiplicativa();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:
      case MENOS:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:{
        jj_consume_token(MAS);
        e1 = ExpresionMultiplicativa();
NodoAbstracto nuevo = new Aritmetica("EXP");
                                            NodoAbstracto nuevooperador = new Nodo("+");
                                            nuevo.Hijos.add(e);
                                            nuevo.Hijos.add(nuevooperador);
                                            nuevo.Hijos.add(e1);
                                            e = nuevooperador;
        break;
        }
      case MENOS:{
        jj_consume_token(MENOS);
        e1 = ExpresionMultiplicativa();
NodoAbstracto nuevo = new Aritmetica("EXP");
                                            NodoAbstracto nuevooperador = new Nodo("-");
                                            nuevo.Hijos.add(e);
                                            nuevo.Hijos.add(nuevooperador);
                                            nuevo.Hijos.add(e1);
                                            e = nuevooperador;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionMultiplicativa -> ExpresionUnaria ('*' ExpresionUnaria)*
                            |  ExpresionUnaria ('/' ExpresionUnaria)*
*/
  final public NodoAbstracto ExpresionMultiplicativa() throws ParseException {NodoAbstracto e, e1;
    e = ExpresionUnaria();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POR:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POR:{
        jj_consume_token(POR);
        e1 = ExpresionUnaria();
NodoAbstracto nuevo = new Aritmetica("EXP");
                                            NodoAbstracto nuevooperador = new Nodo("*");
                                            nuevo.Hijos.add(e);
                                            nuevo.Hijos.add(nuevooperador);
                                            nuevo.Hijos.add(e1);
                                            e = nuevooperador;
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        e1 = ExpresionUnaria();
NodoAbstracto nuevo = new Aritmetica("EXP");
                                            NodoAbstracto nuevooperador = new Nodo("/");
                                            nuevo.Hijos.add(e);
                                            nuevo.Hijos.add(nuevooperador);
                                            nuevo.Hijos.add(e1);
                                            e = nuevooperador;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionUnaria -> '-' ExpresionUnaria
                    |  Primitivo
 */
  final public NodoAbstracto ExpresionUnaria() throws ParseException {NodoAbstracto e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MENOS:{
      jj_consume_token(MENOS);
      e = ExpresionUnaria();
NodoAbstracto nuevo = new NOT("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(e);
                        nuevo.TipoDato = e.TipoDato;
                        {if ("" != null) return nuevo;}
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      e = ExpresionUnaria();
NodoAbstracto nuevo = new Negativo("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(e);
                        nuevo.TipoDato = e.TipoDato;
                        {if ("" != null) return nuevo;}
      break;
      }
    case NUMERO:
    case DECIMAL:
    case PARENI:
    case CORI:
    case IDENTIFICADOR:
    case STRING:{
      e = Primitivo();
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Primitivo -> Numero
              |  Decimal
              |  '(' Expresion ')' 
*/
  final public NodoAbstracto Primitivo() throws ParseException {NodoAbstracto e; Token t; String cad;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMERO:{
      jj_consume_token(NUMERO);
NodoAbstracto nuevo = new Nodo("Entero");
                        NodoAbstracto nuevovalor = new Nodo(token.image);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
            {if ("" != null) return nuevo;}
      break;
      }
    case DECIMAL:{
      jj_consume_token(DECIMAL);
NodoAbstracto nuevo = new Nodo("Decimal");
                        NodoAbstracto nuevovalor = new Nodo(token.image);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
            {if ("" != null) return nuevo;}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      if (jj_2_4(2)) {
        e = GrupoSentencias();
{if ("" != null) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          t = jj_consume_token(STRING);
cad = t.image.substring(1,t.image.length()-1);
                    cad = cad.replace("\u005c\u005c","\u005c\u005c");
                    cad = cad.replace("\u005c\u005cn","\u005cn");
                    cad = cad.replace("\u005c\u005ct","\u005ct");
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(cad);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        {if ("" != null) return nuevo;}
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          if (jj_2_5(2)) {
            t = jj_consume_token(IDENTIFICADOR);
NodoAbstracto nuevo = new Nodo("id");
                        NodoAbstracto nuevovalor = new Nodo(t.image);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "id";
                        nuevo.Nombre = t.image;
                        {if ("" != null) return nuevo;}
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case PARENI:{
              jj_consume_token(PARENI);
              e = Expresion();
              jj_consume_token(PAREND);
{if ("" != null) return e;}
              break;
              }
            case CORI:{
              e = expresiones();
{if ("" != null) return e;}
              break;
              }
            default:
              jj_la1[24] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(SINO)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(SINO)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PARENI)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(LLAVEI)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(SI)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1ff0,0x40,0x1fb0,0x30,0x2000000,0x2000,0x1ff0,0x0,0x30,0x0,0x42800c,0x0,0x0,0xc0000000,0xc0000000,0x3c000000,0x3c000000,0x600000,0x600000,0x1800000,0x1800000,0x42800c,0xc,0x0,0x28000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10,0x0,0x10,0x0,0x0,0x0,0x10,0x1,0x0,0x1,0x2018,0x4,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2018,0x0,0x2000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
