
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import CodigoASTCUP.*;
import Codigo.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ANALIZADOR2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public ANALIZADOR2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ANALIZADOR2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ANALIZADOR2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\043\005\000\002\042\006\000" +
    "\002\042\007\000\002\041\005\000\002\041\005\000\002" +
    "\041\003\000\002\041\003\000\002\040\012\000\002\040" +
    "\013\000\002\040\013\000\002\040\013\000\002\037\013" +
    "\000\002\037\017\000\002\037\013\000\002\037\017\000" +
    "\002\035\011\000\002\035\014\000\002\036\007\000\002" +
    "\036\006\000\002\032\004\000\002\033\004\000\002\031" +
    "\013\000\002\030\013\000\002\027\011\000\002\034\004" +
    "\000\002\034\003\000\002\023\011\000\002\023\015\000" +
    "\002\023\012\000\002\023\016\000\002\026\013\000\002" +
    "\026\012\000\002\024\004\000\002\024\003\000\002\022" +
    "\004\000\002\022\003\000\002\021\004\000\002\021\003" +
    "\000\002\015\011\000\002\015\013\000\002\014\005\000" +
    "\002\014\003\000\002\007\006\000\002\011\003\000\002" +
    "\011\002\000\002\010\007\000\002\017\006\000\002\017" +
    "\005\000\002\017\006\000\002\017\006\000\002\017\007" +
    "\000\002\017\004\000\002\017\004\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\006\000\002\017\011\000\002\017" +
    "\013\000\002\017\013\000\002\017\010\000\002\017\015" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\003\000\002\017\010\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\017\010\000\002\017\006\000\002\017\010\000" +
    "\002\017\006\000\002\017\010\000\002\020\003\000\002" +
    "\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\040\003\035\036\027\040\032\061\012\062" +
    "\025\063\026\064\010\065\036\071\017\073\006\074\023" +
    "\075\041\077\031\100\004\101\014\001\002\000\052\002" +
    "\uffc1\003\uffc1\004\uffc1\012\201\036\uffc1\040\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\065\uffc1\071\uffc1\073\uffc1\074" +
    "\uffc1\075\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1" +
    "\001\002\000\050\002\ufff1\003\ufff1\004\ufff1\036\ufff1\040" +
    "\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\071\ufff1" +
    "\073\ufff1\074\ufff1\075\ufff1\077\ufff1\100\ufff1\101\ufff1\102" +
    "\ufff1\103\ufff1\001\002\000\004\006\u015c\001\002\000\050" +
    "\002\ufffb\003\ufffb\004\ufffb\036\ufffb\040\ufffb\061\ufffb\062" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\071\ufffb\073\ufffb\074\ufffb" +
    "\075\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\001" +
    "\002\000\004\006\u0154\001\002\000\050\002\ufffe\003\035" +
    "\004\ufffe\036\027\040\032\061\012\062\025\063\026\064" +
    "\010\065\036\071\017\073\006\074\023\075\041\077\031" +
    "\100\004\101\014\102\ufffe\103\ufffe\001\002\000\004\006" +
    "\u014f\001\002\000\004\002\000\001\002\000\004\006\u013d" +
    "\001\002\000\050\002\ufffd\003\ufffd\004\ufffd\036\ufffd\040" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\071\ufffd" +
    "\073\ufffd\074\ufffd\075\ufffd\077\ufffd\100\ufffd\101\ufffd\102" +
    "\ufffd\103\ufffd\001\002\000\050\002\ufff5\003\ufff5\004\ufff5" +
    "\036\ufff5\040\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065" +
    "\ufff5\071\ufff5\073\ufff5\074\ufff5\075\ufff5\077\ufff5\100\ufff5" +
    "\101\ufff5\102\ufff5\103\ufff5\001\002\000\004\006\u011c\001" +
    "\002\000\050\002\uffef\003\uffef\004\uffef\036\uffef\040\uffef" +
    "\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\071\uffef\073" +
    "\uffef\074\uffef\075\uffef\077\uffef\100\uffef\101\uffef\102\uffef" +
    "\103\uffef\001\002\000\050\002\ufff4\003\ufff4\004\ufff4\036" +
    "\ufff4\040\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4" +
    "\071\ufff4\073\ufff4\074\ufff4\075\ufff4\077\ufff4\100\ufff4\101" +
    "\ufff4\102\ufff4\103\ufff4\001\002\000\050\002\ufff2\003\ufff2" +
    "\004\ufff2\036\ufff2\040\ufff2\061\ufff2\062\ufff2\063\ufff2\064" +
    "\ufff2\065\ufff2\071\ufff2\073\ufff2\074\ufff2\075\ufff2\077\ufff2" +
    "\100\ufff2\101\ufff2\102\ufff2\103\ufff2\001\002\000\004\005" +
    "\u0114\001\002\000\050\002\ufff7\003\ufff7\004\ufff7\036\ufff7" +
    "\040\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\071" +
    "\ufff7\073\ufff7\074\ufff7\075\ufff7\077\ufff7\100\ufff7\101\ufff7" +
    "\102\ufff7\103\ufff7\001\002\000\004\006\u010c\001\002\000" +
    "\004\006\u0100\001\002\000\010\006\327\010\325\013\326" +
    "\001\002\000\050\002\ufff9\003\ufff9\004\ufff9\036\ufff9\040" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\071\ufff9" +
    "\073\ufff9\074\ufff9\075\ufff9\077\ufff9\100\ufff9\101\ufff9\102" +
    "\ufff9\103\ufff9\001\002\000\052\002\uffc1\003\uffc1\004\uffc1" +
    "\012\201\036\uffc1\040\uffc1\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\071\uffc1\073\uffc1\074\uffc1\075\uffc1\077\uffc1" +
    "\100\uffc1\101\uffc1\102\uffc1\103\uffc1\001\002\000\062\006" +
    "\067\015\062\032\054\035\065\036\071\041\075\042\066" +
    "\043\056\044\063\045\050\046\053\047\047\050\100\051" +
    "\057\052\072\053\061\054\077\055\052\056\074\057\055" +
    "\060\064\070\051\103\070\104\076\001\002\000\050\002" +
    "\ufffa\003\ufffa\004\ufffa\036\ufffa\040\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\071\ufffa\073\ufffa\074\ufffa\075" +
    "\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\103\ufffa\001\002" +
    "\000\050\002\ufff0\003\ufff0\004\ufff0\036\ufff0\040\ufff0\061" +
    "\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\071\ufff0\073\ufff0" +
    "\074\ufff0\075\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0\103" +
    "\ufff0\001\002\000\004\012\321\001\002\000\004\006\305" +
    "\001\002\000\050\002\ufffc\003\ufffc\004\ufffc\036\ufffc\040" +
    "\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\071\ufffc" +
    "\073\ufffc\074\ufffc\075\ufffc\077\ufffc\100\ufffc\101\ufffc\102" +
    "\ufffc\103\ufffc\001\002\000\050\002\ufff6\003\ufff6\004\ufff6" +
    "\036\ufff6\040\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065" +
    "\ufff6\071\ufff6\073\ufff6\074\ufff6\075\ufff6\077\ufff6\100\ufff6" +
    "\101\ufff6\102\ufff6\103\ufff6\001\002\000\004\006\046\001" +
    "\002\000\050\002\ufff8\003\ufff8\004\ufff8\036\ufff8\040\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\071\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8" +
    "\103\ufff8\001\002\000\050\002\ufff3\003\ufff3\004\ufff3\036" +
    "\ufff3\040\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3" +
    "\071\ufff3\073\ufff3\074\ufff3\075\ufff3\077\ufff3\100\ufff3\101" +
    "\ufff3\102\ufff3\103\ufff3\001\002\000\004\002\045\001\002" +
    "\000\004\002\001\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\004\006\302\001\002\000" +
    "\004\006\277\001\002\000\122\002\uffa0\003\uffa0\004\uffa0" +
    "\007\uffa0\011\uffa0\012\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\027\uffa0\030\uffa0\031\uffa0\033\uffa0\034\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0" +
    "\065\uffa0\071\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077" +
    "\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\001\002\000\122" +
    "\002\uff8d\003\uff8d\004\uff8d\007\uff8d\011\uff8d\012\uff8d\014" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031" +
    "\uff8d\033\uff8d\034\uff8d\036\uff8d\037\uff8d\040\uff8d\061\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\065\uff8d\071\uff8d\073\uff8d\074" +
    "\uff8d\075\uff8d\076\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d" +
    "\103\uff8d\001\002\000\004\006\274\001\002\000\062\006" +
    "\067\015\062\032\054\035\065\036\071\041\075\042\066" +
    "\043\056\044\063\045\050\046\053\047\047\050\100\051" +
    "\057\052\072\053\061\054\077\055\052\056\074\057\055" +
    "\060\064\070\051\103\070\104\076\001\002\000\004\006" +
    "\265\001\002\000\122\002\uff9e\003\uff9e\004\uff9e\007\uff9e" +
    "\011\uff9e\012\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020" +
    "\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e" +
    "\027\uff9e\030\uff9e\031\uff9e\033\uff9e\034\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e" +
    "\071\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100" +
    "\uff9e\101\uff9e\102\uff9e\103\uff9e\001\002\000\004\006\262" +
    "\001\002\000\042\014\116\015\111\016\113\017\105\020" +
    "\103\021\112\022\122\023\120\024\114\025\106\026\107" +
    "\027\115\030\104\031\117\033\121\076\252\001\002\000" +
    "\004\006\247\001\002\000\062\006\067\015\062\032\054" +
    "\035\065\036\071\041\075\042\066\043\056\044\063\045" +
    "\050\046\053\047\047\050\100\051\057\052\072\053\061" +
    "\054\077\055\052\056\074\057\055\060\064\070\051\103" +
    "\070\104\076\001\002\000\122\002\uffa7\003\uffa7\004\uffa7" +
    "\007\uffa7\011\uffa7\012\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7\034\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\071\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077" +
    "\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7\001\002\000\004" +
    "\006\240\001\002\000\004\006\235\001\002\000\122\002" +
    "\uff9f\003\uff9f\004\uff9f\007\uff9f\011\uff9f\012\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\033\uff9f\034\uff9f\036\uff9f\037\uff9f\040\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\064\uff9f\065\uff9f\071\uff9f\073\uff9f\074\uff9f" +
    "\075\uff9f\076\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103" +
    "\uff9f\001\002\000\062\006\067\015\062\032\054\035\065" +
    "\036\071\041\075\042\066\043\056\044\063\045\050\046" +
    "\053\047\047\050\100\051\057\052\072\053\061\054\077" +
    "\055\052\056\074\057\055\060\064\070\051\103\070\104" +
    "\076\001\002\000\122\002\uff9a\003\uff9a\004\uff9a\007\uff9a" +
    "\011\uff9a\012\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\033\uff9a\034\uff9a\036\uff9a\037" +
    "\uff9a\040\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a" +
    "\071\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100" +
    "\uff9a\101\uff9a\102\uff9a\103\uff9a\001\002\000\126\002\uffa8" +
    "\003\uffa8\004\uffa8\006\171\007\uffa8\010\170\011\uffa8\012" +
    "\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\033\uffa8\034\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\071\uffa8\073" +
    "\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8" +
    "\102\uffa8\103\uffa8\001\002\000\004\006\165\001\002\000" +
    "\122\002\uffa9\003\uffa9\004\uffa9\007\uffa9\011\uffa9\012\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\033\uffa9\034\uffa9\036\uffa9\037\uffa9\040\uffa9\061" +
    "\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\071\uffa9\073\uffa9" +
    "\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102" +
    "\uffa9\103\uffa9\001\002\000\004\006\157\001\002\000\122" +
    "\002\uff8e\003\uff8e\004\uff8e\007\uff8e\011\uff8e\012\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e" +
    "\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\033\uff8e\034\uff8e\036\uff8e\037\uff8e\040\uff8e\061\uff8e" +
    "\062\uff8e\063\uff8e\064\uff8e\065\uff8e\071\uff8e\073\uff8e\074" +
    "\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e\101\uff8e\102\uff8e" +
    "\103\uff8e\001\002\000\004\006\151\001\002\000\004\006" +
    "\146\001\002\000\004\006\101\001\002\000\062\006\067" +
    "\015\062\032\054\035\065\036\071\041\075\042\066\043" +
    "\056\044\063\045\050\046\053\047\047\050\100\051\057" +
    "\052\072\053\061\054\077\055\052\056\074\057\055\060" +
    "\064\070\051\103\070\104\076\001\002\000\042\014\116" +
    "\015\111\016\113\017\105\020\103\021\112\022\122\023" +
    "\120\024\114\025\106\026\107\027\115\030\104\031\117" +
    "\033\121\037\110\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\122\002\uffb2\003\uffb2\004" +
    "\uffb2\007\uffb2\011\uffb2\012\uffb2\014\116\015\111\016\113" +
    "\017\105\020\103\021\112\022\122\023\120\024\114\025" +
    "\106\026\107\027\115\030\uffb2\031\uffb2\033\uffb2\034\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\071\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2" +
    "\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\001\002\000" +
    "\042\014\116\015\111\016\113\017\105\020\103\021\112" +
    "\022\122\023\120\024\114\025\106\026\107\027\115\030" +
    "\104\031\117\033\121\034\125\001\002\000\062\006\067" +
    "\015\062\032\054\035\065\036\071\041\075\042\066\043" +
    "\056\044\063\045\050\046\053\047\047\050\100\051\057" +
    "\052\072\053\061\054\077\055\052\056\074\057\055\060" +
    "\064\070\051\103\070\104\076\001\002\000\122\002\uffbb" +
    "\003\uffbb\004\uffbb\007\uffbb\011\uffbb\012\uffbb\014\116\015" +
    "\111\016\113\017\105\020\103\021\112\022\122\023\120" +
    "\024\114\025\106\026\107\027\115\030\104\031\117\033" +
    "\121\034\uffbb\036\uffbb\037\uffbb\040\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\071\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb" +
    "\001\002\000\122\002\uffb1\003\uffb1\004\uffb1\007\uffb1\011" +
    "\uffb1\012\uffb1\014\116\015\111\016\113\017\105\020\103" +
    "\021\112\022\122\023\120\024\114\025\106\026\107\027" +
    "\115\030\uffb1\031\uffb1\033\uffb1\034\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\071" +
    "\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1" +
    "\101\uffb1\102\uffb1\103\uffb1\001\002\000\122\002\uffab\003" +
    "\uffab\004\uffab\007\uffab\011\uffab\012\uffab\014\116\015\111" +
    "\016\113\017\105\020\103\021\112\022\122\023\120\024" +
    "\114\025\106\026\107\027\115\030\104\031\117\033\uffab" +
    "\034\uffab\036\uffab\037\uffab\040\uffab\061\uffab\062\uffab\063" +
    "\uffab\064\uffab\065\uffab\071\uffab\073\uffab\074\uffab\075\uffab" +
    "\076\uffab\077\uffab\100\uffab\101\uffab\102\uffab\103\uffab\001" +
    "\002\000\122\002\uffb8\003\uffb8\004\uffb8\007\uffb8\011\uffb8" +
    "\012\uffb8\014\116\015\111\016\113\017\105\020\103\021" +
    "\112\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\033\uffb8\034\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\071\uffb8" +
    "\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101" +
    "\uffb8\102\uffb8\103\uffb8\001\002\000\122\002\uffae\003\uffae" +
    "\004\uffae\007\uffae\011\uffae\012\uffae\014\116\015\111\016" +
    "\113\017\105\020\103\021\112\022\uffae\023\uffae\024\114" +
    "\025\106\026\107\027\115\030\uffae\031\uffae\033\uffae\034" +
    "\uffae\036\uffae\037\uffae\040\uffae\061\uffae\062\uffae\063\uffae" +
    "\064\uffae\065\uffae\071\uffae\073\uffae\074\uffae\075\uffae\076" +
    "\uffae\077\uffae\100\uffae\101\uffae\102\uffae\103\uffae\001\002" +
    "\000\122\002\uffaf\003\uffaf\004\uffaf\007\uffaf\011\uffaf\012" +
    "\uffaf\014\116\015\111\016\113\017\105\020\103\021\112" +
    "\022\uffaf\023\uffaf\024\114\025\106\026\107\027\115\030" +
    "\uffaf\031\uffaf\033\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\071\uffaf\073" +
    "\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf" +
    "\102\uffaf\103\uffaf\001\002\000\122\002\uffb6\003\uffb6\004" +
    "\uffb6\007\uffb6\011\uffb6\012\uffb6\014\uffb6\015\uffb6\016\113" +
    "\017\105\020\103\021\112\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\061\uffb6\062\uffb6\063\uffb6\064" +
    "\uffb6\065\uffb6\071\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6" +
    "\077\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\001\002\000" +
    "\122\002\uffb4\003\uffb4\004\uffb4\007\uffb4\011\uffb4\012\uffb4" +
    "\014\uffb4\015\uffb4\016\113\017\105\020\103\021\112\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\033\uffb4\034\uffb4\036\uffb4\037\uffb4\040\uffb4\061" +
    "\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\071\uffb4\073\uffb4" +
    "\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102" +
    "\uffb4\103\uffb4\001\002\000\122\002\uffb7\003\uffb7\004\uffb7" +
    "\007\uffb7\011\uffb7\012\uffb7\014\116\015\111\016\113\017" +
    "\105\020\103\021\112\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7" +
    "\065\uffb7\071\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077" +
    "\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\001\002\000\042" +
    "\007\140\014\116\015\111\016\113\017\105\020\103\021" +
    "\112\022\122\023\120\024\114\025\106\026\107\027\115" +
    "\030\104\031\117\033\121\001\002\000\122\002\uff99\003" +
    "\uff99\004\uff99\007\uff99\011\uff99\012\uff99\014\uff99\015\uff99" +
    "\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024" +
    "\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\033\uff99" +
    "\034\uff99\036\uff99\037\uff99\040\uff99\061\uff99\062\uff99\063" +
    "\uff99\064\uff99\065\uff99\071\uff99\073\uff99\074\uff99\075\uff99" +
    "\076\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103\uff99\001" +
    "\002\000\122\002\uffad\003\uffad\004\uffad\007\uffad\011\uffad" +
    "\012\uffad\014\116\015\111\016\113\017\105\020\103\021" +
    "\112\022\uffad\023\uffad\024\114\025\106\026\107\027\115" +
    "\030\uffad\031\uffad\033\uffad\034\uffad\036\uffad\037\uffad\040" +
    "\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\071\uffad" +
    "\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101" +
    "\uffad\102\uffad\103\uffad\001\002\000\122\002\uffb0\003\uffb0" +
    "\004\uffb0\007\uffb0\011\uffb0\012\uffb0\014\116\015\111\016" +
    "\113\017\105\020\103\021\112\022\uffb0\023\uffb0\024\114" +
    "\025\106\026\107\027\115\030\uffb0\031\uffb0\033\uffb0\034" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\071\uffb0\073\uffb0\074\uffb0\075\uffb0\076" +
    "\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\001\002" +
    "\000\122\002\uffb5\003\uffb5\004\uffb5\007\uffb5\011\uffb5\012" +
    "\uffb5\014\uffb5\015\uffb5\016\113\017\105\020\103\021\112" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\071\uffb5\073" +
    "\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5" +
    "\102\uffb5\103\uffb5\001\002\000\122\002\uffac\003\uffac\004" +
    "\uffac\007\uffac\011\uffac\012\uffac\014\116\015\111\016\113" +
    "\017\105\020\103\021\112\022\122\023\120\024\114\025" +
    "\106\026\107\027\115\030\104\031\117\033\uffac\034\uffac" +
    "\036\uffac\037\uffac\040\uffac\061\uffac\062\uffac\063\uffac\064" +
    "\uffac\065\uffac\071\uffac\073\uffac\074\uffac\075\uffac\076\uffac" +
    "\077\uffac\100\uffac\101\uffac\102\uffac\103\uffac\001\002\000" +
    "\122\002\uffb3\003\uffb3\004\uffb3\007\uffb3\011\uffb3\012\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\103\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\033\uffb3\034\uffb3\036\uffb3\037\uffb3\040\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\071\uffb3\073\uffb3" +
    "\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102" +
    "\uffb3\103\uffb3\001\002\000\062\006\067\015\062\032\054" +
    "\035\065\036\071\041\075\042\066\043\056\044\063\045" +
    "\050\046\053\047\047\050\100\051\057\052\072\053\061" +
    "\054\077\055\052\056\074\057\055\060\064\070\051\103" +
    "\070\104\076\001\002\000\042\007\150\014\116\015\111" +
    "\016\113\017\105\020\103\021\112\022\122\023\120\024" +
    "\114\025\106\026\107\027\115\030\104\031\117\033\121" +
    "\001\002\000\122\002\uff95\003\uff95\004\uff95\007\uff95\011" +
    "\uff95\012\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95" +
    "\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\033\uff95\034\uff95\036\uff95\037\uff95" +
    "\040\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065\uff95\071" +
    "\uff95\073\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95" +
    "\101\uff95\102\uff95\103\uff95\001\002\000\062\006\067\015" +
    "\062\032\054\035\065\036\071\041\075\042\066\043\056" +
    "\044\063\045\050\046\053\047\047\050\100\051\057\052" +
    "\072\053\061\054\077\055\052\056\074\057\055\060\064" +
    "\070\051\103\070\104\076\001\002\000\044\007\uffc4\014" +
    "\116\015\111\016\113\017\105\020\103\021\112\022\122" +
    "\023\120\024\114\025\106\026\107\027\115\030\104\031" +
    "\117\033\121\037\155\001\002\000\004\007\154\001\002" +
    "\000\122\002\uffbd\003\uffbd\004\uffbd\007\uffbd\011\uffbd\012" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\033\uffbd\034\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\071\uffbd\073" +
    "\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd" +
    "\102\uffbd\103\uffbd\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\004\007\uffc5\001\002\000" +
    "\062\006\067\015\062\032\054\035\065\036\071\041\075" +
    "\042\066\043\056\044\063\045\050\046\053\047\047\050" +
    "\100\051\057\052\072\053\061\054\077\055\052\056\074" +
    "\057\055\060\064\070\051\103\070\104\076\001\002\000" +
    "\044\007\162\014\116\015\111\016\113\017\105\020\103" +
    "\021\112\022\122\023\120\024\114\025\106\026\107\027" +
    "\115\030\104\031\117\033\121\037\161\001\002\000\062" +
    "\006\067\015\062\032\054\035\065\036\071\041\075\042" +
    "\066\043\056\044\063\045\050\046\053\047\047\050\100" +
    "\051\057\052\072\053\061\054\077\055\052\056\074\057" +
    "\055\060\064\070\051\103\070\104\076\001\002\000\122" +
    "\002\uff94\003\uff94\004\uff94\007\uff94\011\uff94\012\uff94\014" +
    "\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94" +
    "\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031" +
    "\uff94\033\uff94\034\uff94\036\uff94\037\uff94\040\uff94\061\uff94" +
    "\062\uff94\063\uff94\064\uff94\065\uff94\071\uff94\073\uff94\074" +
    "\uff94\075\uff94\076\uff94\077\uff94\100\uff94\101\uff94\102\uff94" +
    "\103\uff94\001\002\000\042\007\164\014\116\015\111\016" +
    "\113\017\105\020\103\021\112\022\122\023\120\024\114" +
    "\025\106\026\107\027\115\030\104\031\117\033\121\001" +
    "\002\000\122\002\uff93\003\uff93\004\uff93\007\uff93\011\uff93" +
    "\012\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021" +
    "\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93" +
    "\030\uff93\031\uff93\033\uff93\034\uff93\036\uff93\037\uff93\040" +
    "\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93\071\uff93" +
    "\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93\101" +
    "\uff93\102\uff93\103\uff93\001\002\000\062\006\067\015\062" +
    "\032\054\035\065\036\071\041\075\042\066\043\056\044" +
    "\063\045\050\046\053\047\047\050\100\051\057\052\072" +
    "\053\061\054\077\055\052\056\074\057\055\060\064\070" +
    "\051\103\070\104\076\001\002\000\042\007\167\014\116" +
    "\015\111\016\113\017\105\020\103\021\112\022\122\023" +
    "\120\024\114\025\106\026\107\027\115\030\104\031\117" +
    "\033\121\001\002\000\122\002\uff97\003\uff97\004\uff97\007" +
    "\uff97\011\uff97\012\uff97\014\uff97\015\uff97\016\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\031\uff97\033\uff97\034\uff97\036\uff97" +
    "\037\uff97\040\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065" +
    "\uff97\071\uff97\073\uff97\074\uff97\075\uff97\076\uff97\077\uff97" +
    "\100\uff97\101\uff97\102\uff97\103\uff97\001\002\000\064\006" +
    "\067\010\210\015\062\032\054\035\065\036\071\041\075" +
    "\042\066\043\056\044\063\045\050\046\053\047\047\050" +
    "\100\051\057\052\072\053\061\054\077\055\052\056\074" +
    "\057\055\060\064\070\051\103\070\104\076\001\002\000" +
    "\064\006\067\007\176\015\062\032\054\035\065\036\175" +
    "\041\075\042\066\043\056\044\063\045\050\046\053\047" +
    "\047\050\100\051\057\052\072\053\061\054\077\055\052" +
    "\056\074\057\055\060\064\070\051\103\070\104\076\001" +
    "\002\000\006\007\uffe7\037\uffe7\001\002\000\006\007\204" +
    "\037\203\001\002\000\044\007\uffe8\014\116\015\111\016" +
    "\113\017\105\020\103\021\112\022\122\023\120\024\114" +
    "\025\106\026\107\027\115\030\104\031\117\033\121\037" +
    "\uffe8\001\002\000\052\006\171\007\uffa8\010\170\013\177" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\033\uffa8\037\uffa8\001\002\000\122\002\uffbe\003" +
    "\uffbe\004\uffbe\007\uffbe\011\uffbe\012\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe" +
    "\034\uffbe\036\uffbe\037\uffbe\040\uffbe\061\uffbe\062\uffbe\063" +
    "\uffbe\064\uffbe\065\uffbe\071\uffbe\073\uffbe\074\uffbe\075\uffbe" +
    "\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\001" +
    "\002\000\062\006\067\015\062\032\054\035\065\036\071" +
    "\041\075\042\066\043\056\044\063\045\050\046\053\047" +
    "\047\050\100\051\057\052\072\053\061\054\077\055\052" +
    "\056\074\057\055\060\064\070\051\103\070\104\076\001" +
    "\002\000\114\002\uffc1\003\uffc1\004\uffc1\007\uffc1\012\201" +
    "\014\116\015\111\016\113\017\105\020\103\021\112\022" +
    "\122\023\120\024\114\025\106\026\107\027\115\030\104" +
    "\031\117\033\121\036\uffc1\037\uffc1\040\uffc1\061\uffc1\062" +
    "\uffc1\063\uffc1\064\uffc1\065\uffc1\071\uffc1\073\uffc1\074\uffc1" +
    "\075\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\001" +
    "\002\000\054\002\uffc2\003\uffc2\004\uffc2\007\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065" +
    "\uffc2\071\uffc2\073\uffc2\074\uffc2\075\uffc2\077\uffc2\100\uffc2" +
    "\101\uffc2\102\uffc2\103\uffc2\001\002\000\054\002\uffc3\003" +
    "\uffc3\004\uffc3\007\uffc3\036\uffc3\037\uffc3\040\uffc3\061\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\065\uffc3\071\uffc3\073\uffc3\074" +
    "\uffc3\075\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3" +
    "\001\002\000\062\006\067\015\062\032\054\035\065\036" +
    "\175\041\075\042\066\043\056\044\063\045\050\046\053" +
    "\047\047\050\100\051\057\052\072\053\061\054\077\055" +
    "\052\056\074\057\055\060\064\070\051\103\070\104\076" +
    "\001\002\000\122\002\uffbf\003\uffbf\004\uffbf\007\uffbf\011" +
    "\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\071" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\101\uffbf\102\uffbf\103\uffbf\001\002\000\006\007\uffe9\037" +
    "\uffe9\001\002\000\044\007\uffea\014\116\015\111\016\113" +
    "\017\105\020\103\021\112\022\122\023\120\024\114\025" +
    "\106\026\107\027\115\030\104\031\117\033\121\037\uffea" +
    "\001\002\000\042\011\223\014\116\015\111\016\113\017" +
    "\105\020\103\021\112\022\122\023\120\024\114\025\106" +
    "\026\107\027\115\030\104\031\117\033\121\001\002\000" +
    "\062\006\067\015\062\032\054\035\065\036\071\041\075" +
    "\042\066\043\056\044\063\045\050\046\053\047\047\050" +
    "\100\051\057\052\072\053\061\054\077\055\052\056\074" +
    "\057\055\060\064\070\051\103\070\104\076\001\002\000" +
    "\042\011\212\014\116\015\111\016\113\017\105\020\103" +
    "\021\112\022\122\023\120\024\114\025\106\026\107\027" +
    "\115\030\104\031\117\033\121\001\002\000\004\011\213" +
    "\001\002\000\124\002\uffa2\003\uffa2\004\uffa2\007\uffa2\010" +
    "\214\011\uffa2\012\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2\034\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065" +
    "\uffa2\071\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2" +
    "\100\uffa2\101\uffa2\102\uffa2\103\uffa2\001\002\000\064\006" +
    "\067\010\216\015\062\032\054\035\065\036\071\041\075" +
    "\042\066\043\056\044\063\045\050\046\053\047\047\050" +
    "\100\051\057\052\072\053\061\054\077\055\052\056\074" +
    "\057\055\060\064\070\051\103\070\104\076\001\002\000" +
    "\042\011\222\014\116\015\111\016\113\017\105\020\103" +
    "\021\112\022\122\023\120\024\114\025\106\026\107\027" +
    "\115\030\104\031\117\033\121\001\002\000\062\006\067" +
    "\015\062\032\054\035\065\036\071\041\075\042\066\043" +
    "\056\044\063\045\050\046\053\047\047\050\100\051\057" +
    "\052\072\053\061\054\077\055\052\056\074\057\055\060" +
    "\064\070\051\103\070\104\076\001\002\000\042\011\220" +
    "\014\116\015\111\016\113\017\105\020\103\021\112\022" +
    "\122\023\120\024\114\025\106\026\107\027\115\030\104" +
    "\031\117\033\121\001\002\000\004\011\221\001\002\000" +
    "\122\002\uffa1\003\uffa1\004\uffa1\007\uffa1\011\uffa1\012\uffa1" +
    "\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\033\uffa1\034\uffa1\036\uffa1\037\uffa1\040\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\071\uffa1\073\uffa1" +
    "\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\102" +
    "\uffa1\103\uffa1\001\002\000\122\002\uffa3\003\uffa3\004\uffa3" +
    "\007\uffa3\011\uffa3\012\uffa3\014\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3\034\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3" +
    "\065\uffa3\071\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077" +
    "\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\001\002\000\124" +
    "\002\uffa6\003\uffa6\004\uffa6\007\uffa6\010\224\011\uffa6\012" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\033\uffa6\034\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\071\uffa6\073" +
    "\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6" +
    "\102\uffa6\103\uffa6\001\002\000\064\006\067\010\226\015" +
    "\062\032\054\035\065\036\071\041\075\042\066\043\056" +
    "\044\063\045\050\046\053\047\047\050\100\051\057\052" +
    "\072\053\061\054\077\055\052\056\074\057\055\060\064" +
    "\070\051\103\070\104\076\001\002\000\042\011\232\014" +
    "\116\015\111\016\113\017\105\020\103\021\112\022\122" +
    "\023\120\024\114\025\106\026\107\027\115\030\104\031" +
    "\117\033\121\001\002\000\062\006\067\015\062\032\054" +
    "\035\065\036\071\041\075\042\066\043\056\044\063\045" +
    "\050\046\053\047\047\050\100\051\057\052\072\053\061" +
    "\054\077\055\052\056\074\057\055\060\064\070\051\103" +
    "\070\104\076\001\002\000\042\011\230\014\116\015\111" +
    "\016\113\017\105\020\103\021\112\022\122\023\120\024" +
    "\114\025\106\026\107\027\115\030\104\031\117\033\121" +
    "\001\002\000\004\011\231\001\002\000\122\002\uffa4\003" +
    "\uffa4\004\uffa4\007\uffa4\011\uffa4\012\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\033\uffa4" +
    "\034\uffa4\036\uffa4\037\uffa4\040\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\064\uffa4\065\uffa4\071\uffa4\073\uffa4\074\uffa4\075\uffa4" +
    "\076\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\001" +
    "\002\000\122\002\uffa5\003\uffa5\004\uffa5\007\uffa5\011\uffa5" +
    "\012\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\033\uffa5\034\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\071\uffa5" +
    "\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\101" +
    "\uffa5\102\uffa5\103\uffa5\001\002\000\042\007\234\014\116" +
    "\015\111\016\113\017\105\020\103\021\112\022\122\023" +
    "\120\024\114\025\106\026\107\027\115\030\104\031\117" +
    "\033\121\001\002\000\122\002\uffaa\003\uffaa\004\uffaa\007" +
    "\uffaa\011\uffaa\012\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa\034\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065" +
    "\uffaa\071\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa" +
    "\100\uffaa\101\uffaa\102\uffaa\103\uffaa\001\002\000\062\006" +
    "\067\015\062\032\054\035\065\036\071\041\075\042\066" +
    "\043\056\044\063\045\050\046\053\047\047\050\100\051" +
    "\057\052\072\053\061\054\077\055\052\056\074\057\055" +
    "\060\064\070\051\103\070\104\076\001\002\000\004\007" +
    "\237\001\002\000\122\002\uffbc\003\uffbc\004\uffbc\007\uffbc" +
    "\011\uffbc\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\071\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\101\uffbc\102\uffbc\103\uffbc\001\002\000\062\006\067" +
    "\015\062\032\054\035\065\036\071\041\075\042\066\043" +
    "\056\044\063\045\050\046\053\047\047\050\100\051\057" +
    "\052\072\053\061\054\077\055\052\056\074\057\055\060" +
    "\064\070\051\103\070\104\076\001\002\000\044\007\243" +
    "\014\116\015\111\016\113\017\105\020\103\021\112\022" +
    "\122\023\120\024\114\025\106\026\107\027\115\030\104" +
    "\031\117\033\121\037\242\001\002\000\062\006\067\015" +
    "\062\032\054\035\065\036\071\041\075\042\066\043\056" +
    "\044\063\045\050\046\053\047\047\050\100\051\057\052" +
    "\072\053\061\054\077\055\052\056\074\057\055\060\064" +
    "\070\051\103\070\104\076\001\002\000\122\002\uff90\003" +
    "\uff90\004\uff90\007\uff90\011\uff90\012\uff90\014\uff90\015\uff90" +
    "\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024" +
    "\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\033\uff90" +
    "\034\uff90\036\uff90\037\uff90\040\uff90\061\uff90\062\uff90\063" +
    "\uff90\064\uff90\065\uff90\071\uff90\073\uff90\074\uff90\075\uff90" +
    "\076\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90\001" +
    "\002\000\042\007\245\014\116\015\111\016\113\017\105" +
    "\020\103\021\112\022\122\023\120\024\114\025\106\026" +
    "\107\027\115\030\104\031\117\033\121\001\002\000\122" +
    "\002\uff8f\003\uff8f\004\uff8f\007\uff8f\011\uff8f\012\uff8f\014" +
    "\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f" +
    "\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\033\uff8f\034\uff8f\036\uff8f\037\uff8f\040\uff8f\061\uff8f" +
    "\062\uff8f\063\uff8f\064\uff8f\065\uff8f\071\uff8f\073\uff8f\074" +
    "\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f" +
    "\103\uff8f\001\002\000\122\002\uffb9\003\uffb9\004\uffb9\007" +
    "\uffb9\011\uffb9\012\uffb9\014\116\015\111\016\113\017\105" +
    "\020\103\021\112\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\071\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9" +
    "\100\uffb9\101\uffb9\102\uffb9\103\uffb9\001\002\000\062\006" +
    "\067\015\062\032\054\035\065\036\071\041\075\042\066" +
    "\043\056\044\063\045\050\046\053\047\047\050\100\051" +
    "\057\052\072\053\061\054\077\055\052\056\074\057\055" +
    "\060\064\070\051\103\070\104\076\001\002\000\042\007" +
    "\251\014\116\015\111\016\113\017\105\020\103\021\112" +
    "\022\122\023\120\024\114\025\106\026\107\027\115\030" +
    "\104\031\117\033\121\001\002\000\122\002\uff96\003\uff96" +
    "\004\uff96\007\uff96\011\uff96\012\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96" +
    "\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\033\uff96\034" +
    "\uff96\036\uff96\037\uff96\040\uff96\061\uff96\062\uff96\063\uff96" +
    "\064\uff96\065\uff96\071\uff96\073\uff96\074\uff96\075\uff96\076" +
    "\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103\uff96\001\002" +
    "\000\062\006\067\015\062\032\054\035\065\036\071\041" +
    "\075\042\066\043\056\044\063\045\050\046\053\047\047" +
    "\050\100\051\057\052\072\053\061\054\077\055\052\056" +
    "\074\057\055\060\064\070\051\103\070\104\076\001\002" +
    "\000\042\007\254\014\116\015\111\016\113\017\105\020" +
    "\103\021\112\022\122\023\120\024\114\025\106\026\107" +
    "\027\115\030\104\031\117\033\121\001\002\000\004\005" +
    "\255\001\002\000\040\003\035\036\027\040\032\061\012" +
    "\062\025\063\026\064\010\065\036\071\017\073\006\074" +
    "\023\075\041\077\031\100\004\101\014\001\002\000\004" +
    "\004\261\001\002\000\042\003\035\004\uffcc\036\027\040" +
    "\032\061\012\062\025\063\026\064\010\065\036\071\017" +
    "\073\006\074\023\075\041\077\031\100\004\101\014\001" +
    "\002\000\004\004\uffcd\001\002\000\050\002\uffd8\003\uffd8" +
    "\004\uffd8\036\uffd8\040\uffd8\061\uffd8\062\uffd8\063\uffd8\064" +
    "\uffd8\065\uffd8\071\uffd8\073\uffd8\074\uffd8\075\uffd8\077\uffd8" +
    "\100\uffd8\101\uffd8\102\uffd8\103\uffd8\001\002\000\062\006" +
    "\067\015\062\032\054\035\065\036\071\041\075\042\066" +
    "\043\056\044\063\045\050\046\053\047\047\050\100\051" +
    "\057\052\072\053\061\054\077\055\052\056\074\057\055" +
    "\060\064\070\051\103\070\104\076\001\002\000\042\007" +
    "\264\014\116\015\111\016\113\017\105\020\103\021\112" +
    "\022\122\023\120\024\114\025\106\026\107\027\115\030" +
    "\104\031\117\033\121\001\002\000\122\002\uff98\003\uff98" +
    "\004\uff98\007\uff98\011\uff98\012\uff98\014\uff98\015\uff98\016" +
    "\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98" +
    "\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\033\uff98\034" +
    "\uff98\036\uff98\037\uff98\040\uff98\061\uff98\062\uff98\063\uff98" +
    "\064\uff98\065\uff98\071\uff98\073\uff98\074\uff98\075\uff98\076" +
    "\uff98\077\uff98\100\uff98\101\uff98\102\uff98\103\uff98\001\002" +
    "\000\062\006\067\015\062\032\054\035\065\036\071\041" +
    "\075\042\066\043\056\044\063\045\050\046\053\047\047" +
    "\050\100\051\057\052\072\053\061\054\077\055\052\056" +
    "\074\057\055\060\064\070\051\103\070\104\076\001\002" +
    "\000\044\007\270\014\116\015\111\016\113\017\105\020" +
    "\103\021\112\022\122\023\120\024\114\025\106\026\107" +
    "\027\115\030\104\031\117\033\121\037\267\001\002\000" +
    "\062\006\067\015\062\032\054\035\065\036\071\041\075" +
    "\042\066\043\056\044\063\045\050\046\053\047\047\050" +
    "\100\051\057\052\072\053\061\054\077\055\052\056\074" +
    "\057\055\060\064\070\051\103\070\104\076\001\002\000" +
    "\122\002\uff92\003\uff92\004\uff92\007\uff92\011\uff92\012\uff92" +
    "\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022" +
    "\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92" +
    "\031\uff92\033\uff92\034\uff92\036\uff92\037\uff92\040\uff92\061" +
    "\uff92\062\uff92\063\uff92\064\uff92\065\uff92\071\uff92\073\uff92" +
    "\074\uff92\075\uff92\076\uff92\077\uff92\100\uff92\101\uff92\102" +
    "\uff92\103\uff92\001\002\000\042\007\272\014\116\015\111" +
    "\016\113\017\105\020\103\021\112\022\122\023\120\024" +
    "\114\025\106\026\107\027\115\030\104\031\117\033\121" +
    "\001\002\000\122\002\uff91\003\uff91\004\uff91\007\uff91\011" +
    "\uff91\012\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91" +
    "\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\031\uff91\033\uff91\034\uff91\036\uff91\037\uff91" +
    "\040\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\071" +
    "\uff91\073\uff91\074\uff91\075\uff91\076\uff91\077\uff91\100\uff91" +
    "\101\uff91\102\uff91\103\uff91\001\002\000\122\002\uffba\003" +
    "\uffba\004\uffba\007\uffba\011\uffba\012\uffba\014\116\015\111" +
    "\016\113\017\105\020\103\021\112\022\122\023\120\024" +
    "\114\025\106\026\107\027\115\030\104\031\117\033\121" +
    "\034\uffba\036\uffba\037\uffba\040\uffba\061\uffba\062\uffba\063" +
    "\uffba\064\uffba\065\uffba\071\uffba\073\uffba\074\uffba\075\uffba" +
    "\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba\001" +
    "\002\000\062\006\067\015\062\032\054\035\065\036\071" +
    "\041\075\042\066\043\056\044\063\045\050\046\053\047" +
    "\047\050\100\051\057\052\072\053\061\054\077\055\052" +
    "\056\074\057\055\060\064\070\051\103\070\104\076\001" +
    "\002\000\042\007\276\014\116\015\111\016\113\017\105" +
    "\020\103\021\112\022\122\023\120\024\114\025\106\026" +
    "\107\027\115\030\104\031\117\033\121\001\002\000\122" +
    "\002\uff9c\003\uff9c\004\uff9c\007\uff9c\011\uff9c\012\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\033\uff9c\034\uff9c\036\uff9c\037\uff9c\040\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\065\uff9c\071\uff9c\073\uff9c\074" +
    "\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c" +
    "\103\uff9c\001\002\000\062\006\067\015\062\032\054\035" +
    "\065\036\071\041\075\042\066\043\056\044\063\045\050" +
    "\046\053\047\047\050\100\051\057\052\072\053\061\054" +
    "\077\055\052\056\074\057\055\060\064\070\051\103\070" +
    "\104\076\001\002\000\042\007\301\014\116\015\111\016" +
    "\113\017\105\020\103\021\112\022\122\023\120\024\114" +
    "\025\106\026\107\027\115\030\104\031\117\033\121\001" +
    "\002\000\122\002\uff9d\003\uff9d\004\uff9d\007\uff9d\011\uff9d" +
    "\012\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\031\uff9d\033\uff9d\034\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\071\uff9d" +
    "\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101" +
    "\uff9d\102\uff9d\103\uff9d\001\002\000\062\006\067\015\062" +
    "\032\054\035\065\036\071\041\075\042\066\043\056\044" +
    "\063\045\050\046\053\047\047\050\100\051\057\052\072" +
    "\053\061\054\077\055\052\056\074\057\055\060\064\070" +
    "\051\103\070\104\076\001\002\000\042\007\304\014\116" +
    "\015\111\016\113\017\105\020\103\021\112\022\122\023" +
    "\120\024\114\025\106\026\107\027\115\030\104\031\117" +
    "\033\121\001\002\000\122\002\uff9b\003\uff9b\004\uff9b\007" +
    "\uff9b\011\uff9b\012\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\033\uff9b\034\uff9b\036\uff9b" +
    "\037\uff9b\040\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065" +
    "\uff9b\071\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b" +
    "\100\uff9b\101\uff9b\102\uff9b\103\uff9b\001\002\000\004\036" +
    "\306\001\002\000\004\037\307\001\002\000\062\006\067" +
    "\015\062\032\054\035\065\036\071\041\075\042\066\043" +
    "\056\044\063\045\050\046\053\047\047\050\100\051\057" +
    "\052\072\053\061\054\077\055\052\056\074\057\055\060" +
    "\064\070\051\103\070\104\076\001\002\000\042\014\116" +
    "\015\111\016\113\017\105\020\103\021\112\022\122\023" +
    "\120\024\114\025\106\026\107\027\115\030\104\031\117" +
    "\033\121\037\311\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\042\014\116\015\111\016" +
    "\113\017\105\020\103\021\112\022\122\023\120\024\114" +
    "\025\106\026\107\027\115\030\104\031\117\033\121\037" +
    "\313\001\002\000\062\006\067\015\062\032\054\035\065" +
    "\036\071\041\075\042\066\043\056\044\063\045\050\046" +
    "\053\047\047\050\100\051\057\052\072\053\061\054\077" +
    "\055\052\056\074\057\055\060\064\070\051\103\070\104" +
    "\076\001\002\000\042\014\116\015\111\016\113\017\105" +
    "\020\103\021\112\022\122\023\120\024\114\025\106\026" +
    "\107\027\115\030\104\031\117\033\121\037\315\001\002" +
    "\000\062\006\067\015\062\032\054\035\065\036\071\041" +
    "\075\042\066\043\056\044\063\045\050\046\053\047\047" +
    "\050\100\051\057\052\072\053\061\054\077\055\052\056" +
    "\074\057\055\060\064\070\051\103\070\104\076\001\002" +
    "\000\042\007\317\014\116\015\111\016\113\017\105\020" +
    "\103\021\112\022\122\023\120\024\114\025\106\026\107" +
    "\027\115\030\104\031\117\033\121\001\002\000\052\002" +
    "\uffc1\003\uffc1\004\uffc1\012\201\036\uffc1\040\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\065\uffc1\071\uffc1\073\uffc1\074" +
    "\uffc1\075\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1" +
    "\001\002\000\050\002\uffdf\003\uffdf\004\uffdf\036\uffdf\040" +
    "\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\071\uffdf" +
    "\073\uffdf\074\uffdf\075\uffdf\077\uffdf\100\uffdf\101\uffdf\102" +
    "\uffdf\103\uffdf\001\002\000\050\002\uffee\003\uffee\004\uffee" +
    "\036\uffee\040\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065" +
    "\uffee\071\uffee\073\uffee\074\uffee\075\uffee\077\uffee\100\uffee" +
    "\101\uffee\102\uffee\103\uffee\001\002\000\110\002\uffc1\003" +
    "\uffc1\004\uffc1\012\201\014\116\015\111\016\113\017\105" +
    "\020\103\021\112\022\122\023\120\024\114\025\106\026" +
    "\107\027\115\030\104\031\117\033\121\036\uffc1\040\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\071\uffc1\073" +
    "\uffc1\074\uffc1\075\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1" +
    "\103\uffc1\001\002\000\050\002\uffed\003\uffed\004\uffed\036" +
    "\uffed\040\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed" +
    "\071\uffed\073\uffed\074\uffed\075\uffed\077\uffed\100\uffed\101" +
    "\uffed\102\uffed\103\uffed\001\002\000\050\002\uffda\003\uffda" +
    "\004\uffda\036\uffda\040\uffda\061\uffda\062\uffda\063\uffda\064" +
    "\uffda\065\uffda\071\uffda\073\uffda\074\uffda\075\uffda\077\uffda" +
    "\100\uffda\101\uffda\102\uffda\103\uffda\001\002\000\064\006" +
    "\067\010\365\015\062\032\054\035\065\036\071\041\075" +
    "\042\066\043\056\044\063\045\050\046\053\047\047\050" +
    "\100\051\057\052\072\053\061\054\077\055\052\056\074" +
    "\057\055\060\064\070\051\103\070\104\076\001\002\000" +
    "\064\006\343\015\062\032\054\035\065\036\071\041\075" +
    "\042\066\043\056\044\063\045\050\046\053\047\047\050" +
    "\100\051\057\052\072\053\061\054\077\055\052\056\074" +
    "\057\055\060\064\066\342\070\051\103\070\104\076\001" +
    "\002\000\064\006\067\007\331\015\062\032\054\035\065" +
    "\036\175\041\075\042\066\043\056\044\063\045\050\046" +
    "\053\047\047\050\100\051\057\052\072\053\061\054\077" +
    "\055\052\056\074\057\055\060\064\070\051\103\070\104" +
    "\076\001\002\000\006\007\333\037\203\001\002\000\052" +
    "\002\uffc1\003\uffc1\004\uffc1\012\201\036\uffc1\040\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\071\uffc1\073\uffc1" +
    "\074\uffc1\075\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103" +
    "\uffc1\001\002\000\050\002\uffec\003\uffec\004\uffec\036\uffec" +
    "\040\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\071" +
    "\uffec\073\uffec\074\uffec\075\uffec\077\uffec\100\uffec\101\uffec" +
    "\102\uffec\103\uffec\001\002\000\054\002\uffc1\003\uffc1\004" +
    "\uffc1\012\201\013\334\036\uffc1\040\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\071\uffc1\073\uffc1\074\uffc1\075" +
    "\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\001\002" +
    "\000\004\025\336\001\002\000\050\002\uffeb\003\uffeb\004" +
    "\uffeb\036\uffeb\040\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb" +
    "\065\uffeb\071\uffeb\073\uffeb\074\uffeb\075\uffeb\077\uffeb\100" +
    "\uffeb\101\uffeb\102\uffeb\103\uffeb\001\002\000\004\005\337" +
    "\001\002\000\040\003\035\036\027\040\032\061\012\062" +
    "\025\063\026\064\010\065\036\071\017\073\006\074\023" +
    "\075\041\077\031\100\004\101\014\001\002\000\004\004" +
    "\341\001\002\000\050\002\uffe3\003\uffe3\004\uffe3\036\uffe3" +
    "\040\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\071" +
    "\uffe3\073\uffe3\074\uffe3\075\uffe3\077\uffe3\100\uffe3\101\uffe3" +
    "\102\uffe3\103\uffe3\001\002\000\004\006\352\001\002\000" +
    "\064\006\067\007\344\015\062\032\054\035\065\036\071" +
    "\041\075\042\066\043\056\044\063\045\050\046\053\047" +
    "\047\050\100\051\057\052\072\053\061\054\077\055\052" +
    "\056\074\057\055\060\064\070\051\103\070\104\076\001" +
    "\002\000\004\013\345\001\002\000\004\025\346\001\002" +
    "\000\004\005\347\001\002\000\040\003\035\036\027\040" +
    "\032\061\012\062\025\063\026\064\010\065\036\071\017" +
    "\073\006\074\023\075\041\077\031\100\004\101\014\001" +
    "\002\000\004\004\351\001\002\000\050\002\uffe5\003\uffe5" +
    "\004\uffe5\036\uffe5\040\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\071\uffe5\073\uffe5\074\uffe5\075\uffe5\077\uffe5" +
    "\100\uffe5\101\uffe5\102\uffe5\103\uffe5\001\002\000\064\006" +
    "\067\007\354\015\062\032\054\035\065\036\175\041\075" +
    "\042\066\043\056\044\063\045\050\046\053\047\047\050" +
    "\100\051\057\052\072\053\061\054\077\055\052\056\074" +
    "\057\055\060\064\070\051\103\070\104\076\001\002\000" +
    "\006\007\360\037\203\001\002\000\004\005\355\001\002" +
    "\000\040\003\035\036\027\040\032\061\012\062\025\063" +
    "\026\064\010\065\036\071\017\073\006\074\023\075\041" +
    "\077\031\100\004\101\014\001\002\000\004\004\357\001" +
    "\002\000\050\002\uffe6\003\uffe6\004\uffe6\036\uffe6\040\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\071\uffe6\073" +
    "\uffe6\074\uffe6\075\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6" +
    "\103\uffe6\001\002\000\004\005\361\001\002\000\040\003" +
    "\035\036\027\040\032\061\012\062\025\063\026\064\010" +
    "\065\036\071\017\073\006\074\023\075\041\077\031\100" +
    "\004\101\014\001\002\000\004\004\363\001\002\000\050" +
    "\002\uffe4\003\uffe4\004\uffe4\036\uffe4\040\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\064\uffe4\065\uffe4\071\uffe4\073\uffe4\074\uffe4" +
    "\075\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\103\uffe4\001" +
    "\002\000\042\011\374\014\116\015\111\016\113\017\105" +
    "\020\103\021\112\022\122\023\120\024\114\025\106\026" +
    "\107\027\115\030\104\031\117\033\121\001\002\000\062" +
    "\006\067\015\062\032\054\035\065\036\071\041\075\042" +
    "\066\043\056\044\063\045\050\046\053\047\047\050\100" +
    "\051\057\052\072\053\061\054\077\055\052\056\074\057" +
    "\055\060\064\070\051\103\070\104\076\001\002\000\042" +
    "\011\367\014\116\015\111\016\113\017\105\020\103\021" +
    "\112\022\122\023\120\024\114\025\106\026\107\027\115" +
    "\030\104\031\117\033\121\001\002\000\004\011\370\001" +
    "\002\000\004\013\371\001\002\000\062\006\067\015\062" +
    "\032\054\035\065\036\071\041\075\042\066\043\056\044" +
    "\063\045\050\046\053\047\047\050\100\051\057\052\072" +
    "\053\061\054\077\055\052\056\074\057\055\060\064\070" +
    "\051\103\070\104\076\001\002\000\110\002\uffc1\003\uffc1" +
    "\004\uffc1\012\201\014\116\015\111\016\113\017\105\020" +
    "\103\021\112\022\122\023\120\024\114\025\106\026\107" +
    "\027\115\030\104\031\117\033\121\036\uffc1\040\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\071\uffc1\073\uffc1" +
    "\074\uffc1\075\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103" +
    "\uffc1\001\002\000\050\002\uffc6\003\uffc6\004\uffc6\036\uffc6" +
    "\040\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\071" +
    "\uffc6\073\uffc6\074\uffc6\075\uffc6\077\uffc6\100\uffc6\101\uffc6" +
    "\102\uffc6\103\uffc6\001\002\000\004\013\375\001\002\000" +
    "\062\006\067\015\062\032\054\035\065\036\071\041\075" +
    "\042\066\043\056\044\063\045\050\046\053\047\047\050" +
    "\100\051\057\052\072\053\061\054\077\055\052\056\074" +
    "\057\055\060\064\070\051\103\070\104\076\001\002\000" +
    "\110\002\uffc1\003\uffc1\004\uffc1\012\201\014\116\015\111" +
    "\016\113\017\105\020\103\021\112\022\122\023\120\024" +
    "\114\025\106\026\107\027\115\030\104\031\117\033\121" +
    "\036\uffc1\040\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065" +
    "\uffc1\071\uffc1\073\uffc1\074\uffc1\075\uffc1\077\uffc1\100\uffc1" +
    "\101\uffc1\102\uffc1\103\uffc1\001\002\000\050\002\uffc7\003" +
    "\uffc7\004\uffc7\036\uffc7\040\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\071\uffc7\073\uffc7\074\uffc7\075\uffc7\077" +
    "\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\001\002\000\004" +
    "\036\u0101\001\002\000\004\037\u0102\001\002\000\062\006" +
    "\067\015\062\032\054\035\065\036\071\041\075\042\066" +
    "\043\056\044\063\045\050\046\053\047\047\050\100\051" +
    "\057\052\072\053\061\054\077\055\052\056\074\057\055" +
    "\060\064\070\051\103\070\104\076\001\002\000\042\014" +
    "\116\015\111\016\113\017\105\020\103\021\112\022\122" +
    "\023\120\024\114\025\106\026\107\027\115\030\104\031" +
    "\117\033\121\037\u0104\001\002\000\062\006\067\015\062" +
    "\032\054\035\065\036\071\041\075\042\066\043\056\044" +
    "\063\045\050\046\053\047\047\050\100\051\057\052\072" +
    "\053\061\054\077\055\052\056\074\057\055\060\064\070" +
    "\051\103\070\104\076\001\002\000\042\014\116\015\111" +
    "\016\113\017\105\020\103\021\112\022\122\023\120\024" +
    "\114\025\106\026\107\027\115\030\104\031\117\033\121" +
    "\037\u0106\001\002\000\062\006\067\015\062\032\054\035" +
    "\065\036\071\041\075\042\066\043\056\044\063\045\050" +
    "\046\053\047\047\050\100\051\057\052\072\053\061\054" +
    "\077\055\052\056\074\057\055\060\064\070\051\103\070" +
    "\104\076\001\002\000\042\014\116\015\111\016\113\017" +
    "\105\020\103\021\112\022\122\023\120\024\114\025\106" +
    "\026\107\027\115\030\104\031\117\033\121\037\u0108\001" +
    "\002\000\004\036\u0109\001\002\000\004\007\u010a\001\002" +
    "\000\052\002\uffc1\003\uffc1\004\uffc1\012\201\036\uffc1\040" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\071\uffc1" +
    "\073\uffc1\074\uffc1\075\uffc1\077\uffc1\100\uffc1\101\uffc1\102" +
    "\uffc1\103\uffc1\001\002\000\050\002\uffe1\003\uffe1\004\uffe1" +
    "\036\uffe1\040\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065" +
    "\uffe1\071\uffe1\073\uffe1\074\uffe1\075\uffe1\077\uffe1\100\uffe1" +
    "\101\uffe1\102\uffe1\103\uffe1\001\002\000\004\036\u010d\001" +
    "\002\000\004\037\u010e\001\002\000\004\036\u010f\001\002" +
    "\000\004\037\u0110\001\002\000\062\006\067\015\062\032" +
    "\054\035\065\036\071\041\075\042\066\043\056\044\063" +
    "\045\050\046\053\047\047\050\100\051\057\052\072\053" +
    "\061\054\077\055\052\056\074\057\055\060\064\070\051" +
    "\103\070\104\076\001\002\000\042\007\u0112\014\116\015" +
    "\111\016\113\017\105\020\103\021\112\022\122\023\120" +
    "\024\114\025\106\026\107\027\115\030\104\031\117\033" +
    "\121\001\002\000\052\002\uffc1\003\uffc1\004\uffc1\012\201" +
    "\036\uffc1\040\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065" +
    "\uffc1\071\uffc1\073\uffc1\074\uffc1\075\uffc1\077\uffc1\100\uffc1" +
    "\101\uffc1\102\uffc1\103\uffc1\001\002\000\050\002\uffe2\003" +
    "\uffe2\004\uffe2\036\uffe2\040\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\071\uffe2\073\uffe2\074\uffe2\075\uffe2\077" +
    "\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2\001\002\000\040" +
    "\003\035\036\027\040\032\061\012\062\025\063\026\064" +
    "\010\065\036\071\017\073\006\074\023\075\041\077\031" +
    "\100\004\101\014\001\002\000\004\004\u0116\001\002\000" +
    "\004\073\u0117\001\002\000\004\006\u0118\001\002\000\062" +
    "\006\067\015\062\032\054\035\065\036\071\041\075\042" +
    "\066\043\056\044\063\045\050\046\053\047\047\050\100" +
    "\051\057\052\072\053\061\054\077\055\052\056\074\057" +
    "\055\060\064\070\051\103\070\104\076\001\002\000\042" +
    "\007\u011a\014\116\015\111\016\113\017\105\020\103\021" +
    "\112\022\122\023\120\024\114\025\106\026\107\027\115" +
    "\030\104\031\117\033\121\001\002\000\052\002\uffc1\003" +
    "\uffc1\004\uffc1\012\201\036\uffc1\040\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\071\uffc1\073\uffc1\074\uffc1\075" +
    "\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\001\002" +
    "\000\050\002\uffd7\003\uffd7\004\uffd7\036\uffd7\040\uffd7\061" +
    "\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\071\uffd7\073\uffd7" +
    "\074\uffd7\075\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103" +
    "\uffd7\001\002\000\062\006\067\015\062\032\054\035\065" +
    "\036\071\041\075\042\066\043\056\044\063\045\050\046" +
    "\053\047\047\050\100\051\057\052\072\053\061\054\077" +
    "\055\052\056\074\057\055\060\064\070\051\103\070\104" +
    "\076\001\002\000\042\007\u011e\014\116\015\111\016\113" +
    "\017\105\020\103\021\112\022\122\023\120\024\114\025" +
    "\106\026\107\027\115\030\104\031\117\033\121\001\002" +
    "\000\004\005\u011f\001\002\000\040\003\035\036\027\040" +
    "\032\061\012\062\025\063\026\064\010\065\036\071\017" +
    "\073\006\074\023\075\041\077\031\100\004\101\014\001" +
    "\002\000\004\004\u0121\001\002\000\052\002\uffd3\003\uffd3" +
    "\004\uffd3\036\uffd3\040\uffd3\061\uffd3\062\uffd3\063\uffd3\064" +
    "\uffd3\065\uffd3\071\uffd3\072\u0122\073\uffd3\074\uffd3\075\uffd3" +
    "\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\001\002\000" +
    "\006\005\u0133\071\u0134\001\002\000\052\002\uffd1\003\uffd1" +
    "\004\uffd1\036\uffd1\040\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\071\uffd1\072\u0124\073\uffd1\074\uffd1\075\uffd1" +
    "\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\001\002\000" +
    "\006\005\u0125\071\u0126\001\002\000\040\003\035\036\027" +
    "\040\032\061\012\062\025\063\026\064\010\065\036\071" +
    "\017\073\006\074\023\075\041\077\031\100\004\101\014" +
    "\001\002\000\004\006\u0127\001\002\000\062\006\067\015" +
    "\062\032\054\035\065\036\071\041\075\042\066\043\056" +
    "\044\063\045\050\046\053\047\047\050\100\051\057\052" +
    "\072\053\061\054\077\055\052\056\074\057\055\060\064" +
    "\070\051\103\070\104\076\001\002\000\042\007\u0129\014" +
    "\116\015\111\016\113\017\105\020\103\021\112\022\122" +
    "\023\120\024\114\025\106\026\107\027\115\030\104\031" +
    "\117\033\121\001\002\000\004\005\u012a\001\002\000\040" +
    "\003\035\036\027\040\032\061\012\062\025\063\026\064" +
    "\010\065\036\071\017\073\006\074\023\075\041\077\031" +
    "\100\004\101\014\001\002\000\042\003\035\004\uffc8\036" +
    "\027\040\032\061\012\062\025\063\026\064\010\065\036" +
    "\071\017\073\006\074\023\075\041\077\031\100\004\101" +
    "\014\001\002\000\004\004\u012d\001\002\000\052\002\uffcf" +
    "\003\uffcf\004\uffcf\036\uffcf\040\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf" +
    "\075\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\001" +
    "\002\000\004\004\uffc9\001\002\000\042\003\035\004\uffca" +
    "\036\027\040\032\061\012\062\025\063\026\064\010\065" +
    "\036\071\017\073\006\074\023\075\041\077\031\100\004" +
    "\101\014\001\002\000\004\004\u0131\001\002\000\050\002" +
    "\uffd0\003\uffd0\004\uffd0\036\uffd0\040\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\064\uffd0\065\uffd0\071\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\001\002" +
    "\000\004\004\uffcb\001\002\000\040\003\035\036\027\040" +
    "\032\061\012\062\025\063\026\064\010\065\036\071\017" +
    "\073\006\074\023\075\041\077\031\100\004\101\014\001" +
    "\002\000\004\006\u0135\001\002\000\062\006\067\015\062" +
    "\032\054\035\065\036\071\041\075\042\066\043\056\044" +
    "\063\045\050\046\053\047\047\050\100\051\057\052\072" +
    "\053\061\054\077\055\052\056\074\057\055\060\064\070" +
    "\051\103\070\104\076\001\002\000\042\007\u0137\014\116" +
    "\015\111\016\113\017\105\020\103\021\112\022\122\023" +
    "\120\024\114\025\106\026\107\027\115\030\104\031\117" +
    "\033\121\001\002\000\004\005\u0138\001\002\000\040\003" +
    "\035\036\027\040\032\061\012\062\025\063\026\064\010" +
    "\065\036\071\017\073\006\074\023\075\041\077\031\100" +
    "\004\101\014\001\002\000\004\004\u013a\001\002\000\052" +
    "\002\uffce\003\uffce\004\uffce\036\uffce\040\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\uffce\065\uffce\071\uffce\072\uffce\073\uffce" +
    "\074\uffce\075\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103" +
    "\uffce\001\002\000\004\004\u013c\001\002\000\050\002\uffd2" +
    "\003\uffd2\004\uffd2\036\uffd2\040\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\071\uffd2\073\uffd2\074\uffd2\075\uffd2" +
    "\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\001\002\000" +
    "\062\006\067\015\062\032\054\035\065\036\071\041\075" +
    "\042\066\043\056\044\063\045\050\046\053\047\047\050" +
    "\100\051\057\052\072\053\061\054\077\055\052\056\074" +
    "\057\055\060\064\070\051\103\070\104\076\001\002\000" +
    "\042\007\u013f\014\116\015\111\016\113\017\105\020\103" +
    "\021\112\022\122\023\120\024\114\025\106\026\107\027" +
    "\115\030\104\031\117\033\121\001\002\000\004\005\u0140" +
    "\001\002\000\004\102\u0142\001\002\000\010\004\u0146\102" +
    "\u0148\103\u0147\001\002\000\062\006\067\015\062\032\054" +
    "\035\065\036\071\041\075\042\066\043\056\044\063\045" +
    "\050\046\053\047\047\050\100\051\057\052\072\053\061" +
    "\054\077\055\052\056\074\057\055\060\064\070\051\103" +
    "\070\104\076\001\002\000\042\014\116\015\111\016\113" +
    "\017\105\020\103\021\112\022\122\023\120\024\114\025" +
    "\106\026\107\027\115\030\104\031\117\033\121\034\u0144" +
    "\001\002\000\040\003\035\036\027\040\032\061\012\062" +
    "\025\063\026\064\010\065\036\071\017\073\006\074\023" +
    "\075\041\077\031\100\004\101\014\001\002\000\010\004" +
    "\uffdb\102\uffdb\103\uffdb\001\002\000\050\002\uffde\003\uffde" +
    "\004\uffde\036\uffde\040\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\071\uffde\073\uffde\074\uffde\075\uffde\077\uffde" +
    "\100\uffde\101\uffde\102\uffde\103\uffde\001\002\000\004\034" +
    "\u014c\001\002\000\062\006\067\015\062\032\054\035\065" +
    "\036\071\041\075\042\066\043\056\044\063\045\050\046" +
    "\053\047\047\050\100\051\057\052\072\053\061\054\077" +
    "\055\052\056\074\057\055\060\064\070\051\103\070\104" +
    "\076\001\002\000\042\014\116\015\111\016\113\017\105" +
    "\020\103\021\112\022\122\023\120\024\114\025\106\026" +
    "\107\027\115\030\104\031\117\033\121\034\u014a\001\002" +
    "\000\040\003\035\036\027\040\032\061\012\062\025\063" +
    "\026\064\010\065\036\071\017\073\006\074\023\075\041" +
    "\077\031\100\004\101\014\001\002\000\010\004\uffdc\102" +
    "\uffdc\103\uffdc\001\002\000\040\003\035\036\027\040\032" +
    "\061\012\062\025\063\026\064\010\065\036\071\017\073" +
    "\006\074\023\075\041\077\031\100\004\101\014\001\002" +
    "\000\004\004\u014e\001\002\000\050\002\uffdd\003\uffdd\004" +
    "\uffdd\036\uffdd\040\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd" +
    "\065\uffdd\071\uffdd\073\uffdd\074\uffdd\075\uffdd\077\uffdd\100" +
    "\uffdd\101\uffdd\102\uffdd\103\uffdd\001\002\000\062\006\067" +
    "\015\062\032\054\035\065\036\071\041\075\042\066\043" +
    "\056\044\063\045\050\046\053\047\047\050\100\051\057" +
    "\052\072\053\061\054\077\055\052\056\074\057\055\060" +
    "\064\070\051\103\070\104\076\001\002\000\042\007\u0151" +
    "\014\116\015\111\016\113\017\105\020\103\021\112\022" +
    "\122\023\120\024\114\025\106\026\107\027\115\030\104" +
    "\031\117\033\121\001\002\000\052\002\uffc1\003\uffc1\004" +
    "\uffc1\012\201\036\uffc1\040\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\071\uffc1\073\uffc1\074\uffc1\075\uffc1\077" +
    "\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\001\002\000\050" +
    "\002\uffc0\003\uffc0\004\uffc0\036\uffc0\040\uffc0\061\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\065\uffc0\071\uffc0\073\uffc0\074\uffc0" +
    "\075\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\001" +
    "\002\000\012\002\uffff\004\uffff\102\uffff\103\uffff\001\002" +
    "\000\004\036\u0155\001\002\000\004\037\u0156\001\002\000" +
    "\062\006\067\015\062\032\054\035\065\036\071\041\075" +
    "\042\066\043\056\044\063\045\050\046\053\047\047\050" +
    "\100\051\057\052\072\053\061\054\077\055\052\056\074" +
    "\057\055\060\064\070\051\103\070\104\076\001\002\000" +
    "\042\014\116\015\111\016\113\017\105\020\103\021\112" +
    "\022\122\023\120\024\114\025\106\026\107\027\115\030" +
    "\104\031\117\033\121\037\u0158\001\002\000\062\006\067" +
    "\015\062\032\054\035\065\036\071\041\075\042\066\043" +
    "\056\044\063\045\050\046\053\047\047\050\100\051\057" +
    "\052\072\053\061\054\077\055\052\056\074\057\055\060" +
    "\064\070\051\103\070\104\076\001\002\000\042\007\u015a" +
    "\014\116\015\111\016\113\017\105\020\103\021\112\022" +
    "\122\023\120\024\114\025\106\026\107\027\115\030\104" +
    "\031\117\033\121\001\002\000\052\002\uffc1\003\uffc1\004" +
    "\uffc1\012\201\036\uffc1\040\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\071\uffc1\073\uffc1\074\uffc1\075\uffc1\077" +
    "\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\001\002\000\050" +
    "\002\uffe0\003\uffe0\004\uffe0\036\uffe0\040\uffe0\061\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\071\uffe0\073\uffe0\074\uffe0" +
    "\075\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0\001" +
    "\002\000\062\006\067\015\062\032\054\035\065\036\071" +
    "\041\075\042\066\043\056\044\063\045\050\046\053\047" +
    "\047\050\100\051\057\052\072\053\061\054\077\055\052" +
    "\056\074\057\055\060\064\070\051\103\070\104\076\001" +
    "\002\000\042\007\u015e\014\116\015\111\016\113\017\105" +
    "\020\103\021\112\022\122\023\120\024\114\025\106\026" +
    "\107\027\115\030\104\031\117\033\121\001\002\000\004" +
    "\005\u015f\001\002\000\040\003\035\036\027\040\032\061" +
    "\012\062\025\063\026\064\010\065\036\071\017\073\006" +
    "\074\023\075\041\077\031\100\004\101\014\001\002\000" +
    "\042\003\035\004\uffd4\036\027\040\032\061\012\062\025" +
    "\063\026\064\010\065\036\071\017\073\006\074\023\075" +
    "\041\077\031\100\004\101\014\001\002\000\004\004\u0162" +
    "\001\002\000\050\002\uffd6\003\uffd6\004\uffd6\036\uffd6\040" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\071\uffd6" +
    "\073\uffd6\074\uffd6\075\uffd6\077\uffd6\100\uffd6\101\uffd6\102" +
    "\uffd6\103\uffd6\001\002\000\004\004\uffd5\001\002\000\050" +
    "\002\uffd9\003\uffd9\004\uffd9\036\uffd9\040\uffd9\061\uffd9\062" +
    "\uffd9\063\uffd9\064\uffd9\065\uffd9\071\uffd9\073\uffd9\074\uffd9" +
    "\075\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\103\uffd9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\046\002\043\003\012\004\010\007\014\010" +
    "\036\015\006\023\032\025\027\027\041\030\023\031\037" +
    "\032\015\033\020\035\042\037\021\040\004\042\033\043" +
    "\017\001\001\000\004\011\u0163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\003\u0152\004\010\007\014\010\036\015\006\023\032" +
    "\025\027\027\041\030\023\031\037\032\015\033\020\035" +
    "\042\037\021\040\004\042\033\043\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\323\001\001\000" +
    "\006\017\321\020\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\057\020\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\272\020\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\245\020\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\232\020\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\101\020\072\001" +
    "\001\000\002\001\001\000\006\017\144\020\072\001\001" +
    "\000\006\017\143\020\072\001\001\000\006\017\142\020" +
    "\072\001\001\000\006\017\141\020\072\001\001\000\006" +
    "\017\140\020\072\001\001\000\006\017\136\020\072\001" +
    "\001\000\006\017\135\020\072\001\001\000\006\017\134" +
    "\020\072\001\001\000\006\017\133\020\072\001\001\000" +
    "\006\017\132\020\072\001\001\000\006\017\131\020\072" +
    "\001\001\000\006\017\130\020\072\001\001\000\006\017" +
    "\127\020\072\001\001\000\006\017\126\020\072\001\001" +
    "\000\006\017\123\020\072\001\001\000\006\017\122\020" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\125\020\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\146\020\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\152\017" +
    "\151\020\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\155\017\151\020\072\001" +
    "\001\000\002\001\001\000\006\017\157\020\072\001\001" +
    "\000\002\001\001\000\006\017\162\020\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\165\020\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\206\020\072\001\001\000\012\007\171" +
    "\017\173\020\072\041\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\177\020\072\001\001\000\004\011" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\204\017\205\020\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\210\020\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\214\020\072\001\001" +
    "\000\002\001\001\000\006\017\216\020\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\224\020\072\001" +
    "\001\000\002\001\001\000\006\017\226\020\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\235\017\151\020\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\240\020\072\001\001\000\002" +
    "\001\001\000\006\017\243\020\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\247\020\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\252\020\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\256\007\014\010" +
    "\036\015\006\023\032\024\255\025\027\027\041\030\023" +
    "\031\037\032\015\033\020\035\042\037\021\040\004\042" +
    "\033\043\017\001\001\000\002\001\001\000\044\004\256" +
    "\007\014\010\036\015\006\023\032\024\257\025\027\027" +
    "\041\030\023\031\037\032\015\033\020\035\042\037\021" +
    "\040\004\042\033\043\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\262\020\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\265\020\072\001" +
    "\001\000\002\001\001\000\006\017\270\020\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\274\020\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\277\020\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\302" +
    "\020\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\307\020\072" +
    "\001\001\000\002\001\001\000\006\017\311\020\072\001" +
    "\001\000\002\001\001\000\006\017\313\020\072\001\001" +
    "\000\002\001\001\000\006\017\315\020\072\001\001\000" +
    "\002\001\001\000\004\011\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\363\020\072\001\001" +
    "\000\006\017\177\020\072\001\001\000\012\007\171\017" +
    "\173\020\072\041\327\001\001\000\002\001\001\000\004" +
    "\011\331\001\001\000\002\001\001\000\004\011\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\256\007\014\010\036\015\006\023\032\024" +
    "\337\025\027\027\041\030\023\031\037\032\015\033\020" +
    "\035\042\037\021\040\004\042\033\043\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\232\020\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\256\007\014\010\036" +
    "\015\006\023\032\024\347\025\027\027\041\030\023\031" +
    "\037\032\015\033\020\035\042\037\021\040\004\042\033" +
    "\043\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\171\017\173\020\072\041\352\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\256\007\014\010" +
    "\036\015\006\023\032\024\355\025\027\027\041\030\023" +
    "\031\037\032\015\033\020\035\042\037\021\040\004\042" +
    "\033\043\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\256\007\014\010\036\015" +
    "\006\023\032\024\361\025\027\027\041\030\023\031\037" +
    "\032\015\033\020\035\042\037\021\040\004\042\033\043" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\365\020\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\371" +
    "\020\072\001\001\000\004\011\372\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\375\020\072\001\001" +
    "\000\004\011\376\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\u0102\020\072\001\001" +
    "\000\002\001\001\000\006\017\u0104\020\072\001\001\000" +
    "\002\001\001\000\006\017\u0106\020\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u010a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\u0110\020\072\001\001\000\002\001\001\000\004\011\u0112" +
    "\001\001\000\002\001\001\000\044\004\256\007\014\010" +
    "\036\015\006\023\032\024\u0114\025\027\027\041\030\023" +
    "\031\037\032\015\033\020\035\042\037\021\040\004\042" +
    "\033\043\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\u0118\020\072\001\001\000" +
    "\002\001\001\000\004\011\u011a\001\001\000\002\001\001" +
    "\000\006\017\u011c\020\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\004\256\007\014\010\036\015\006" +
    "\023\032\024\u011f\025\027\027\041\030\023\031\037\032" +
    "\015\033\020\035\042\037\021\040\004\042\033\043\017" +
    "\001\001\000\002\001\001\000\004\026\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\u012e\007\014\010\036\015\006\022\u012f\023\032\025" +
    "\027\027\041\030\023\031\037\032\015\033\020\035\042" +
    "\037\021\040\004\042\033\043\017\001\001\000\002\001" +
    "\001\000\006\017\u0127\020\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\u012a\007\014\010\036\015" +
    "\006\021\u012b\023\032\025\027\027\041\030\023\031\037" +
    "\032\015\033\020\035\042\037\021\040\004\042\033\043" +
    "\017\001\001\000\044\004\u012a\007\014\010\036\015\006" +
    "\021\u012d\023\032\025\027\027\041\030\023\031\037\032" +
    "\015\033\020\035\042\037\021\040\004\042\033\043\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\u012e\007\014\010\036\015\006\022\u0131" +
    "\023\032\025\027\027\041\030\023\031\037\032\015\033" +
    "\020\035\042\037\021\040\004\042\033\043\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\u012a\007\014\010\036\015\006\021\u013a\023\032" +
    "\025\027\027\041\030\023\031\037\032\015\033\020\035" +
    "\042\037\021\040\004\042\033\043\017\001\001\000\002" +
    "\001\001\000\006\017\u0135\020\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\u012a\007\014\010\036" +
    "\015\006\021\u0138\023\032\025\027\027\041\030\023\031" +
    "\037\032\015\033\020\035\042\037\021\040\004\042\033" +
    "\043\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\u013d\020\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\u0140\001\001\000\002\001\001\000\006\017\u0142\020\072" +
    "\001\001\000\002\001\001\000\044\003\u0144\004\010\007" +
    "\014\010\036\015\006\023\032\025\027\027\041\030\023" +
    "\031\037\032\015\033\020\035\042\037\021\040\004\042" +
    "\033\043\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\u0148\020\072\001\001\000" +
    "\002\001\001\000\044\003\u014a\004\010\007\014\010\036" +
    "\015\006\023\032\025\027\027\041\030\023\031\037\032" +
    "\015\033\020\035\042\037\021\040\004\042\033\043\017" +
    "\001\001\000\002\001\001\000\044\003\u014c\004\010\007" +
    "\014\010\036\015\006\023\032\025\027\027\041\030\023" +
    "\031\037\032\015\033\020\035\042\037\021\040\004\042" +
    "\033\043\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\u014f\020\072\001\001\000\002\001\001\000" +
    "\004\011\u0151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\u0156\020" +
    "\072\001\001\000\002\001\001\000\006\017\u0158\020\072" +
    "\001\001\000\002\001\001\000\004\011\u015a\001\001\000" +
    "\002\001\001\000\006\017\u015c\020\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\u015f\007\014\010" +
    "\036\015\006\023\032\025\027\027\041\030\023\031\037" +
    "\032\015\033\020\034\u0160\035\042\037\021\040\004\042" +
    "\033\043\017\001\001\000\044\004\u015f\007\014\010\036" +
    "\015\006\023\032\025\027\027\041\030\023\031\037\032" +
    "\015\033\020\034\u0162\035\042\037\021\040\004\042\033" +
    "\043\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ANALIZADOR2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ANALIZADOR2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ANALIZADOR2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public NodoAbstracto Raiz;
    public ArrayList <NodoAbstracto> Expresiones = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones2 = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones3 = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones4 = new ArrayList();
    public ArrayList <NodoAbstracto> ExpresionesWhile = new ArrayList();
    public String Lado1, Lado2 = "";
    public String Manejor_Error = "";
     public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila+1);
        System.out.println("\t\tColumna: "+columna);

       //  TError ERRORES = new TError(lexema,fila,columna,"Sintactico", "Sentencia incorrecta" );
       //  TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
       
        
        
    }

//Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       // TERROR ERRORES = new TERROR(lexema,"Error Sintactico","Caracter no esperado",fila,columna);
       // TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
     
    }
    
    public void AgregarElmentoALista(NodoAbstracto Nodo, NodoAbstracto Elemento){
        Nodo.Expresiones.add(Elemento);
    }
    public void semantic(String msg, Object obj) {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ANALIZADOR2$actions {



  private final ANALIZADOR2 parser;

  /** Constructor */
  CUP$ANALIZADOR2$actions(ANALIZADOR2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ANALIZADOR2$do_action_part00000000(
    int                        CUP$ANALIZADOR2$act_num,
    java_cup.runtime.lr_parser CUP$ANALIZADOR2$parser,
    java.util.Stack            CUP$ANALIZADOR2$stack,
    int                        CUP$ANALIZADOR2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ANALIZADOR2$result;

      /* select the action based on the action number */
      switch (CUP$ANALIZADOR2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto start_val = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		RESULT = start_val;
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ANALIZADOR2$parser.done_parsing();
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("INICIO");
                        nuevo.Hijos.add(nod);
                        parser.Raiz = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        
                        NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        nuevo.Hijos.add(nod);
                        nuevo.Hijos.add(nodsentencias);
                       
                        RESULT = nuevo;
                        
                        //nodsentencias.Hijos.add(nod);
                        //RESULT = nodsentencias;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARARASIGNAR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        
                        
                        RESULT=nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IMPRIM 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        
                        RESULT=nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= MODVECTOR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                      
                      RESULT=nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= ELIF 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= ELIFELSE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= ELWHILE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= ELDOWHILE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= ELFOR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= ELBREAK 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= ELCONTINUE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= ELSWITCH 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= GRAFICAS 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= DECFUNCIONES 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= LLAMARFUNCIONES 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= RETORNOS 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= error puntoycoma 
            {
              NodoAbstracto RESULT =null;
		
                         NodoAbstracto nuevo = new ERRORES("Error");
                         NodoAbstracto nuevoid = new Nodo("#Error En alguna mulada XD");
                         nuevo.Cadena   = "#Error Semantico Encontrado ver reporte";
                         RESULT= nuevo; 
                     
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RETORNOS ::= returno EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto expresion = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
            NodoAbstracto nuevo = new Retorno("RETORNO");
            nuevo.Hijos.add(expresion);
            RESULT = nuevo;
            
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("RETORNOS",33, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LLAMARFUNCIONES ::= id parentesisabrir parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).value;
		
                        NodoAbstracto nod= new MostrarFuncion1("Llamado1");
                        NodoAbstracto nuevoid = new Nodo(nombre);
                        nod.Hijos.add(nuevoid);
                        nod.columna = nombreleft;
                        nod.linea = nombreright;
                        RESULT = nod;
                    
                  
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LLAMARFUNCIONES",32, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LLAMARFUNCIONES ::= id parentesisabrir LISTAPARAMETROS parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto parametros = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		
                        NodoAbstracto nod= new MostrarFuncion2("Llamado1");
                        NodoAbstracto nuevoid = new Nodo(nombre);
                        nod.Hijos.add(nuevoid);
                        nod.Hijos.add(parametros);
                        nod.columna = nombreleft;
                        nod.linea = nombreright;
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LLAMARFUNCIONES",32, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTAPARAMETROS ::= LISTAPARAMETROS coma EXP 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("LISTAPARAMETROS");
                        nuevo.Hijos.add(nod);
                        nuevo.Hijos.add(nodsentencias);
                        
                        RESULT = nuevo;
                        //nodsentencias.Hijos.add(nod);
                        //RESULT = nodsentencias;
                
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",31, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTAPARAMETROS ::= LISTAPARAMETROS coma DECLARARASIGNAR 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("LISTAPARAMETROS");
                        nuevo.Hijos.add(nod);
                        nuevo.Hijos.add(nodsentencias);
                        
                        RESULT = nuevo;
                     //nodsentencias.Hijos.add(nod);
                     //RESULT = nodsentencias;

                
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",31, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTAPARAMETROS ::= EXP 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("EXP");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",31, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTAPARAMETROS ::= DECLARARASIGNAR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("EXP");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",31, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECFUNCIONES ::= id igual function parentesisabrir parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-7)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-7)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-7)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                 NodoAbstracto nuevo = new Funciones1("FUNCION SIN PARAMETROS");
                 NodoAbstracto FuncionNombre = new Nodo(nombre);
                 nuevo.Hijos.add(FuncionNombre);
                 nuevo.Hijos.add(sentencias);
                 nuevo.columna = nombreleft;
                 nuevo.linea = nombreright;
                 RESULT = nuevo; 

                
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("DECFUNCIONES",30, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-7)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECFUNCIONES ::= id igual parentesisabrir parentesiscerrar igual MayorQue llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                 NodoAbstracto nuevo = new Funciones1("FUNCION SIN PARAMETROS");
                 NodoAbstracto FuncionNombre = new Nodo(nombre);
                 nuevo.Hijos.add(FuncionNombre);
                 nuevo.Hijos.add(sentencias);
                 nuevo.columna = nombreleft;
                 nuevo.linea = nombreright;
                 RESULT = nuevo; 

                
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("DECFUNCIONES",30, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECFUNCIONES ::= id igual function parentesisabrir LISTAPARAMETROS parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto parametros = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                    NodoAbstracto nuevo = new Funciones2("FUNCION con PARAMETROS");
                    NodoAbstracto FuncionNombre = new Nodo(nombre);
                    nuevo.Hijos.add(FuncionNombre);
                    nuevo.Hijos.add(parametros);
                    nuevo.Hijos.add(sentencias);
                    nuevo.columna = nombreleft;
                    nuevo.linea = nombreright;
                    RESULT = nuevo;
                
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("DECFUNCIONES",30, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECFUNCIONES ::= id parentesisabrir LISTAPARAMETROS parentesiscerrar igual MayorQue llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).right;
		NodoAbstracto parametros = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                    NodoAbstracto nuevo = new Funciones2("FUNCION con PARAMETROS");
                   NodoAbstracto FuncionNombre = new Nodo(nombre);
                   nuevo.Hijos.add(FuncionNombre);
                    nuevo.Hijos.add(parametros);
                    nuevo.Hijos.add(sentencias);
                    nuevo.columna = nombreleft;
                   nuevo.linea = nombreright;
                   RESULT = nuevo;
               
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("DECFUNCIONES",30, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // GRAFICAS ::= pie parentesisabrir id coma id coma EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).right;
		String valores = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		String vector = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto titulo = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		
                NodoAbstracto nuevo = new pie("PIE");
                NodoAbstracto Datos = new Nodo(valores);
                NodoAbstracto Vector = new Nodo(vector);
                //NodoAbstracto Titulo = new Nodo(titulo);
                nuevo.Hijos.add(Datos);
                nuevo.Hijos.add(Vector);
                nuevo.Hijos.add(titulo);
                nuevo.columna = valoresleft;
                nuevo.linea = valoresright;
                RESULT = nuevo;            

        
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("GRAFICAS",29, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // GRAFICAS ::= barplot parentesisabrir id coma EXP coma EXP coma EXP coma id parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-10)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-10)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-10)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).right;
		NodoAbstracto vector = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).right;
		NodoAbstracto titulo = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).value;
		int cuatroleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int cuatroright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto cuatro = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int cincoleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int cincoright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		String cinco = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		
         NodoAbstracto nuevo = new barras("BARRAS");
                NodoAbstracto Datos = new Nodo(nombre);
                //NodoAbstracto Vector = new Nodo(vector);
                //NodoAbstracto Titulo = new Nodo(titulo);
                //NodoAbstracto Cuatro = new Nodo(cuatro);
                NodoAbstracto Cinco = new Nodo(cinco);
                nuevo.Hijos.add(Datos);
                nuevo.Hijos.add(vector);
                nuevo.Hijos.add(titulo);
                nuevo.Hijos.add(cuatro);
                nuevo.Hijos.add(Cinco);
                nuevo.columna = nombreleft;
                nuevo.linea = nombreright;
                RESULT = nuevo;    
    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("GRAFICAS",29, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-12)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // GRAFICAS ::= hist parentesisabrir id coma EXP coma EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto vector = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto titulo = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		
                NodoAbstracto nuevo = new histograma("HISTOGRAMA");
                NodoAbstracto Datos = new Nodo(nombre);
                //NodoAbstracto Vector = new Nodo(vector);
                //NodoAbstracto Titulo = new Nodo(titulo);
                nuevo.Hijos.add(Datos);
                nuevo.Hijos.add(vector);
                nuevo.Hijos.add(titulo);
                nuevo.columna = nombreleft;
                nuevo.linea = nombreright;
                RESULT = nuevo;   
            
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("GRAFICAS",29, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // GRAFICAS ::= plot parentesisabrir id coma EXP coma EXP coma EXP coma EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-10)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-10)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-10)).value;
		int par1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).left;
		int par1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).right;
		NodoAbstracto par1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).value;
		int par2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).left;
		int par2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).right;
		NodoAbstracto par2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).value;
		int par3left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int par3right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto par3 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int par4left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int par4right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto par4 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		
        NodoAbstracto nuevo = new plot("PLOT");
                NodoAbstracto Datos = new Nodo(nombre);
               // NodoAbstracto Vector = new Nodo(par1);
               // NodoAbstracto Titulo = new Nodo(par2) ;
               // NodoAbstracto Vector2 = new Nodo(par3);
               // NodoAbstracto Titulo2 = new Nodo(par4);
                nuevo.Hijos.add(Datos);
                nuevo.Hijos.add(par1);
                nuevo.Hijos.add(par2);
                nuevo.Hijos.add(par3);
                nuevo.Hijos.add(par4);
                nuevo.columna = nombreleft;
                nuevo.linea = nombreright;
                RESULT = nuevo;   

              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("GRAFICAS",29, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-12)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELSWITCH ::= SWITCH parentesisabrir EXP parentesiscerrar llaveabrir EXPRESIONESSWITCH llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                NodoAbstracto nuevo = new Switch("SWITCH");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                RESULT = nuevo;
            
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("ELSWITCH",27, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSWITCH ::= SWITCH parentesisabrir EXP parentesiscerrar llaveabrir EXPRESIONESSWITCH DEF DOSP SENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-7)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-7)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int sentdefleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int sentdefright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto sentdef = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                NodoAbstracto nuevo = new Switch("SWITCH");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                nuevo.Hijos.add(sentdef);
                RESULT = nuevo;
            
            
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("ELSWITCH",27, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-9)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESIONESSWITCH ::= EXPRESIONESSWITCH CASE EXP DOSP SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("CASE");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(sentencias);
                        nodsentencias.Hijos.add(nuevo);
                        RESULT = nodsentencias;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXPRESIONESSWITCH",28, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESIONESSWITCH ::= CASE EXP DOSP SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("CASE");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(sentencias);
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXPRESIONESSWITCH",28, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELBREAK ::= BREAK FINAL 
            {
              NodoAbstracto RESULT =null;
		
             NodoAbstracto nuevo = new Break("Break");
             RESULT= nuevo; 
          
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("ELBREAK",24, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELCONTINUE ::= CONTINUE FINAL 
            {
              NodoAbstracto RESULT =null;
		
            NodoAbstracto nuevo = new Continue("Break");
             RESULT= nuevo; 
        
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("ELCONTINUE",25, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELFOR ::= FOR parentesisabrir EXP IN EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
            NodoAbstracto nuevo = new NodoLimpio("FOR");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(exp2);
            nuevo.Hijos.add(sentencias);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;
    
         
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("ELFOR",23, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELDOWHILE ::= DO llaveabrir LISTASENTENCIAS llavecerrar WHILE parentesisabrir EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		
           NodoAbstracto nuevo = new NodoLimpio("DO-WHILE");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            //nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;


              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("ELDOWHILE",22, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELWHILE ::= WHILE parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIASwhile llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
            NodoAbstracto nuevo = new NodoLimpio("WHILE");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            //nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
           
            RESULT = nuevo;
    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("ELWHILE",21, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTASENTENCIASwhile ::= SENTENCIA LISTASENTENCIASwhile 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        nuevo.Hijos.add(nodsentencias);
                        
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIASwhile",26, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTASENTENCIASwhile ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        ExpresionesWhile.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIASwhile",26, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
            NodoAbstracto nuevo = new NodoLimpio("IF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            //nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            
            RESULT = nuevo;
        
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("ELIF",17, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar ELSE llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
            NodoAbstracto nuevo = new NodoLimpio("IF-ELSE");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
           
            RESULT = nuevo;
        
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("ELIF",17, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-10)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar LISTAELSES 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
            NodoAbstracto nuevo = new NodoLimpio("IFelseIF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            RESULT = nuevo;
        
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("ELIF",17, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-7)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar LISTAELSES ELSE llaveabrir LISTASENTENCIAS3 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-9)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-9)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int sentaleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int sentaright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto senta = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
            NodoAbstracto nuevo = new NodoLimpio("IFelseIF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.Hijos.add(senta);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;            
            RESULT = nuevo;
        
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("ELIF",17, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-11)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LISTAELSES ::= LISTAELSES ELSE IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int noditoleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).left;
		int noditoright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).right;
		NodoAbstracto nodito = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                NodoAbstracto nuevo = new NodoLimpio("ELSE");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                nodito.Hijos.add(nuevo);
                RESULT = nodito;
              
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTAELSES",20, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTAELSES ::= ELSE IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                NodoAbstracto nuevo = new NodoLimpio("ELSE");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                RESULT = nuevo;
              
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTAELSES",20, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-7)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTASENTENCIAS ::= SENTENCIA LISTASENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        
                        nuevo.Hijos.add(nod);
                        nuevo.Hijos.add(nodsentencias);
                        
                        RESULT = nuevo;

                        //nodsentencias.Hijos.add(nod);
                        //RESULT = nodsentencias;
                        Expresiones.add(nod);
                       // Expresiones2.add(nod);
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTASENTENCIAS ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTASENTENCIAS3 ::= SENTENCIA LISTASENTENCIAS3 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                      NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        nuevo.Hijos.add(nod);
                        nuevo.Hijos.add(nodsentencias);
                        
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS3",16, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTASENTENCIAS3 ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        Expresiones4.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS3",16, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTASENTENCIAS2 ::= SENTENCIA LISTASENTENCIAS2 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("LISTASENTENCIAS");
                        nuevo.Hijos.add(nod);
                        nuevo.Hijos.add(nodsentencias);
                        
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS2",15, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTASENTENCIAS2 ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        //Expresiones.add(nod);
                        Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS2",15, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MODVECTOR ::= id corcheteabrir EXP corchetecerrar igual EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("MODVECTOR",11, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MODVECTOR ::= id corcheteabrir corcheteabrir EXP corchetecerrar corchetecerrar igual EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                nuevo.id = 765;
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("MODVECTOR",11, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTAEXPRESIONES ::= EXP coma LISTAEXPRESIONES 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("EXP");
                        nuevo.Hijos.add(nod);
                        nuevo.Hijos.add(nodsentencias);
                        
                        Expresiones.add(nod);
                        Expresiones2.add(nod);
                        Expresiones3.add(nod);
                        //nodsentencias.Hijos.add(nod);
                        //RESULT = nodsentencias;
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTAEXPRESIONES ::= EXP 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        //NodoAbstracto nuevo = new Nodo("EXP");
                        //nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                        Expresiones2.add(nod);
                        Expresiones3.add(nod);
                        //RESULT = nuevo;
                        NodoAbstracto nuevo = new Nodo("EXP");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARARASIGNAR ::= id igual EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new DeclararAsignar("DECLARARASIGNAR");
                        NodoAbstracto nuevoid = new Nodo(valor);
                        nuevo.Hijos.add(nuevoid);
                        nuevo.Hijos.add(exp1);
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                        // for(int i = 0; i< Expresiones.size();i++){
                        //   nuevo.Expresiones.add(Expresiones.get(i));
                       // }
                       // Expresiones.clear();
                       // for(int i = 0; i< Expresiones3.size();i++){
                       //    nuevo.Expresiones2.add(Expresiones3.get(i));
                       // }
                       // Expresiones3.clear();
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("DECLARARASIGNAR",5, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FINAL ::= puntoycoma 
            {
              NodoAbstracto RESULT =null;

              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("FINAL",7, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FINAL ::= 
            {
              NodoAbstracto RESULT =null;

              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("FINAL",7, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IMPRIM ::= imprimir parentesisabrir EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		
                        NodoAbstracto nuevo = new Imprimir("IMPRIMIR");
                        nuevo.Hijos.add(exp1);
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("IMPRIM",6, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= id parentesisabrir LISTAPARAMETROS parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto parametros = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nod= new MostrarFuncion2("Llamado1");
                        NodoAbstracto nuevoid = new Nodo(nombre);
                        nod.Hijos.add(nuevoid);
                        nod.Hijos.add(parametros);
                        nod.columna = nombreleft;
                        nod.linea = nombreright;
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= id parentesisabrir parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		
                        NodoAbstracto nod= new MostrarFuncion1("Llamado1");
                        NodoAbstracto nuevoid = new Nodo(nombre);
                        nod.Hijos.add(nuevoid);
                        nod.columna = nombreleft;
                        nod.linea = nombreright;
                        RESULT = nod;

                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= LISTA parentesisabrir LISTAEXPRESIONES parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int valo4left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).left;
		int valo4right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).right;
		String valo4 = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).value;
		int listaValoresleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int listaValoresright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto listaValores = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Lista");
                        NodoAbstracto nuevo2 = new Nodo("list(");
                        nuevo.Hijos.add(nuevo2);
                        nuevo.Hijos.add(listaValores);
                        nuevo.TipoDato = "Lista";
                        
                        RESULT = nuevo;

                
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= FuncionC parentesisabrir LISTAEXPRESIONES parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int valo4left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).left;
		int valo4right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).right;
		Object valo4 = (Object)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).value;
		int listaValoresleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int listaValoresright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto listaValores = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("FuncionC");
                        NodoAbstracto nuevo2 = new Nodo("c(");
                        nuevo.Hijos.add(nuevo2);
                        nuevo.Hijos.add(listaValores);
                        nuevo.TipoDato = "FuncionC";
                        //for(int i = 0; i< Expresiones2.size();i++){
                        //   nuevo.Expresiones2.add(Expresiones2.get(i));
                       // }
                       // Expresiones2.clear();
                        RESULT = nuevo;

                
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP PREGUNTAC EXP DOSP EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp3 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Ternario("EXP");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(exp2);  
                        nuevo.Hijos.add(exp3);
                         Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= NOT EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new NOT("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;

                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= menos EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Negativo("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP mas EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("+");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP menos EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                    
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP por EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("*");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP div EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("/");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                      
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP modulo EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("%%");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2); 
                        Manejor_Error = "Error en expresion";                   
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP potencia EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("^");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);   
                        Manejor_Error = "Error en expresion";                 
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP igualdad EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("==");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP Noigualdad EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP MayorQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP MenorQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= EXP MayorIgualQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= EXP MenorIgualQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= EXP AND EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("&&");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";                      
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= EXP OR EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("||");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        Manejor_Error = "Error en expresion";
                        RESULT = exp1;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= NUMERO 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        Manejor_Error = "Error en expresion";
                        RESULT = nod;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= id 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("id");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "id";
                        nuevo.Nombre = valor;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                   
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= nulo 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo("");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= id corcheteabrir EXP corchetecerrar 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto pos = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Vector");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(pos);
                        nuevo.TipoDato = "vector";
                        Manejor_Error = "Error en expresion";
                        //RESULT = nuevo;
                        //nuevo.id = Integer.parseInt(pos);
                        nuevo.columna = valorleft;
                        nuevo.linea = valorright;
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= id corcheteabrir EXP corchetecerrar corcheteabrir EXP corchetecerrar 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).right;
		NodoAbstracto pos = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-4)).value;
		int pos2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int pos2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto pos2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("VectorSlushi");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(pos);
                        nuevo.Hijos.add(pos2);
                        nuevo.TipoDato = "vector";
                       
                       
                        nuevo.columna = valorleft;
                        nuevo.linea = valorright;
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= id corcheteabrir EXP corchetecerrar corcheteabrir corcheteabrir EXP corchetecerrar corchetecerrar 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).right;
		NodoAbstracto pos = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-6)).value;
		int pos2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int pos2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto pos2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		
                        NodoAbstracto nuevo = new Nodo("VectorSlushi");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(pos);
                        nuevo.Hijos.add(pos2);
                        nuevo.TipoDato = "vector";
                       
                       
                        nuevo.columna = valorleft;
                        nuevo.linea = valorright;
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= id corcheteabrir corcheteabrir EXP corchetecerrar corchetecerrar corcheteabrir EXP corchetecerrar 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).right;
		NodoAbstracto pos = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).value;
		int pos2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int pos2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto pos2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("VectorSlushi");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(pos);
                        nuevo.Hijos.add(pos2);
                        nuevo.TipoDato = "vector";
                       
                       
                        nuevo.columna = valorleft;
                        nuevo.linea = valorright;
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-8)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= id corcheteabrir corcheteabrir EXP corchetecerrar corchetecerrar 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto pos = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		
                        NodoAbstracto nuevo = new Nodo("VectorIronMan");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(pos);
                        nuevo.TipoDato = "vector";
                        Manejor_Error = "Error en expresion";
                        //RESULT = nuevo;
                        //nuevo.id = Integer.parseInt(pos);
                        nuevo.columna = valorleft;
                        nuevo.linea = valorright;
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= id corcheteabrir corcheteabrir EXP corchetecerrar corchetecerrar corcheteabrir corcheteabrir EXP corchetecerrar corchetecerrar 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-10)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-10)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-10)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-7)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-7)).right;
		NodoAbstracto pos = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-7)).value;
		int pos2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).left;
		int pos2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).right;
		NodoAbstracto pos2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-2)).value;
		
                        NodoAbstracto nuevo = new Nodo("VectorSlushi2");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(pos);
                        nuevo.Hijos.add(pos2);
                        nuevo.TipoDato = "vector";
                       
                       
                        nuevo.columna = valorleft;
                        nuevo.linea = valorright;
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-10)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= cadena 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        //valor =  valor.replaceAll("\\\"", "\\@");
                        valor = valor.substring(1, valor.length()-1);
                        //valor =  valor.replaceAll("\"", "");
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= ttrue 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= tfalse 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= typeof parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("TypeOF");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;

                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= length parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Length");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= stringlength parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("StringLength");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= DEF 
            {
              NodoAbstracto RESULT =null;
		
                        NodoAbstracto nuevo = new Nodo("DEFAULT");
                       // nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;

              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= remove parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Remove");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;
                        
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= tolowercase parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("ToLowerCase");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;
                        
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= touppercase parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("ToUpperCase");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;
                        
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= trunk parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Trunk");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= round parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Round");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= mean parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mean");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(null);
                        nuevo.TipoDato = "decimal";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= mean parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).value;
		int limiteleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int limiteright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto limite = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mean");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(limite);
                        nuevo.TipoDato = "decimal";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP ::= median parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Median");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "median";
                        nuevo.Hijos.add(null);
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= median parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto exp3 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Median");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "median";
                        nuevo.Hijos.add(exp3);
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= mode parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mode");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(null);
                        nuevo.TipoDato = "mode";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= mode parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mode");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "mode";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.elementAt(CUP$ANALIZADOR2$top-5)), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NUMERO ::= entero 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Entero");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("NUMERO",14, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NUMERO ::= decimal 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ANALIZADOR2$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Decimal");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "decimal";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$ANALIZADOR2$result = parser.getSymbolFactory().newSymbol("NUMERO",14, ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), ((java_cup.runtime.Symbol)CUP$ANALIZADOR2$stack.peek()), RESULT);
            }
          return CUP$ANALIZADOR2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ANALIZADOR2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ANALIZADOR2$do_action(
    int                        CUP$ANALIZADOR2$act_num,
    java_cup.runtime.lr_parser CUP$ANALIZADOR2$parser,
    java.util.Stack            CUP$ANALIZADOR2$stack,
    int                        CUP$ANALIZADOR2$top)
    throws java.lang.Exception
    {
              return CUP$ANALIZADOR2$do_action_part00000000(
                               CUP$ANALIZADOR2$act_num,
                               CUP$ANALIZADOR2$parser,
                               CUP$ANALIZADOR2$stack,
                               CUP$ANALIZADOR2$top);
    }
}

}
