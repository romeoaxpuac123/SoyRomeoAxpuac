/* The following code was generated by JFlex 1.6.1 */


package Analizadores;
import java_cup.runtime.*;
import static Analizadores.IDE.TABLA_DE_ERRORES_SINTACTICOS;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Analizador_Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENT_SIMPLE = 2;
  public static final int COMENT_MULTI = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 59,  4, 10, 11,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    59, 49,  3,  8,  0, 44, 47,  0, 39, 55, 12, 40, 58, 41,  2, 42, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 51, 52, 46, 38, 45, 50, 
     0, 29, 28, 16, 31, 22, 13, 36, 25, 19,  7, 33, 24, 30, 15, 20, 
    23,  7, 21, 27, 17, 14, 35, 34,  7, 37,  7, 56,  5, 57, 43,  6, 
     0, 29, 28, 16, 31, 22, 13, 36, 25, 19,  7, 33, 24, 30, 15, 20, 
    23,  7, 21, 27, 17, 14, 35, 34,  7, 37,  7, 53, 48, 54,  0,  0, 
     0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\1\1\3\1\4\1\1\1\5"+
    "\2\4\1\6\1\4\1\1\6\4\1\1\5\4\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\1\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\2\0\1\33\2\0\2\34"+
    "\1\0\11\4\1\35\1\36\1\35\1\36\3\4\1\0"+
    "\3\4\1\0\2\4\1\0\1\4\2\0\6\4\1\37"+
    "\2\4\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\33\2\34\2\0\1\4\1\47\3\4\1\0\10\4"+
    "\1\0\1\4\2\50\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\2\0\10\4\1\0\1\4\2\0\1\34\1\51"+
    "\1\34\2\0\1\4\1\0\1\4\1\52\1\4\2\53"+
    "\3\4\1\54\4\4\2\55\1\0\1\4\1\56\2\57"+
    "\1\4\2\60\2\0\4\4\1\61\1\62\1\0\2\4"+
    "\1\0\1\4\1\51\3\0\1\51\1\4\2\63\1\0"+
    "\3\4\2\64\1\4\1\65\2\4\2\66\1\4\2\0"+
    "\2\4\2\67\1\4\1\0\2\4\2\70\1\51\1\0"+
    "\1\4\1\0\3\4\1\71\1\72\1\73\1\74\1\0"+
    "\1\75\1\4\1\75\1\4\2\76\1\4\1\0\1\4"+
    "\1\0\3\4\1\0\1\4\1\77\1\100\2\101\2\102"+
    "\2\4\1\0\3\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\2\103\2\104\1\0\1\4\2\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\170\0\u0168"+
    "\0\u01a4\0\170\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\170\0\170\0\170\0\170"+
    "\0\170\0\u0618\0\u0654\0\u0690\0\170\0\170\0\u06cc\0\170"+
    "\0\170\0\170\0\170\0\170\0\170\0\170\0\170\0\170"+
    "\0\u0708\0\u012c\0\170\0\u0744\0\u0780\0\170\0\u07bc\0\u07f8"+
    "\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\170\0\170\0\u0168\0\u0168\0\u0a50\0\u0a8c\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88"+
    "\0\u0ec4\0\u0168\0\u0f00\0\u0f3c\0\170\0\170\0\170\0\170"+
    "\0\170\0\170\0\u0708\0\u012c\0\u0f78\0\u0fb4\0\u0f78\0\u0ff0"+
    "\0\u102c\0\u0168\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\170\0\u0168\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc"+
    "\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc"+
    "\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c"+
    "\0\u18d8\0\u0780\0\u1914\0\u18d8\0\u1950\0\u198c\0\u19c8\0\u1a04"+
    "\0\u0168\0\u1a40\0\170\0\u0168\0\u1a7c\0\u1ab8\0\u1af4\0\u0168"+
    "\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\170\0\u0168\0\u1c20\0\u1c5c"+
    "\0\u0168\0\170\0\u0168\0\u1c98\0\170\0\u0168\0\u1cd4\0\u1d10"+
    "\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u0168\0\u0168\0\u1e3c\0\u1e78"+
    "\0\u1eb4\0\u1ef0\0\u1f2c\0\170\0\u1f68\0\u1fa4\0\u1fe0\0\u1fa4"+
    "\0\u201c\0\170\0\u0168\0\u2058\0\u2094\0\u20d0\0\u210c\0\170"+
    "\0\u0168\0\u2148\0\u0168\0\u2184\0\u21c0\0\170\0\u0168\0\u21fc"+
    "\0\u2238\0\u2274\0\u22b0\0\u22ec\0\170\0\u0168\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\170\0\u0168\0\u1fe0\0\u2418\0\u2454\0\u2490"+
    "\0\u24cc\0\u2508\0\u2544\0\u0168\0\u0168\0\u0168\0\u0168\0\u2580"+
    "\0\170\0\u25bc\0\u0168\0\u25f8\0\170\0\u0168\0\u2634\0\u2670"+
    "\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u0168"+
    "\0\u0168\0\170\0\u0168\0\170\0\u0168\0\u2850\0\u288c\0\u28c8"+
    "\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8"+
    "\0\u2ae4\0\u2b20\0\u2b5c\0\170\0\u0168\0\170\0\u0168\0\u2b98"+
    "\0\u2bd4\0\170\0\u0168";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\2\3\1\10\1\11"+
    "\1\7\1\0\1\7\1\12\1\13\1\10\1\14\1\15"+
    "\1\16\1\17\1\20\1\10\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\10\1\31\1\32\1\3"+
    "\1\10\1\33\3\10\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\7\4\3\1\7\3\3\1\11\1\7\1\0\1\7"+
    "\57\3\1\7\75\0\1\4\1\61\73\0\1\10\3\0"+
    "\2\10\5\0\5\10\1\0\7\10\1\0\5\10\1\0"+
    "\5\10\26\0\3\62\1\63\1\0\1\64\66\62\1\0"+
    "\2\10\3\0\2\10\5\0\5\10\1\0\7\10\1\0"+
    "\5\10\1\0\5\10\26\0\4\65\1\66\4\65\1\67"+
    "\2\0\1\70\57\65\1\0\2\10\3\0\2\10\5\0"+
    "\1\10\1\71\3\10\1\0\1\10\1\72\5\10\1\0"+
    "\2\10\1\73\2\10\1\0\5\10\27\0\2\10\3\0"+
    "\2\10\5\0\1\10\1\74\3\10\1\0\7\10\1\0"+
    "\5\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\5\10\1\0\1\10\1\75\5\10\1\0\2\10\1\76"+
    "\2\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\5\10\1\0\1\10\1\77\1\100\4\10\1\0\5\10"+
    "\1\0\4\10\1\101\43\0\1\102\1\0\1\103\55\0"+
    "\2\10\3\0\2\10\5\0\1\104\1\10\1\105\2\10"+
    "\1\0\7\10\1\0\5\10\1\0\5\10\27\0\2\10"+
    "\3\0\2\10\5\0\5\10\1\0\1\10\1\106\1\10"+
    "\1\107\3\10\1\0\5\10\1\0\5\10\27\0\2\10"+
    "\3\0\2\10\5\0\5\10\1\0\5\10\1\110\1\10"+
    "\1\0\5\10\1\0\5\10\27\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\111\1\112\1\10\1\113\2\10\1\114"+
    "\1\10\1\0\5\10\1\0\5\10\27\0\2\10\3\0"+
    "\2\10\5\0\5\10\1\115\1\116\2\10\1\117\3\10"+
    "\1\0\5\10\1\0\5\10\27\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\120\1\121\6\10\1\0\5\10\1\0"+
    "\5\10\47\0\1\122\20\0\1\123\32\0\2\10\3\0"+
    "\2\10\5\0\4\10\1\124\1\0\7\10\1\0\5\10"+
    "\1\0\1\10\1\125\3\10\27\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\2\10\1\126\4\10\1\0\2\10"+
    "\1\127\2\10\1\0\5\10\27\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\1\10\1\130\1\10\1\131\3\10"+
    "\1\0\5\10\1\0\5\10\27\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\1\10\1\132\1\10\1\133\3\10"+
    "\1\0\5\10\1\0\5\10\27\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\6\10\1\134\1\0\5\10\1\0"+
    "\5\10\74\0\1\135\1\136\100\0\1\137\65\0\1\140"+
    "\73\0\1\141\73\0\1\142\26\0\1\143\72\0\3\62"+
    "\1\144\1\0\1\64\66\62\4\65\1\66\4\65\1\67"+
    "\2\0\60\65\4\0\1\66\67\0\4\70\1\145\4\70"+
    "\1\146\2\147\1\150\57\70\1\0\2\10\3\0\2\10"+
    "\5\0\2\10\1\151\2\10\1\0\7\10\1\0\5\10"+
    "\1\0\5\10\27\0\2\10\3\0\2\10\5\0\5\10"+
    "\1\0\2\10\1\152\4\10\1\0\5\10\1\0\5\10"+
    "\27\0\2\10\3\0\2\10\5\0\5\10\1\0\5\10"+
    "\1\153\1\10\1\0\5\10\1\0\5\10\27\0\2\10"+
    "\3\0\2\10\5\0\5\10\1\0\5\10\1\154\1\10"+
    "\1\0\5\10\1\0\5\10\27\0\2\10\3\0\2\10"+
    "\5\0\2\10\1\155\2\10\1\0\7\10\1\0\5\10"+
    "\1\0\5\10\27\0\2\10\3\0\2\10\5\0\5\10"+
    "\1\0\7\10\1\156\1\157\4\10\1\0\5\10\27\0"+
    "\2\10\3\0\2\10\5\0\1\10\1\160\3\10\1\0"+
    "\5\10\1\161\1\10\1\0\5\10\1\0\5\10\27\0"+
    "\2\10\3\0\2\10\5\0\1\10\1\162\3\10\1\0"+
    "\7\10\1\0\5\10\1\0\5\10\27\0\2\10\3\0"+
    "\2\10\5\0\5\10\1\0\4\10\1\163\2\10\1\0"+
    "\5\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\1\10\1\164\3\10\1\0\7\10\1\0\5\10\1\0"+
    "\5\10\27\0\2\10\3\0\2\10\5\0\4\10\1\165"+
    "\1\0\7\10\1\0\3\10\1\166\1\10\1\0\5\10"+
    "\27\0\2\10\3\0\2\10\5\0\5\10\1\0\7\10"+
    "\1\167\1\170\4\10\1\0\5\10\54\0\1\171\46\0"+
    "\2\10\3\0\2\10\5\0\5\10\1\0\3\10\1\172"+
    "\3\10\1\0\5\10\1\0\5\10\27\0\2\10\3\0"+
    "\2\10\5\0\5\10\1\173\1\174\6\10\1\0\5\10"+
    "\1\0\5\10\27\0\2\10\3\0\2\10\5\0\5\10"+
    "\1\0\1\10\1\175\5\10\1\0\5\10\1\0\5\10"+
    "\60\0\2\176\41\0\2\10\3\0\2\10\5\0\5\10"+
    "\1\0\7\10\1\176\1\177\4\10\1\0\5\10\27\0"+
    "\2\10\3\0\2\10\5\0\2\10\1\200\2\10\1\0"+
    "\7\10\1\0\5\10\1\0\5\10\60\0\2\201\41\0"+
    "\2\10\3\0\2\10\5\0\5\10\1\0\7\10\1\201"+
    "\1\202\4\10\1\0\5\10\53\0\1\203\70\0\2\204"+
    "\51\0\2\10\3\0\2\10\5\0\5\10\1\0\2\10"+
    "\1\205\4\10\1\0\5\10\1\0\5\10\27\0\2\10"+
    "\3\0\2\10\5\0\5\10\1\204\1\206\6\10\1\0"+
    "\5\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\5\10\1\0\3\10\1\207\3\10\1\0\5\10\1\0"+
    "\5\10\27\0\2\10\3\0\2\10\5\0\5\10\1\0"+
    "\2\10\1\210\4\10\1\0\5\10\1\0\5\10\27\0"+
    "\2\10\3\0\2\10\5\0\5\10\1\0\7\10\1\0"+
    "\4\10\1\211\1\0\5\10\27\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\7\10\1\0\2\10\1\212\1\10"+
    "\1\213\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\1\214\4\10\1\0\7\10\1\0\5\10\1\0\5\10"+
    "\27\0\2\10\3\0\2\10\5\0\5\10\1\215\1\216"+
    "\6\10\1\0\5\10\1\0\5\10\26\0\14\147\1\217"+
    "\63\147\1\145\7\147\1\217\57\147\4\220\1\221\3\220"+
    "\1\222\1\223\2\224\1\225\57\220\1\0\2\10\3\0"+
    "\2\10\5\0\3\10\1\226\1\10\1\0\7\10\1\0"+
    "\5\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\5\10\1\0\7\10\1\227\1\230\4\10\1\0\5\10"+
    "\27\0\2\10\3\0\2\10\5\0\5\10\1\0\5\10"+
    "\1\231\1\10\1\0\5\10\1\0\5\10\27\0\2\10"+
    "\3\0\2\10\5\0\4\10\1\232\1\0\7\10\1\0"+
    "\5\10\1\0\5\10\54\0\1\233\46\0\2\10\3\0"+
    "\2\10\5\0\5\10\1\0\3\10\1\234\3\10\1\0"+
    "\5\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\5\10\1\0\4\10\1\235\2\10\1\0\5\10\1\0"+
    "\5\10\27\0\2\10\3\0\2\10\5\0\5\10\1\0"+
    "\1\10\1\236\5\10\1\0\5\10\1\0\5\10\27\0"+
    "\2\10\3\0\2\10\5\0\2\10\1\237\2\10\1\0"+
    "\3\10\1\240\3\10\1\0\5\10\1\0\5\10\27\0"+
    "\2\10\3\0\2\10\5\0\5\10\1\0\3\10\1\241"+
    "\3\10\1\0\5\10\1\0\5\10\27\0\2\10\3\0"+
    "\2\10\5\0\2\10\1\242\2\10\1\0\7\10\1\0"+
    "\5\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\1\10\1\243\3\10\1\0\7\10\1\0\5\10\1\0"+
    "\5\10\27\0\2\10\3\0\2\10\5\0\5\10\1\0"+
    "\1\10\1\244\5\10\1\0\5\10\1\0\5\10\54\0"+
    "\1\245\46\0\2\10\3\0\2\10\5\0\5\10\1\0"+
    "\3\10\1\246\3\10\1\0\5\10\1\0\5\10\45\0"+
    "\1\247\55\0\2\10\3\0\2\10\5\0\2\10\1\250"+
    "\2\10\1\0\7\10\1\0\5\10\1\0\5\10\27\0"+
    "\2\10\3\0\2\10\5\0\4\10\1\251\1\0\7\10"+
    "\1\0\5\10\1\0\5\10\47\0\1\252\53\0\2\10"+
    "\3\0\2\10\5\0\4\10\1\253\1\0\7\10\1\0"+
    "\5\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\5\10\1\0\7\10\1\0\5\10\1\0\3\10\1\254"+
    "\1\10\47\0\1\255\53\0\2\10\3\0\2\10\5\0"+
    "\4\10\1\256\1\0\7\10\1\0\5\10\1\0\5\10"+
    "\50\0\2\257\71\0\1\260\53\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\257\1\261\6\10\1\0\5\10\1\0"+
    "\5\10\27\0\2\10\3\0\2\10\5\0\4\10\1\262"+
    "\1\0\7\10\1\0\5\10\1\0\5\10\27\0\2\10"+
    "\3\0\2\10\5\0\5\10\1\0\7\10\1\0\2\10"+
    "\1\263\2\10\1\0\5\10\27\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\4\10\1\264\2\10\1\0\5\10"+
    "\1\0\5\10\27\0\2\10\3\0\2\10\5\0\5\10"+
    "\1\0\3\10\1\265\3\10\1\0\5\10\1\0\5\10"+
    "\27\0\2\10\3\0\2\10\5\0\2\10\1\266\2\10"+
    "\1\0\7\10\1\0\5\10\1\0\5\10\27\0\2\10"+
    "\3\0\2\10\5\0\5\10\1\267\1\270\6\10\1\0"+
    "\5\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\5\10\1\0\7\10\1\0\2\10\1\271\2\10\1\0"+
    "\5\10\56\0\1\272\44\0\2\10\3\0\2\10\5\0"+
    "\5\10\1\0\5\10\1\273\1\10\1\0\5\10\1\0"+
    "\5\10\26\0\10\224\1\274\3\224\1\275\57\224\4\70"+
    "\1\145\3\70\1\276\1\146\2\147\1\150\57\70\10\147"+
    "\1\277\3\147\1\217\63\147\1\145\3\147\1\277\3\147"+
    "\1\217\57\147\4\70\1\145\3\70\1\300\1\146\2\147"+
    "\1\150\57\70\1\0\2\10\3\0\2\10\5\0\4\10"+
    "\1\301\1\0\7\10\1\0\5\10\1\0\5\10\54\0"+
    "\1\302\46\0\2\10\3\0\2\10\5\0\5\10\1\0"+
    "\3\10\1\303\3\10\1\0\5\10\1\0\5\10\27\0"+
    "\2\10\3\0\2\10\5\0\5\10\1\304\1\305\6\10"+
    "\1\0\5\10\1\0\5\10\27\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\4\10\1\306\2\10\1\0\5\10"+
    "\1\0\5\10\27\0\2\10\3\0\2\10\5\0\5\10"+
    "\1\0\7\10\1\0\5\10\1\0\1\10\1\307\3\10"+
    "\27\0\2\10\3\0\2\10\5\0\5\10\1\0\7\10"+
    "\1\0\5\10\1\310\1\311\4\10\27\0\2\10\3\0"+
    "\2\10\5\0\5\10\1\0\1\10\1\312\5\10\1\0"+
    "\5\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\5\10\1\0\7\10\1\0\4\10\1\313\1\0\5\10"+
    "\27\0\2\10\3\0\2\10\5\0\5\10\1\0\2\10"+
    "\1\314\4\10\1\0\5\10\1\0\5\10\27\0\2\10"+
    "\3\0\2\10\5\0\5\10\1\0\7\10\1\0\5\10"+
    "\1\0\2\10\1\315\2\10\47\0\1\316\53\0\2\10"+
    "\3\0\2\10\5\0\4\10\1\317\1\0\7\10\1\0"+
    "\5\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\4\10\1\320\1\0\7\10\1\0\5\10\1\0\5\10"+
    "\45\0\1\321\74\0\1\322\54\0\2\10\3\0\2\10"+
    "\5\0\2\10\1\323\2\10\1\0\7\10\1\0\5\10"+
    "\1\0\5\10\27\0\2\10\3\0\2\10\5\0\3\10"+
    "\1\324\1\10\1\0\7\10\1\0\5\10\1\0\5\10"+
    "\27\0\2\10\3\0\2\10\5\0\5\10\1\0\7\10"+
    "\1\0\5\10\1\325\1\326\4\10\27\0\2\10\3\0"+
    "\2\10\5\0\5\10\1\0\5\10\1\327\1\10\1\0"+
    "\5\10\1\0\5\10\63\0\1\330\37\0\2\10\3\0"+
    "\2\10\5\0\5\10\1\0\7\10\1\0\2\10\1\331"+
    "\2\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\1\10\1\332\3\10\1\0\7\10\1\0\5\10\1\0"+
    "\5\10\54\0\1\333\46\0\2\10\3\0\2\10\5\0"+
    "\5\10\1\0\3\10\1\334\3\10\1\0\5\10\1\0"+
    "\5\10\26\0\10\147\1\335\3\147\1\217\57\147\4\65"+
    "\1\66\3\65\1\220\1\67\2\0\60\65\10\0\1\224"+
    "\64\0\2\10\3\0\2\10\5\0\5\10\1\336\1\337"+
    "\6\10\1\0\5\10\1\0\5\10\45\0\1\340\55\0"+
    "\2\10\3\0\2\10\5\0\2\10\1\341\2\10\1\0"+
    "\7\10\1\0\5\10\1\0\5\10\27\0\2\10\3\0"+
    "\2\10\5\0\5\10\1\0\3\10\1\342\3\10\1\0"+
    "\5\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\5\10\1\0\3\10\1\343\3\10\1\0\5\10\1\0"+
    "\5\10\27\0\2\10\3\0\2\10\5\0\1\344\4\10"+
    "\1\0\7\10\1\0\5\10\1\0\5\10\27\0\2\10"+
    "\3\0\2\10\5\0\2\10\1\345\2\10\1\0\7\10"+
    "\1\0\5\10\1\0\5\10\27\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\3\10\1\346\3\10\1\0\5\10"+
    "\1\0\5\10\27\0\2\10\3\0\2\10\5\0\5\10"+
    "\1\0\6\10\1\347\1\0\5\10\1\0\5\10\72\0"+
    "\1\350\60\0\1\351\43\0\2\10\3\0\2\10\5\0"+
    "\5\10\1\0\7\10\1\0\5\10\1\0\3\10\1\352"+
    "\1\10\27\0\2\10\3\0\2\10\5\0\5\10\1\0"+
    "\6\10\1\353\1\0\5\10\1\0\5\10\27\0\2\10"+
    "\3\0\2\10\5\0\5\10\1\0\1\10\1\354\5\10"+
    "\1\0\5\10\1\0\5\10\45\0\1\355\55\0\2\10"+
    "\3\0\2\10\5\0\2\10\1\356\2\10\1\0\7\10"+
    "\1\0\5\10\1\0\5\10\27\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\5\10\1\357\1\10\1\0\5\10"+
    "\1\0\5\10\52\0\1\360\50\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\1\10\1\361\5\10\1\0\5\10"+
    "\1\0\5\10\44\0\1\362\56\0\2\10\3\0\2\10"+
    "\5\0\1\10\1\363\3\10\1\0\7\10\1\0\5\10"+
    "\1\0\5\10\27\0\2\10\3\0\2\10\5\0\5\10"+
    "\1\0\2\10\1\364\4\10\1\0\5\10\1\0\5\10"+
    "\27\0\2\10\3\0\2\10\5\0\5\10\1\0\2\10"+
    "\1\365\4\10\1\0\5\10\1\0\5\10\56\0\1\366"+
    "\44\0\2\10\3\0\2\10\5\0\5\10\1\0\5\10"+
    "\1\367\1\10\1\0\5\10\1\0\5\10\27\0\2\10"+
    "\3\0\2\10\5\0\4\10\1\370\1\0\7\10\1\0"+
    "\5\10\1\0\5\10\27\0\2\10\3\0\2\10\5\0"+
    "\4\10\1\371\1\0\7\10\1\0\5\10\1\0\5\10"+
    "\45\0\1\372\55\0\2\10\3\0\2\10\5\0\2\10"+
    "\1\373\2\10\1\0\7\10\1\0\5\10\1\0\5\10"+
    "\54\0\1\374\46\0\2\10\3\0\2\10\5\0\5\10"+
    "\1\0\3\10\1\375\3\10\1\0\5\10\1\0\5\10"+
    "\27\0\2\10\3\0\2\10\5\0\3\10\1\376\1\10"+
    "\1\0\7\10\1\0\5\10\1\0\5\10\27\0\2\10"+
    "\3\0\2\10\5\0\3\10\1\377\1\10\1\0\7\10"+
    "\1\0\5\10\1\0\5\10\54\0\1\u0100\46\0\2\10"+
    "\3\0\2\10\5\0\5\10\1\0\3\10\1\u0101\3\10"+
    "\1\0\5\10\1\0\5\10\27\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\7\10\1\0\2\10\1\u0102\2\10"+
    "\1\0\5\10\27\0\2\10\3\0\2\10\5\0\5\10"+
    "\1\0\7\10\1\0\2\10\1\u0103\2\10\1\0\5\10"+
    "\45\0\1\u0104\55\0\2\10\3\0\2\10\5\0\2\10"+
    "\1\u0105\2\10\1\0\7\10\1\0\5\10\1\0\5\10"+
    "\27\0\2\10\3\0\2\10\5\0\5\10\1\0\7\10"+
    "\1\u0106\1\u0107\4\10\1\0\5\10\27\0\2\10\3\0"+
    "\2\10\5\0\5\10\1\0\7\10\1\u0108\1\u0109\4\10"+
    "\1\0\5\10\72\0\1\u010a\30\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\7\10\1\0\5\10\1\0\3\10"+
    "\1\u010b\1\10\54\0\1\u010c\46\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\3\10\1\u010d\3\10\1\0\5\10"+
    "\1\0\5\10\54\0\1\u010e\46\0\2\10\3\0\2\10"+
    "\5\0\5\10\1\0\3\10\1\u010f\3\10\1\0\5\10"+
    "\1\0\5\10\47\0\1\u0110\53\0\2\10\3\0\2\10"+
    "\5\0\4\10\1\u0111\1\0\7\10\1\0\5\10\1\0"+
    "\5\10\57\0\1\u0112\43\0\2\10\3\0\2\10\5\0"+
    "\5\10\1\0\6\10\1\u0113\1\0\5\10\1\0\5\10"+
    "\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\2\1\1\11\22\1\5\11"+
    "\3\1\2\11\1\1\11\11\2\0\1\11\2\0\1\11"+
    "\1\1\1\0\11\1\2\11\5\1\1\0\3\1\1\0"+
    "\2\1\1\0\1\1\2\0\11\1\6\11\4\1\2\0"+
    "\5\1\1\0\10\1\1\0\1\1\1\11\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\2\0\10\1\1\0"+
    "\1\1\2\0\3\1\2\0\1\1\1\0\3\1\1\11"+
    "\11\1\1\11\1\1\1\0\2\1\1\11\2\1\1\11"+
    "\1\1\2\0\6\1\1\0\2\1\1\0\1\1\1\11"+
    "\3\0\2\1\1\11\1\1\1\0\3\1\1\11\5\1"+
    "\1\11\2\1\2\0\2\1\1\11\2\1\1\0\2\1"+
    "\1\11\2\1\1\0\1\1\1\0\7\1\1\0\1\11"+
    "\3\1\1\11\2\1\1\0\1\1\1\0\3\1\1\0"+
    "\3\1\1\11\1\1\1\11\3\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String TipoError = "Lexico ";
                            String Descripcion = "El Caracter:" + yytext() + " no pertenece al lenguaje";
                            String Fila = " Fila: " + yyline;
                            String Columna = " Columna: " + yycolumn;
                            System.out.println("#ERROR"  + TipoError + Descripcion + Fila + Columna );
                            TError ERRORES = new TError(yytext(),yyline,yycolumn,TipoError, Descripcion);
                            TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
                            System.out.println(" al agran puta");
            }
          case 70: break;
          case 2: 
            { System.out.println("--->"+yytext()+" - entero");
                            return new Symbol(Simbolos.entero, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 3: 
            { /* Se ignora */
            }
          case 72: break;
          case 4: 
            { System.out.println("--->"+yytext()+" - id");
                            return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 5: 
            { System.out.println("--->"+yytext()+" - por");
                            return new Symbol(Simbolos.por, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 6: 
            { System.out.println("--->"+yytext()+" - FuncionC");
                            return new Symbol(Simbolos.FuncionC, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 7: 
            { System.out.println("--->"+yytext()+" - igual");
                            return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 8: 
            { System.out.println("--->"+yytext()+" - par abrir");
                            return new Symbol(Simbolos.parentesisabrir, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 9: 
            { System.out.println("--->"+yytext()+" - mas");
                            return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 10: 
            { System.out.println("--->"+yytext()+" - menos");
                            return new Symbol(Simbolos.menos, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 11: 
            { System.out.println("--->"+yytext()+" - dividido");
                            return new Symbol(Simbolos.div, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 12: 
            { System.out.println("--->"+yytext()+" - potencia");
                            return new Symbol(Simbolos.potencia, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 13: 
            { System.out.println("--->"+yytext()+" - MayorQue");
                            return new Symbol(Simbolos.MayorQue, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 14: 
            { System.out.println("--->"+yytext()+" - MenorQue");
                            return new Symbol(Simbolos.MenorQue, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 15: 
            { System.out.println("--->"+yytext()+" - AND");
                            return new Symbol(Simbolos.AND, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 16: 
            { System.out.println("--->"+yytext()+" - OR");
                            return new Symbol(Simbolos.OR, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 17: 
            { System.out.println("--->"+yytext()+" - NOT");
                            return new Symbol(Simbolos.NOT, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 18: 
            { System.out.println("--->"+yytext()+" - PREGUNTAC");
                            return new Symbol(Simbolos.PREGUNTAC, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 19: 
            { System.out.println("--->"+yytext()+" - DOSP");
                            return new Symbol(Simbolos.DOSP, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 20: 
            { System.out.println("--->"+yytext()+" - punto y coma v*****v*****v*****v*****v*****\n");
                            return new Symbol(Simbolos.puntoycoma, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 21: 
            { System.out.println("--->"+yytext()+" - llave abrir");
                            return new Symbol(Simbolos.llaveabrir, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 22: 
            { System.out.println("--->"+yytext()+" - llave cerrar");
                            return new Symbol(Simbolos.llavecerrar, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 23: 
            { System.out.println("--->"+yytext()+" - par cerrar");
                            return new Symbol(Simbolos.parentesiscerrar, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 24: 
            { System.out.println("--->"+yytext()+" - Corchete abrir");
                            return new Symbol(Simbolos.corcheteabrir, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 25: 
            { System.out.println("--->"+yytext()+" - Corchete cerrar");
                            return new Symbol(Simbolos.corchetecerrar, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 26: 
            { System.out.println("--->"+yytext()+" - coma");
                            return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 27: 
            { System.out.println("--->"+yytext()+" - CADENA");
                            return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 28: 
            { System.out.println("--->Comentario 1 línea");
            }
          case 97: break;
          case 29: 
            { System.out.println("--->"+yytext()+" - IF");
                            return new Symbol(Simbolos.IF, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 30: 
            { System.out.println("--->"+yytext()+" - IN");
                            return new Symbol(Simbolos.IN, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 31: 
            { System.out.println("--->"+yytext()+" - DO");
                            return new Symbol(Simbolos.DO, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 32: 
            { System.out.println("--->"+yytext()+" - Igualdad");
                            return new Symbol(Simbolos.igualdad, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 33: 
            { System.out.println("--->"+yytext()+" - DESDESPERADO");
                            return new Symbol(Simbolos.DESDESPERADO, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 34: 
            { System.out.println("--->"+yytext()+" - modulo");
                            return new Symbol(Simbolos.modulo, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 35: 
            { System.out.println("--->"+yytext()+" - MayorIgualQue");
                            return new Symbol(Simbolos.MayorIgualQue, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 36: 
            { System.out.println("--->"+yytext()+" - MenorIgualQue");
                            return new Symbol(Simbolos.MenorIgualQue, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 37: 
            { System.out.println("--->"+yytext()+" - NoIgualdad");
                            return new Symbol(Simbolos.Noigualdad, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 38: 
            { System.out.println("--->"+yytext()+" - decimal");
                            return new Symbol(Simbolos.decimal, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 39: 
            { System.out.println("--->"+yytext()+" - FOR");
                            return new Symbol(Simbolos.FOR, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 40: 
            { System.out.println("--->"+yytext()+" - pie");
                            return new Symbol(Simbolos.pie, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 41: 
            { System.out.println("--->Comentario multilínea");
            }
          case 110: break;
          case 42: 
            { System.out.println("--->"+yytext()+" - NULO");
                            return new Symbol(Simbolos.nulo, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 43: 
            { System.out.println("--->"+yytext()+" - CASE");
                            return new Symbol(Simbolos.CASE, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 44: 
            { System.out.println("--->"+yytext()+" - true");
                            return new Symbol(Simbolos.ttrue, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 45: 
            { System.out.println("--->"+yytext()+" - ELSE");
                            return new Symbol(Simbolos.ELSE, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 46: 
            { System.out.println("--->"+yytext()+" - plot");
                            return new Symbol(Simbolos.plot, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 47: 
            { System.out.println("--->"+yytext()+" - LISTA");
                            return new Symbol(Simbolos.LISTA, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 48: 
            { System.out.println("--->"+yytext()+" - hist");
                            return new Symbol(Simbolos.hist, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 49: 
            { System.out.println("--->"+yytext()+" - mode");
                            return new Symbol(Simbolos.mode, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 50: 
            { System.out.println("--->"+yytext()+" - mean");
                            return new Symbol(Simbolos.mean, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 51: 
            { System.out.println("--->"+yytext()+" - false");
                            return new Symbol(Simbolos.tfalse, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 52: 
            { System.out.println("--->"+yytext()+" - trunk");
                            return new Symbol(Simbolos.trunk, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 53: 
            { System.out.println("--->"+yytext()+" - round");
                            return new Symbol(Simbolos.round, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 54: 
            { System.out.println("--->"+yytext()+" - Imprimir");
                            return new Symbol(Simbolos.imprimir, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 55: 
            { System.out.println("--->"+yytext()+" - BREAK");
                            return new Symbol(Simbolos.BREAK, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 56: 
            { System.out.println("--->"+yytext()+" - WHILE");
                            return new Symbol(Simbolos.WHILE, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 57: 
            { System.out.println("--->"+yytext()+" - typeof");
                            return new Symbol(Simbolos.typeof, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 58: 
            { System.out.println("--->"+yytext()+" - returno");
                            return new Symbol(Simbolos.returno, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 59: 
            { System.out.println("--->"+yytext()+" - remove");
                            return new Symbol(Simbolos.remove, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 60: 
            { System.out.println("--->"+yytext()+" - length");
                            return new Symbol(Simbolos.length, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 61: 
            { System.out.println("--->"+yytext()+" - SWITCH");
                            return new Symbol(Simbolos.SWITCH, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 62: 
            { System.out.println("--->"+yytext()+" - median");
                            return new Symbol(Simbolos.median, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 63: 
            { System.out.println("--->"+yytext()+" - barplot");
                            return new Symbol(Simbolos.barplot, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 64: 
            { System.out.println("--->"+yytext()+" - DEF");
                            return new Symbol(Simbolos.DEF, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 65: 
            { System.out.println("--->"+yytext()+" - function");
                            return new Symbol(Simbolos.function, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 66: 
            { System.out.println("--->"+yytext()+" - CONTINUE");
                            return new Symbol(Simbolos.CONTINUE, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 67: 
            { System.out.println("--->"+yytext()+" - touppercase");
                            return new Symbol(Simbolos.touppercase, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 68: 
            { System.out.println("--->"+yytext()+" - tolowercase");
                            return new Symbol(Simbolos.tolowercase, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 69: 
            { System.out.println("--->"+yytext()+" - stringlength");
                            return new Symbol(Simbolos.stringlength, yycolumn, yyline, yytext());
            }
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
