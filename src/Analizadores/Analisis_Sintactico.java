
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import static Analizadores.IDE.TABLA_DE_ERRORES_SINTACTICOS;
import CodigoASTCUP.*;
import Codigo.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analisis_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analisis_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analisis_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\036\013\000\002\036\017\000\002\036\013" +
    "\000\002\034\011\000\002\034\014\000\002\035\007\000" +
    "\002\035\006\000\002\031\004\000\002\032\004\000\002" +
    "\030\013\000\002\027\013\000\002\026\011\000\002\033" +
    "\004\000\002\033\003\000\002\022\011\000\002\022\015" +
    "\000\002\022\012\000\002\022\016\000\002\025\013\000" +
    "\002\025\012\000\002\023\004\000\002\023\003\000\002" +
    "\021\004\000\002\021\003\000\002\020\004\000\002\020" +
    "\003\000\002\015\011\000\002\015\013\000\002\013\010" +
    "\000\002\014\005\000\002\014\003\000\002\007\006\000" +
    "\002\011\003\000\002\011\002\000\002\010\007\000\002" +
    "\016\006\000\002\016\005\000\002\016\007\000\002\016" +
    "\004\000\002\016\004\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\006\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\010\000\002\016\006\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\016\006\000" +
    "\002\016\010\000\002\016\006\000\002\016\010\000\002" +
    "\016\006\000\002\016\010\000\002\017\003\000\002\017" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\034\003\030\036\023\060\010\061\022\062" +
    "\024\063\006\065\015\067\005\070\020\071\033\073\026" +
    "\074\004\075\012\001\002\000\046\002\uffd0\003\uffd0\004" +
    "\uffd0\012\237\036\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\065\uffd0\067\uffd0\070\uffd0\071\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\076\uffd0\077\uffd0\001\002\000\004\006\377\001\002" +
    "\000\004\006\367\001\002\000\044\002\ufffe\003\ufffe\004" +
    "\ufffe\036\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\065\ufffe" +
    "\067\ufffe\070\ufffe\071\ufffe\073\ufffe\074\ufffe\075\ufffe\076" +
    "\ufffe\077\ufffe\001\002\000\004\006\363\001\002\000\036" +
    "\002\000\003\030\036\023\060\010\061\022\062\024\063" +
    "\006\065\015\067\005\070\020\071\033\073\026\074\004" +
    "\075\012\001\002\000\004\006\340\001\002\000\044\002" +
    "\ufffd\003\ufffd\004\ufffd\036\ufffd\060\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\065\ufffd\067\ufffd\070\ufffd\071\ufffd\073\ufffd\074" +
    "\ufffd\075\ufffd\076\ufffd\077\ufffd\001\002\000\044\002\ufff6" +
    "\003\ufff6\004\ufff6\036\ufff6\060\ufff6\061\ufff6\062\ufff6\063" +
    "\ufff6\065\ufff6\067\ufff6\070\ufff6\071\ufff6\073\ufff6\074\ufff6" +
    "\075\ufff6\076\ufff6\077\ufff6\001\002\000\004\006\277\001" +
    "\002\000\044\002\ufff5\003\ufff5\004\ufff5\036\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\065\ufff5\067\ufff5\070\ufff5\071" +
    "\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\001\002" +
    "\000\044\002\ufff3\003\ufff3\004\ufff3\036\ufff3\060\ufff3\061" +
    "\ufff3\062\ufff3\063\ufff3\065\ufff3\067\ufff3\070\ufff3\071\ufff3" +
    "\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\001\002\000" +
    "\004\005\267\001\002\000\044\002\ufff8\003\ufff8\004\ufff8" +
    "\036\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\065\ufff8\067" +
    "\ufff8\070\ufff8\071\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8" +
    "\077\ufff8\001\002\000\004\006\257\001\002\000\004\013" +
    "\254\001\002\000\004\006\240\001\002\000\044\002\ufffa" +
    "\003\ufffa\004\ufffa\036\ufffa\060\ufffa\061\ufffa\062\ufffa\063" +
    "\ufffa\065\ufffa\067\ufffa\070\ufffa\071\ufffa\073\ufffa\074\ufffa" +
    "\075\ufffa\076\ufffa\077\ufffa\001\002\000\046\002\uffd0\003" +
    "\uffd0\004\uffd0\012\237\036\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\065\uffd0\067\uffd0\070\uffd0\071\uffd0\073\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002\000\044\002\ufffb" +
    "\003\ufffb\004\ufffb\036\ufffb\060\ufffb\061\ufffb\062\ufffb\063" +
    "\ufffb\065\ufffb\067\ufffb\070\ufffb\071\ufffb\073\ufffb\074\ufffb" +
    "\075\ufffb\076\ufffb\077\ufffb\001\002\000\004\012\235\001" +
    "\002\000\044\002\ufffc\003\ufffc\004\ufffc\036\ufffc\060\ufffc" +
    "\061\ufffc\062\ufffc\063\ufffc\065\ufffc\067\ufffc\070\ufffc\071" +
    "\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\001\002" +
    "\000\044\002\ufff7\003\ufff7\004\ufff7\036\ufff7\060\ufff7\061" +
    "\ufff7\062\ufff7\063\ufff7\065\ufff7\067\ufff7\070\ufff7\071\ufff7" +
    "\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\001\002\000" +
    "\004\006\040\001\002\000\044\002\ufff9\003\ufff9\004\ufff9" +
    "\036\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\065\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9" +
    "\077\ufff9\001\002\000\044\002\ufff4\003\ufff4\004\ufff4\036" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\065\ufff4\067\ufff4" +
    "\070\ufff4\071\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077" +
    "\ufff4\001\002\000\004\002\037\001\002\000\004\002\001" +
    "\001\002\000\060\006\061\015\054\032\046\035\057\036" +
    "\062\040\066\041\060\042\050\043\055\044\043\045\045" +
    "\046\041\047\071\050\051\051\063\052\053\053\070\054" +
    "\044\055\065\056\047\057\056\064\042\100\067\001\002" +
    "\000\004\006\232\001\002\000\116\002\uffb6\003\uffb6\004" +
    "\uffb6\007\uffb6\011\uffb6\012\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6" +
    "\036\uffb6\037\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\065" +
    "\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6" +
    "\075\uffb6\076\uffb6\077\uffb6\001\002\000\004\006\227\001" +
    "\002\000\116\002\uffa4\003\uffa4\004\uffa4\007\uffa4\011\uffa4" +
    "\012\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\033\uffa4\034\uffa4\036\uffa4\037\uffa4\060" +
    "\uffa4\061\uffa4\062\uffa4\063\uffa4\065\uffa4\067\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077" +
    "\uffa4\001\002\000\004\006\224\001\002\000\060\006\061" +
    "\015\054\032\046\035\057\036\062\040\066\041\060\042" +
    "\050\043\055\044\043\045\045\046\041\047\071\050\051" +
    "\051\063\052\053\053\070\054\044\055\065\056\047\057" +
    "\056\064\042\100\067\001\002\000\004\006\215\001\002" +
    "\000\116\002\uffb4\003\uffb4\004\uffb4\007\uffb4\011\uffb4\012" +
    "\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\033\uffb4\034\uffb4\036\uffb4\037\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\065\uffb4\067\uffb4\070\uffb4\071" +
    "\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4" +
    "\001\002\000\004\006\212\001\002\000\042\014\111\015" +
    "\102\016\104\017\076\020\074\021\103\022\113\023\110" +
    "\024\105\025\077\026\100\027\106\030\075\031\107\033" +
    "\112\072\202\001\002\000\004\006\177\001\002\000\060" +
    "\006\061\015\054\032\046\035\057\036\062\040\066\041" +
    "\060\042\050\043\055\044\043\045\045\046\041\047\071" +
    "\050\051\051\063\052\053\053\070\054\044\055\065\056" +
    "\047\057\056\064\042\100\067\001\002\000\116\002\uffb8" +
    "\003\uffb8\004\uffb8\007\uffb8\011\uffb8\012\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\033" +
    "\uffb8\034\uffb8\036\uffb8\037\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\065\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\001\002\000\004" +
    "\006\170\001\002\000\060\006\061\015\054\032\046\035" +
    "\057\036\062\040\066\041\060\042\050\043\055\044\043" +
    "\045\045\046\041\047\071\050\051\051\063\052\053\053" +
    "\070\054\044\055\065\056\047\057\056\064\042\100\067" +
    "\001\002\000\116\002\uffb5\003\uffb5\004\uffb5\007\uffb5\011" +
    "\uffb5\012\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\063\uffb5\065\uffb5\067\uffb5\070" +
    "\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5" +
    "\077\uffb5\001\002\000\060\006\061\015\054\032\046\035" +
    "\057\036\062\040\066\041\060\042\050\043\055\044\043" +
    "\045\045\046\041\047\071\050\051\051\063\052\053\053" +
    "\070\054\044\055\065\056\047\057\056\064\042\100\067" +
    "\001\002\000\120\002\uffb9\003\uffb9\004\uffb9\007\uffb9\010" +
    "\161\011\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\036\uffb9" +
    "\037\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\065\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9" +
    "\076\uffb9\077\uffb9\001\002\000\004\006\156\001\002\000" +
    "\116\002\uffba\003\uffba\004\uffba\007\uffba\011\uffba\012\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\033\uffba\034\uffba\036\uffba\037\uffba\060\uffba\061" +
    "\uffba\062\uffba\063\uffba\065\uffba\067\uffba\070\uffba\071\uffba" +
    "\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\001" +
    "\002\000\004\006\150\001\002\000\116\002\uffa5\003\uffa5" +
    "\004\uffa5\007\uffa5\011\uffa5\012\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\033\uffa5\034" +
    "\uffa5\036\uffa5\037\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\065\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074" +
    "\uffa5\075\uffa5\076\uffa5\077\uffa5\001\002\000\004\006\142" +
    "\001\002\000\004\006\137\001\002\000\004\006\072\001" +
    "\002\000\060\006\061\015\054\032\046\035\057\036\062" +
    "\040\066\041\060\042\050\043\055\044\043\045\045\046" +
    "\041\047\071\050\051\051\063\052\053\053\070\054\044" +
    "\055\065\056\047\057\056\064\042\100\067\001\002\000" +
    "\042\014\111\015\102\016\104\017\076\020\074\021\103" +
    "\022\113\023\110\024\105\025\077\026\100\027\106\030" +
    "\075\031\107\033\112\037\101\001\002\000\060\006\061" +
    "\015\054\032\046\035\057\036\062\040\066\041\060\042" +
    "\050\043\055\044\043\045\045\046\041\047\071\050\051" +
    "\051\063\052\053\053\070\054\044\055\065\056\047\057" +
    "\056\064\042\100\067\001\002\000\060\006\061\015\054" +
    "\032\046\035\057\036\062\040\066\041\060\042\050\043" +
    "\055\044\043\045\045\046\041\047\071\050\051\051\063" +
    "\052\053\053\070\054\044\055\065\056\047\057\056\064" +
    "\042\100\067\001\002\000\060\006\061\015\054\032\046" +
    "\035\057\036\062\040\066\041\060\042\050\043\055\044" +
    "\043\045\045\046\041\047\071\050\051\051\063\052\053" +
    "\053\070\054\044\055\065\056\047\057\056\064\042\100" +
    "\067\001\002\000\060\006\061\015\054\032\046\035\057" +
    "\036\062\040\066\041\060\042\050\043\055\044\043\045" +
    "\045\046\041\047\071\050\051\051\063\052\053\053\070" +
    "\054\044\055\065\056\047\057\056\064\042\100\067\001" +
    "\002\000\060\006\061\015\054\032\046\035\057\036\062" +
    "\040\066\041\060\042\050\043\055\044\043\045\045\046" +
    "\041\047\071\050\051\051\063\052\053\053\070\054\044" +
    "\055\065\056\047\057\056\064\042\100\067\001\002\000" +
    "\060\006\061\015\054\032\046\035\057\036\062\040\066" +
    "\041\060\042\050\043\055\044\043\045\045\046\041\047" +
    "\071\050\051\051\063\052\053\053\070\054\044\055\065" +
    "\056\047\057\056\064\042\100\067\001\002\000\060\006" +
    "\061\015\054\032\046\035\057\036\062\040\066\041\060" +
    "\042\050\043\055\044\043\045\045\046\041\047\071\050" +
    "\051\051\063\052\053\053\070\054\044\055\065\056\047" +
    "\057\056\064\042\100\067\001\002\000\060\006\061\015" +
    "\054\032\046\035\057\036\062\040\066\041\060\042\050" +
    "\043\055\044\043\045\045\046\041\047\071\050\051\051" +
    "\063\052\053\053\070\054\044\055\065\056\047\057\056" +
    "\064\042\100\067\001\002\000\060\006\061\015\054\032" +
    "\046\035\057\036\062\040\066\041\060\042\050\043\055" +
    "\044\043\045\045\046\041\047\071\050\051\051\063\052" +
    "\053\053\070\054\044\055\065\056\047\057\056\064\042" +
    "\100\067\001\002\000\060\006\061\015\054\032\046\035" +
    "\057\036\062\040\066\041\060\042\050\043\055\044\043" +
    "\045\045\046\041\047\071\050\051\051\063\052\053\053" +
    "\070\054\044\055\065\056\047\057\056\064\042\100\067" +
    "\001\002\000\060\006\061\015\054\032\046\035\057\036" +
    "\062\040\066\041\060\042\050\043\055\044\043\045\045" +
    "\046\041\047\071\050\051\051\063\052\053\053\070\054" +
    "\044\055\065\056\047\057\056\064\042\100\067\001\002" +
    "\000\060\006\061\015\054\032\046\035\057\036\062\040" +
    "\066\041\060\042\050\043\055\044\043\045\045\046\041" +
    "\047\071\050\051\051\063\052\053\053\070\054\044\055" +
    "\065\056\047\057\056\064\042\100\067\001\002\000\060" +
    "\006\061\015\054\032\046\035\057\036\062\040\066\041" +
    "\060\042\050\043\055\044\043\045\045\046\041\047\071" +
    "\050\051\051\063\052\053\053\070\054\044\055\065\056" +
    "\047\057\056\064\042\100\067\001\002\000\060\006\061" +
    "\015\054\032\046\035\057\036\062\040\066\041\060\042" +
    "\050\043\055\044\043\045\045\046\041\047\071\050\051" +
    "\051\063\052\053\053\070\054\044\055\065\056\047\057" +
    "\056\064\042\100\067\001\002\000\060\006\061\015\054" +
    "\032\046\035\057\036\062\040\066\041\060\042\050\043" +
    "\055\044\043\045\045\046\041\047\071\050\051\051\063" +
    "\052\053\053\070\054\044\055\065\056\047\057\056\064" +
    "\042\100\067\001\002\000\060\006\061\015\054\032\046" +
    "\035\057\036\062\040\066\041\060\042\050\043\055\044" +
    "\043\045\045\046\041\047\071\050\051\051\063\052\053" +
    "\053\070\054\044\055\065\056\047\057\056\064\042\100" +
    "\067\001\002\000\116\002\uffc3\003\uffc3\004\uffc3\007\uffc3" +
    "\011\uffc3\012\uffc3\014\111\015\102\016\104\017\076\020" +
    "\074\021\103\022\uffc3\023\uffc3\024\105\025\077\026\100" +
    "\027\106\030\uffc3\031\uffc3\033\uffc3\034\uffc3\036\uffc3\037" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\065\uffc3\067\uffc3" +
    "\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076" +
    "\uffc3\077\uffc3\001\002\000\042\014\111\015\102\016\104" +
    "\017\076\020\074\021\103\022\113\023\110\024\105\025" +
    "\077\026\100\027\106\030\075\031\107\033\112\034\116" +
    "\001\002\000\060\006\061\015\054\032\046\035\057\036" +
    "\062\040\066\041\060\042\050\043\055\044\043\045\045" +
    "\046\041\047\071\050\051\051\063\052\053\053\070\054" +
    "\044\055\065\056\047\057\056\064\042\100\067\001\002" +
    "\000\116\002\uffcc\003\uffcc\004\uffcc\007\uffcc\011\uffcc\012" +
    "\uffcc\014\111\015\102\016\104\017\076\020\074\021\103" +
    "\022\113\023\110\024\105\025\077\026\100\027\106\030" +
    "\075\031\107\033\112\034\uffcc\036\uffcc\037\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\065\uffcc\067\uffcc\070\uffcc\071" +
    "\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc" +
    "\001\002\000\116\002\uffc9\003\uffc9\004\uffc9\007\uffc9\011" +
    "\uffc9\012\uffc9\014\uffc9\015\uffc9\016\104\017\076\020\uffc9" +
    "\021\103\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9\036\uffc9\037\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\063\uffc9\065\uffc9\067\uffc9\070" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9" +
    "\077\uffc9\001\002\000\116\002\uffc2\003\uffc2\004\uffc2\007" +
    "\uffc2\011\uffc2\012\uffc2\014\111\015\102\016\104\017\076" +
    "\020\074\021\103\022\uffc2\023\uffc2\024\105\025\077\026" +
    "\100\027\106\030\uffc2\031\uffc2\033\uffc2\034\uffc2\036\uffc2" +
    "\037\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\065\uffc2\067" +
    "\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2" +
    "\076\uffc2\077\uffc2\001\002\000\116\002\uffbc\003\uffbc\004" +
    "\uffbc\007\uffbc\011\uffbc\012\uffbc\014\111\015\102\016\104" +
    "\017\076\020\074\021\103\022\113\023\110\024\105\025" +
    "\077\026\100\027\106\030\uffbc\031\uffbc\033\uffbc\034\uffbc" +
    "\036\uffbc\037\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\065" +
    "\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc" +
    "\075\uffbc\076\uffbc\077\uffbc\001\002\000\116\002\uffbf\003" +
    "\uffbf\004\uffbf\007\uffbf\011\uffbf\012\uffbf\014\111\015\102" +
    "\016\104\017\076\020\074\021\103\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf" +
    "\034\uffbf\036\uffbf\037\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\065\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf" +
    "\074\uffbf\075\uffbf\076\uffbf\077\uffbf\001\002\000\116\002" +
    "\uffc0\003\uffc0\004\uffc0\007\uffc0\011\uffc0\012\uffc0\014\111" +
    "\015\102\016\104\017\076\020\074\021\103\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\033\uffc0\034\uffc0\036\uffc0\037\uffc0\060\uffc0\061\uffc0\062" +
    "\uffc0\063\uffc0\065\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0" +
    "\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\001\002\000" +
    "\116\002\uffc7\003\uffc7\004\uffc7\007\uffc7\011\uffc7\012\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\033\uffc7\034\uffc7\036\uffc7\037\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\065\uffc7\067\uffc7\070\uffc7\071\uffc7" +
    "\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\001" +
    "\002\000\116\002\uffc5\003\uffc5\004\uffc5\007\uffc5\011\uffc5" +
    "\012\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\033\uffc5\034\uffc5\036\uffc5\037\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\065\uffc5\067\uffc5\070\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077" +
    "\uffc5\001\002\000\116\002\uffc8\003\uffc8\004\uffc8\007\uffc8" +
    "\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016\104\017\076\020" +
    "\uffc8\021\103\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\036\uffc8\037" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\065\uffc8\067\uffc8" +
    "\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076" +
    "\uffc8\077\uffc8\001\002\000\042\007\131\014\111\015\102" +
    "\016\104\017\076\020\074\021\103\022\113\023\110\024" +
    "\105\025\077\026\100\027\106\030\075\031\107\033\112" +
    "\001\002\000\116\002\uffb0\003\uffb0\004\uffb0\007\uffb0\011" +
    "\uffb0\012\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0\036\uffb0\037\uffb0" +
    "\060\uffb0\061\uffb0\062\uffb0\063\uffb0\065\uffb0\067\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0" +
    "\077\uffb0\001\002\000\116\002\uffbe\003\uffbe\004\uffbe\007" +
    "\uffbe\011\uffbe\012\uffbe\014\111\015\102\016\104\017\076" +
    "\020\074\021\103\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\036\uffbe" +
    "\037\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\065\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe" +
    "\076\uffbe\077\uffbe\001\002\000\116\002\uffc1\003\uffc1\004" +
    "\uffc1\007\uffc1\011\uffc1\012\uffc1\014\111\015\102\016\104" +
    "\017\076\020\074\021\103\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\033\uffc1\034\uffc1" +
    "\036\uffc1\037\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\065" +
    "\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1" +
    "\075\uffc1\076\uffc1\077\uffc1\001\002\000\116\002\uffc6\003" +
    "\uffc6\004\uffc6\007\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\033\uffc6" +
    "\034\uffc6\036\uffc6\037\uffc6\060\uffc6\061\uffc6\062\uffc6\063" +
    "\uffc6\065\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\074\uffc6\075\uffc6\076\uffc6\077\uffc6\001\002\000\116\002" +
    "\uffbd\003\uffbd\004\uffbd\007\uffbd\011\uffbd\012\uffbd\014\111" +
    "\015\102\016\104\017\076\020\074\021\103\022\113\023" +
    "\110\024\105\025\077\026\100\027\106\030\uffbd\031\uffbd" +
    "\033\uffbd\034\uffbd\036\uffbd\037\uffbd\060\uffbd\061\uffbd\062" +
    "\uffbd\063\uffbd\065\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd" +
    "\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\001\002\000" +
    "\116\002\uffc4\003\uffc4\004\uffc4\007\uffc4\011\uffc4\012\uffc4" +
    "\014\111\015\102\016\104\017\076\020\uffc4\021\103\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\033\uffc4\034\uffc4\036\uffc4\037\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\065\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\001" +
    "\002\000\060\006\061\015\054\032\046\035\057\036\062" +
    "\040\066\041\060\042\050\043\055\044\043\045\045\046" +
    "\041\047\071\050\051\051\063\052\053\053\070\054\044" +
    "\055\065\056\047\057\056\064\042\100\067\001\002\000" +
    "\042\007\141\014\111\015\102\016\104\017\076\020\074" +
    "\021\103\022\113\023\110\024\105\025\077\026\100\027" +
    "\106\030\075\031\107\033\112\001\002\000\116\002\uffac" +
    "\003\uffac\004\uffac\007\uffac\011\uffac\012\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\033" +
    "\uffac\034\uffac\036\uffac\037\uffac\060\uffac\061\uffac\062\uffac" +
    "\063\uffac\065\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073" +
    "\uffac\074\uffac\075\uffac\076\uffac\077\uffac\001\002\000\060" +
    "\006\061\015\054\032\046\035\057\036\062\040\066\041" +
    "\060\042\050\043\055\044\043\045\045\046\041\047\071" +
    "\050\051\051\063\052\053\053\070\054\044\055\065\056" +
    "\047\057\056\064\042\100\067\001\002\000\044\007\uffd3" +
    "\014\111\015\102\016\104\017\076\020\074\021\103\022" +
    "\113\023\110\024\105\025\077\026\100\027\106\030\075" +
    "\031\107\033\112\037\uffd3\001\002\000\006\007\146\037" +
    "\145\001\002\000\060\006\061\015\054\032\046\035\057" +
    "\036\062\040\066\041\060\042\050\043\055\044\043\045" +
    "\045\046\041\047\071\050\051\051\063\052\053\053\070" +
    "\054\044\055\065\056\047\057\056\064\042\100\067\001" +
    "\002\000\116\002\uffce\003\uffce\004\uffce\007\uffce\011\uffce" +
    "\012\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\033\uffce\034\uffce\036\uffce\037\uffce\060" +
    "\uffce\061\uffce\062\uffce\063\uffce\065\uffce\067\uffce\070\uffce" +
    "\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077" +
    "\uffce\001\002\000\044\007\uffd4\014\111\015\102\016\104" +
    "\017\076\020\074\021\103\022\113\023\110\024\105\025" +
    "\077\026\100\027\106\030\075\031\107\033\112\037\uffd4" +
    "\001\002\000\060\006\061\015\054\032\046\035\057\036" +
    "\062\040\066\041\060\042\050\043\055\044\043\045\045" +
    "\046\041\047\071\050\051\051\063\052\053\053\070\054" +
    "\044\055\065\056\047\057\056\064\042\100\067\001\002" +
    "\000\044\007\153\014\111\015\102\016\104\017\076\020" +
    "\074\021\103\022\113\023\110\024\105\025\077\026\100" +
    "\027\106\030\075\031\107\033\112\037\152\001\002\000" +
    "\060\006\061\015\054\032\046\035\057\036\062\040\066" +
    "\041\060\042\050\043\055\044\043\045\045\046\041\047" +
    "\071\050\051\051\063\052\053\053\070\054\044\055\065" +
    "\056\047\057\056\064\042\100\067\001\002\000\116\002" +
    "\uffab\003\uffab\004\uffab\007\uffab\011\uffab\012\uffab\014\uffab" +
    "\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab" +
    "\033\uffab\034\uffab\036\uffab\037\uffab\060\uffab\061\uffab\062" +
    "\uffab\063\uffab\065\uffab\067\uffab\070\uffab\071\uffab\072\uffab" +
    "\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\001\002\000" +
    "\042\007\155\014\111\015\102\016\104\017\076\020\074" +
    "\021\103\022\113\023\110\024\105\025\077\026\100\027" +
    "\106\030\075\031\107\033\112\001\002\000\116\002\uffaa" +
    "\003\uffaa\004\uffaa\007\uffaa\011\uffaa\012\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\033" +
    "\uffaa\034\uffaa\036\uffaa\037\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\063\uffaa\065\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073" +
    "\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\001\002\000\060" +
    "\006\061\015\054\032\046\035\057\036\062\040\066\041" +
    "\060\042\050\043\055\044\043\045\045\046\041\047\071" +
    "\050\051\051\063\052\053\053\070\054\044\055\065\056" +
    "\047\057\056\064\042\100\067\001\002\000\042\007\160" +
    "\014\111\015\102\016\104\017\076\020\074\021\103\022" +
    "\113\023\110\024\105\025\077\026\100\027\106\030\075" +
    "\031\107\033\112\001\002\000\116\002\uffae\003\uffae\004" +
    "\uffae\007\uffae\011\uffae\012\uffae\014\uffae\015\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034\uffae" +
    "\036\uffae\037\uffae\060\uffae\061\uffae\062\uffae\063\uffae\065" +
    "\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae" +
    "\075\uffae\076\uffae\077\uffae\001\002\000\060\006\061\015" +
    "\054\032\046\035\057\036\062\040\066\041\060\042\050" +
    "\043\055\044\043\045\045\046\041\047\071\050\051\051" +
    "\063\052\053\053\070\054\044\055\065\056\047\057\056" +
    "\064\042\100\067\001\002\000\042\011\163\014\111\015" +
    "\102\016\104\017\076\020\074\021\103\022\113\023\110" +
    "\024\105\025\077\026\100\027\106\030\075\031\107\033" +
    "\112\001\002\000\116\002\uffb7\003\uffb7\004\uffb7\007\uffb7" +
    "\011\uffb7\012\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7\036\uffb7\037" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\065\uffb7\067\uffb7" +
    "\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076" +
    "\uffb7\077\uffb7\001\002\000\042\007\165\014\111\015\102" +
    "\016\104\017\076\020\074\021\103\022\113\023\110\024" +
    "\105\025\077\026\100\027\106\030\075\031\107\033\112" +
    "\001\002\000\116\002\uffbb\003\uffbb\004\uffbb\007\uffbb\011" +
    "\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\033\uffbb\034\uffbb\036\uffbb\037\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\063\uffbb\065\uffbb\067\uffbb\070" +
    "\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb" +
    "\077\uffbb\001\002\000\006\007\167\037\145\001\002\000" +
    "\116\002\uffcd\003\uffcd\004\uffcd\007\uffcd\011\uffcd\012\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\033\uffcd\034\uffcd\036\uffcd\037\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\065\uffcd\067\uffcd\070\uffcd\071\uffcd" +
    "\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\001" +
    "\002\000\060\006\061\015\054\032\046\035\057\036\062" +
    "\040\066\041\060\042\050\043\055\044\043\045\045\046" +
    "\041\047\071\050\051\051\063\052\053\053\070\054\044" +
    "\055\065\056\047\057\056\064\042\100\067\001\002\000" +
    "\044\007\173\014\111\015\102\016\104\017\076\020\074" +
    "\021\103\022\113\023\110\024\105\025\077\026\100\027" +
    "\106\030\075\031\107\033\112\037\172\001\002\000\060" +
    "\006\061\015\054\032\046\035\057\036\062\040\066\041" +
    "\060\042\050\043\055\044\043\045\045\046\041\047\071" +
    "\050\051\051\063\052\053\053\070\054\044\055\065\056" +
    "\047\057\056\064\042\100\067\001\002\000\116\002\uffa7" +
    "\003\uffa7\004\uffa7\007\uffa7\011\uffa7\012\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\033" +
    "\uffa7\034\uffa7\036\uffa7\037\uffa7\060\uffa7\061\uffa7\062\uffa7" +
    "\063\uffa7\065\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073" +
    "\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\001\002\000\042" +
    "\007\175\014\111\015\102\016\104\017\076\020\074\021" +
    "\103\022\113\023\110\024\105\025\077\026\100\027\106" +
    "\030\075\031\107\033\112\001\002\000\116\002\uffa6\003" +
    "\uffa6\004\uffa6\007\uffa6\011\uffa6\012\uffa6\014\uffa6\015\uffa6" +
    "\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\033\uffa6" +
    "\034\uffa6\036\uffa6\037\uffa6\060\uffa6\061\uffa6\062\uffa6\063" +
    "\uffa6\065\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6" +
    "\074\uffa6\075\uffa6\076\uffa6\077\uffa6\001\002\000\116\002" +
    "\uffca\003\uffca\004\uffca\007\uffca\011\uffca\012\uffca\014\uffca" +
    "\015\uffca\016\104\017\076\020\uffca\021\103\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\033\uffca\034\uffca\036\uffca\037\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\065\uffca\067\uffca\070\uffca\071\uffca\072\uffca" +
    "\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\001\002\000" +
    "\060\006\061\015\054\032\046\035\057\036\062\040\066" +
    "\041\060\042\050\043\055\044\043\045\045\046\041\047" +
    "\071\050\051\051\063\052\053\053\070\054\044\055\065" +
    "\056\047\057\056\064\042\100\067\001\002\000\042\007" +
    "\201\014\111\015\102\016\104\017\076\020\074\021\103" +
    "\022\113\023\110\024\105\025\077\026\100\027\106\030" +
    "\075\031\107\033\112\001\002\000\116\002\uffad\003\uffad" +
    "\004\uffad\007\uffad\011\uffad\012\uffad\014\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\033\uffad\034" +
    "\uffad\036\uffad\037\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\065\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074" +
    "\uffad\075\uffad\076\uffad\077\uffad\001\002\000\060\006\061" +
    "\015\054\032\046\035\057\036\062\040\066\041\060\042" +
    "\050\043\055\044\043\045\045\046\041\047\071\050\051" +
    "\051\063\052\053\053\070\054\044\055\065\056\047\057" +
    "\056\064\042\100\067\001\002\000\042\007\204\014\111" +
    "\015\102\016\104\017\076\020\074\021\103\022\113\023" +
    "\110\024\105\025\077\026\100\027\106\030\075\031\107" +
    "\033\112\001\002\000\004\005\205\001\002\000\034\003" +
    "\030\036\023\060\010\061\022\062\024\063\006\065\015" +
    "\067\005\070\020\071\033\073\026\074\004\075\012\001" +
    "\002\000\036\003\030\004\210\036\023\060\010\061\022" +
    "\062\024\063\006\065\015\067\005\070\020\071\033\073" +
    "\026\074\004\075\012\001\002\000\036\003\uffdc\004\uffdc" +
    "\036\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\065\uffdc\067" +
    "\uffdc\070\uffdc\071\uffdc\073\uffdc\074\uffdc\075\uffdc\001\002" +
    "\000\044\002\uffe8\003\uffe8\004\uffe8\036\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\065\uffe8\067\uffe8\070\uffe8\071\uffe8" +
    "\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\001\002\000" +
    "\036\003\uffdd\004\uffdd\036\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\063\uffdd\065\uffdd\067\uffdd\070\uffdd\071\uffdd\073\uffdd\074" +
    "\uffdd\075\uffdd\001\002\000\060\006\061\015\054\032\046" +
    "\035\057\036\062\040\066\041\060\042\050\043\055\044" +
    "\043\045\045\046\041\047\071\050\051\051\063\052\053" +
    "\053\070\054\044\055\065\056\047\057\056\064\042\100" +
    "\067\001\002\000\042\007\214\014\111\015\102\016\104" +
    "\017\076\020\074\021\103\022\113\023\110\024\105\025" +
    "\077\026\100\027\106\030\075\031\107\033\112\001\002" +
    "\000\116\002\uffaf\003\uffaf\004\uffaf\007\uffaf\011\uffaf\012" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\033\uffaf\034\uffaf\036\uffaf\037\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\063\uffaf\065\uffaf\067\uffaf\070\uffaf\071" +
    "\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf" +
    "\001\002\000\060\006\061\015\054\032\046\035\057\036" +
    "\062\040\066\041\060\042\050\043\055\044\043\045\045" +
    "\046\041\047\071\050\051\051\063\052\053\053\070\054" +
    "\044\055\065\056\047\057\056\064\042\100\067\001\002" +
    "\000\044\007\220\014\111\015\102\016\104\017\076\020" +
    "\074\021\103\022\113\023\110\024\105\025\077\026\100" +
    "\027\106\030\075\031\107\033\112\037\217\001\002\000" +
    "\060\006\061\015\054\032\046\035\057\036\062\040\066" +
    "\041\060\042\050\043\055\044\043\045\045\046\041\047" +
    "\071\050\051\051\063\052\053\053\070\054\044\055\065" +
    "\056\047\057\056\064\042\100\067\001\002\000\116\002" +
    "\uffa9\003\uffa9\004\uffa9\007\uffa9\011\uffa9\012\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023" +
    "\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\033\uffa9\034\uffa9\036\uffa9\037\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\065\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9" +
    "\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\001\002\000" +
    "\042\007\222\014\111\015\102\016\104\017\076\020\074" +
    "\021\103\022\113\023\110\024\105\025\077\026\100\027" +
    "\106\030\075\031\107\033\112\001\002\000\116\002\uffa8" +
    "\003\uffa8\004\uffa8\007\uffa8\011\uffa8\012\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\033" +
    "\uffa8\034\uffa8\036\uffa8\037\uffa8\060\uffa8\061\uffa8\062\uffa8" +
    "\063\uffa8\065\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073" +
    "\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\001\002\000\116" +
    "\002\uffcb\003\uffcb\004\uffcb\007\uffcb\011\uffcb\012\uffcb\014" +
    "\111\015\102\016\104\017\076\020\074\021\103\022\113" +
    "\023\110\024\105\025\077\026\100\027\106\030\075\031" +
    "\107\033\112\034\uffcb\036\uffcb\037\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\065\uffcb\067\uffcb\070\uffcb\071\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\001\002" +
    "\000\060\006\061\015\054\032\046\035\057\036\062\040" +
    "\066\041\060\042\050\043\055\044\043\045\045\046\041" +
    "\047\071\050\051\051\063\052\053\053\070\054\044\055" +
    "\065\056\047\057\056\064\042\100\067\001\002\000\042" +
    "\007\226\014\111\015\102\016\104\017\076\020\074\021" +
    "\103\022\113\023\110\024\105\025\077\026\100\027\106" +
    "\030\075\031\107\033\112\001\002\000\116\002\uffb2\003" +
    "\uffb2\004\uffb2\007\uffb2\011\uffb2\012\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\033\uffb2" +
    "\034\uffb2\036\uffb2\037\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\065\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2" +
    "\074\uffb2\075\uffb2\076\uffb2\077\uffb2\001\002\000\060\006" +
    "\061\015\054\032\046\035\057\036\062\040\066\041\060" +
    "\042\050\043\055\044\043\045\045\046\041\047\071\050" +
    "\051\051\063\052\053\053\070\054\044\055\065\056\047" +
    "\057\056\064\042\100\067\001\002\000\042\007\231\014" +
    "\111\015\102\016\104\017\076\020\074\021\103\022\113" +
    "\023\110\024\105\025\077\026\100\027\106\030\075\031" +
    "\107\033\112\001\002\000\116\002\uffb3\003\uffb3\004\uffb3" +
    "\007\uffb3\011\uffb3\012\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\036" +
    "\uffb3\037\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\065\uffb3" +
    "\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075" +
    "\uffb3\076\uffb3\077\uffb3\001\002\000\060\006\061\015\054" +
    "\032\046\035\057\036\062\040\066\041\060\042\050\043" +
    "\055\044\043\045\045\046\041\047\071\050\051\051\063" +
    "\052\053\053\070\054\044\055\065\056\047\057\056\064" +
    "\042\100\067\001\002\000\042\007\234\014\111\015\102" +
    "\016\104\017\076\020\074\021\103\022\113\023\110\024" +
    "\105\025\077\026\100\027\106\030\075\031\107\033\112" +
    "\001\002\000\116\002\uffb1\003\uffb1\004\uffb1\007\uffb1\011" +
    "\uffb1\012\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\036\uffb1\037\uffb1" +
    "\060\uffb1\061\uffb1\062\uffb1\063\uffb1\065\uffb1\067\uffb1\070" +
    "\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1" +
    "\077\uffb1\001\002\000\044\002\ufff2\003\ufff2\004\ufff2\036" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\065\ufff2\067\ufff2" +
    "\070\ufff2\071\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077" +
    "\ufff2\001\002\000\044\002\uffea\003\uffea\004\uffea\036\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\065\uffea\067\uffea\070" +
    "\uffea\071\uffea\073\uffea\074\uffea\075\uffea\076\uffea\077\uffea" +
    "\001\002\000\044\002\uffd1\003\uffd1\004\uffd1\036\uffd1\060" +
    "\uffd1\061\uffd1\062\uffd1\063\uffd1\065\uffd1\067\uffd1\070\uffd1" +
    "\071\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\001" +
    "\002\000\004\036\241\001\002\000\004\037\242\001\002" +
    "\000\004\036\243\001\002\000\004\037\244\001\002\000" +
    "\004\036\245\001\002\000\004\037\246\001\002\000\004" +
    "\036\247\001\002\000\004\037\250\001\002\000\004\036" +
    "\251\001\002\000\004\007\252\001\002\000\046\002\uffd0" +
    "\003\uffd0\004\uffd0\012\237\036\uffd0\060\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\065\uffd0\067\uffd0\070\uffd0\071\uffd0\073\uffd0" +
    "\074\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002\000\044\002" +
    "\ufff0\003\ufff0\004\ufff0\036\ufff0\060\ufff0\061\ufff0\062\ufff0" +
    "\063\ufff0\065\ufff0\067\ufff0\070\ufff0\071\ufff0\073\ufff0\074" +
    "\ufff0\075\ufff0\076\ufff0\077\ufff0\001\002\000\060\006\061" +
    "\015\054\032\046\035\057\036\062\040\066\041\060\042" +
    "\050\043\055\044\043\045\045\046\041\047\071\050\051" +
    "\051\063\052\053\053\070\054\044\055\065\056\047\057" +
    "\056\064\042\100\067\001\002\000\104\002\uffd0\003\uffd0" +
    "\004\uffd0\012\237\014\111\015\102\016\104\017\076\020" +
    "\074\021\103\022\113\023\110\024\105\025\077\026\100" +
    "\027\106\030\075\031\107\033\112\036\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\065\uffd0\067\uffd0\070\uffd0\071\uffd0" +
    "\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002\000" +
    "\044\002\uffd2\003\uffd2\004\uffd2\036\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\065\uffd2\067\uffd2\070\uffd2\071\uffd2\073" +
    "\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\001\002\000\004" +
    "\036\260\001\002\000\004\037\261\001\002\000\004\036" +
    "\262\001\002\000\004\037\263\001\002\000\004\036\264" +
    "\001\002\000\004\007\265\001\002\000\046\002\uffd0\003" +
    "\uffd0\004\uffd0\012\237\036\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\065\uffd0\067\uffd0\070\uffd0\071\uffd0\073\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002\000\044\002\ufff1" +
    "\003\ufff1\004\ufff1\036\ufff1\060\ufff1\061\ufff1\062\ufff1\063" +
    "\ufff1\065\ufff1\067\ufff1\070\ufff1\071\ufff1\073\ufff1\074\ufff1" +
    "\075\ufff1\076\ufff1\077\ufff1\001\002\000\034\003\030\036" +
    "\023\060\010\061\022\062\024\063\006\065\015\067\005" +
    "\070\020\071\033\073\026\074\004\075\012\001\002\000" +
    "\036\003\030\004\271\036\023\060\010\061\022\062\024" +
    "\063\006\065\015\067\005\070\020\071\033\073\026\074" +
    "\004\075\012\001\002\000\004\067\272\001\002\000\004" +
    "\006\273\001\002\000\060\006\061\015\054\032\046\035" +
    "\057\036\062\040\066\041\060\042\050\043\055\044\043" +
    "\045\045\046\041\047\071\050\051\051\063\052\053\053" +
    "\070\054\044\055\065\056\047\057\056\064\042\100\067" +
    "\001\002\000\042\007\275\014\111\015\102\016\104\017" +
    "\076\020\074\021\103\022\113\023\110\024\105\025\077" +
    "\026\100\027\106\030\075\031\107\033\112\001\002\000" +
    "\046\002\uffd0\003\uffd0\004\uffd0\012\237\036\uffd0\060\uffd0" +
    "\061\uffd0\062\uffd0\063\uffd0\065\uffd0\067\uffd0\070\uffd0\071" +
    "\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002" +
    "\000\044\002\uffe7\003\uffe7\004\uffe7\036\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\065\uffe7\067\uffe7\070\uffe7\071\uffe7" +
    "\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\001\002\000" +
    "\060\006\061\015\054\032\046\035\057\036\062\040\066" +
    "\041\060\042\050\043\055\044\043\045\045\046\041\047" +
    "\071\050\051\051\063\052\053\053\070\054\044\055\065" +
    "\056\047\057\056\064\042\100\067\001\002\000\042\007" +
    "\301\014\111\015\102\016\104\017\076\020\074\021\103" +
    "\022\113\023\110\024\105\025\077\026\100\027\106\030" +
    "\075\031\107\033\112\001\002\000\004\005\302\001\002" +
    "\000\034\003\030\036\023\060\010\061\022\062\024\063" +
    "\006\065\015\067\005\070\020\071\033\073\026\074\004" +
    "\075\012\001\002\000\036\003\030\004\304\036\023\060" +
    "\010\061\022\062\024\063\006\065\015\067\005\070\020" +
    "\071\033\073\026\074\004\075\012\001\002\000\046\002" +
    "\uffe3\003\uffe3\004\uffe3\036\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\065\uffe3\066\305\067\uffe3\070\uffe3\071\uffe3\073" +
    "\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\001\002\000\006" +
    "\005\326\065\327\001\002\000\046\002\uffe1\003\uffe1\004" +
    "\uffe1\036\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\065\uffe1" +
    "\066\307\067\uffe1\070\uffe1\071\uffe1\073\uffe1\074\uffe1\075" +
    "\uffe1\076\uffe1\077\uffe1\001\002\000\006\005\310\065\311" +
    "\001\002\000\034\003\030\036\023\060\010\061\022\062" +
    "\024\063\006\065\015\067\005\070\020\071\033\073\026" +
    "\074\004\075\012\001\002\000\004\006\312\001\002\000" +
    "\060\006\061\015\054\032\046\035\057\036\062\040\066" +
    "\041\060\042\050\043\055\044\043\045\045\046\041\047" +
    "\071\050\051\051\063\052\053\053\070\054\044\055\065" +
    "\056\047\057\056\064\042\100\067\001\002\000\042\007" +
    "\314\014\111\015\102\016\104\017\076\020\074\021\103" +
    "\022\113\023\110\024\105\025\077\026\100\027\106\030" +
    "\075\031\107\033\112\001\002\000\004\005\315\001\002" +
    "\000\034\003\030\036\023\060\010\061\022\062\024\063" +
    "\006\065\015\067\005\070\020\071\033\073\026\074\004" +
    "\075\012\001\002\000\036\003\uffd8\004\uffd8\036\uffd8\060" +
    "\uffd8\061\uffd8\062\uffd8\063\uffd8\065\uffd8\067\uffd8\070\uffd8" +
    "\071\uffd8\073\uffd8\074\uffd8\075\uffd8\001\002\000\036\003" +
    "\030\004\320\036\023\060\010\061\022\062\024\063\006" +
    "\065\015\067\005\070\020\071\033\073\026\074\004\075" +
    "\012\001\002\000\046\002\uffdf\003\uffdf\004\uffdf\036\uffdf" +
    "\060\uffdf\061\uffdf\062\uffdf\063\uffdf\065\uffdf\066\uffdf\067" +
    "\uffdf\070\uffdf\071\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf" +
    "\077\uffdf\001\002\000\036\003\uffd9\004\uffd9\036\uffd9\060" +
    "\uffd9\061\uffd9\062\uffd9\063\uffd9\065\uffd9\067\uffd9\070\uffd9" +
    "\071\uffd9\073\uffd9\074\uffd9\075\uffd9\001\002\000\036\003" +
    "\uffda\004\uffda\036\uffda\060\uffda\061\uffda\062\uffda\063\uffda" +
    "\065\uffda\067\uffda\070\uffda\071\uffda\073\uffda\074\uffda\075" +
    "\uffda\001\002\000\036\003\030\004\324\036\023\060\010" +
    "\061\022\062\024\063\006\065\015\067\005\070\020\071" +
    "\033\073\026\074\004\075\012\001\002\000\044\002\uffe0" +
    "\003\uffe0\004\uffe0\036\uffe0\060\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\065\uffe0\067\uffe0\070\uffe0\071\uffe0\073\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\077\uffe0\001\002\000\036\003\uffdb\004" +
    "\uffdb\036\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\065\uffdb" +
    "\067\uffdb\070\uffdb\071\uffdb\073\uffdb\074\uffdb\075\uffdb\001" +
    "\002\000\034\003\030\036\023\060\010\061\022\062\024" +
    "\063\006\065\015\067\005\070\020\071\033\073\026\074" +
    "\004\075\012\001\002\000\004\006\330\001\002\000\060" +
    "\006\061\015\054\032\046\035\057\036\062\040\066\041" +
    "\060\042\050\043\055\044\043\045\045\046\041\047\071" +
    "\050\051\051\063\052\053\053\070\054\044\055\065\056" +
    "\047\057\056\064\042\100\067\001\002\000\042\007\332" +
    "\014\111\015\102\016\104\017\076\020\074\021\103\022" +
    "\113\023\110\024\105\025\077\026\100\027\106\030\075" +
    "\031\107\033\112\001\002\000\004\005\333\001\002\000" +
    "\034\003\030\036\023\060\010\061\022\062\024\063\006" +
    "\065\015\067\005\070\020\071\033\073\026\074\004\075" +
    "\012\001\002\000\036\003\030\004\335\036\023\060\010" +
    "\061\022\062\024\063\006\065\015\067\005\070\020\071" +
    "\033\073\026\074\004\075\012\001\002\000\046\002\uffde" +
    "\003\uffde\004\uffde\036\uffde\060\uffde\061\uffde\062\uffde\063" +
    "\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde\073\uffde" +
    "\074\uffde\075\uffde\076\uffde\077\uffde\001\002\000\036\003" +
    "\030\004\337\036\023\060\010\061\022\062\024\063\006" +
    "\065\015\067\005\070\020\071\033\073\026\074\004\075" +
    "\012\001\002\000\044\002\uffe2\003\uffe2\004\uffe2\036\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\065\uffe2\067\uffe2\070" +
    "\uffe2\071\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2" +
    "\001\002\000\060\006\061\015\054\032\046\035\057\036" +
    "\062\040\066\041\060\042\050\043\055\044\043\045\045" +
    "\046\041\047\071\050\051\051\063\052\053\053\070\054" +
    "\044\055\065\056\047\057\056\064\042\100\067\001\002" +
    "\000\042\007\342\014\111\015\102\016\104\017\076\020" +
    "\074\021\103\022\113\023\110\024\105\025\077\026\100" +
    "\027\106\030\075\031\107\033\112\001\002\000\004\005" +
    "\343\001\002\000\004\076\345\001\002\000\010\004\352" +
    "\076\354\077\353\001\002\000\060\006\061\015\054\032" +
    "\046\035\057\036\062\040\066\041\060\042\050\043\055" +
    "\044\043\045\045\046\041\047\071\050\051\051\063\052" +
    "\053\053\070\054\044\055\065\056\047\057\056\064\042" +
    "\100\067\001\002\000\042\014\111\015\102\016\104\017" +
    "\076\020\074\021\103\022\113\023\110\024\105\025\077" +
    "\026\100\027\106\030\075\031\107\033\112\034\347\001" +
    "\002\000\034\003\030\036\023\060\010\061\022\062\024" +
    "\063\006\065\015\067\005\070\020\071\033\073\026\074" +
    "\004\075\012\001\002\000\042\003\030\004\uffeb\036\023" +
    "\060\010\061\022\062\024\063\006\065\015\067\005\070" +
    "\020\071\033\073\026\074\004\075\012\076\uffeb\077\uffeb" +
    "\001\002\000\044\002\uffff\003\uffff\004\uffff\036\uffff\060" +
    "\uffff\061\uffff\062\uffff\063\uffff\065\uffff\067\uffff\070\uffff" +
    "\071\uffff\073\uffff\074\uffff\075\uffff\076\uffff\077\uffff\001" +
    "\002\000\044\002\uffee\003\uffee\004\uffee\036\uffee\060\uffee" +
    "\061\uffee\062\uffee\063\uffee\065\uffee\067\uffee\070\uffee\071" +
    "\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\001\002" +
    "\000\004\034\360\001\002\000\060\006\061\015\054\032" +
    "\046\035\057\036\062\040\066\041\060\042\050\043\055" +
    "\044\043\045\045\046\041\047\071\050\051\051\063\052" +
    "\053\053\070\054\044\055\065\056\047\057\056\064\042" +
    "\100\067\001\002\000\042\014\111\015\102\016\104\017" +
    "\076\020\074\021\103\022\113\023\110\024\105\025\077" +
    "\026\100\027\106\030\075\031\107\033\112\034\356\001" +
    "\002\000\034\003\030\036\023\060\010\061\022\062\024" +
    "\063\006\065\015\067\005\070\020\071\033\073\026\074" +
    "\004\075\012\001\002\000\042\003\030\004\uffec\036\023" +
    "\060\010\061\022\062\024\063\006\065\015\067\005\070" +
    "\020\071\033\073\026\074\004\075\012\076\uffec\077\uffec" +
    "\001\002\000\034\003\030\036\023\060\010\061\022\062" +
    "\024\063\006\065\015\067\005\070\020\071\033\073\026" +
    "\074\004\075\012\001\002\000\036\003\030\004\362\036" +
    "\023\060\010\061\022\062\024\063\006\065\015\067\005" +
    "\070\020\071\033\073\026\074\004\075\012\001\002\000" +
    "\044\002\uffed\003\uffed\004\uffed\036\uffed\060\uffed\061\uffed" +
    "\062\uffed\063\uffed\065\uffed\067\uffed\070\uffed\071\uffed\073" +
    "\uffed\074\uffed\075\uffed\076\uffed\077\uffed\001\002\000\060" +
    "\006\061\015\054\032\046\035\057\036\062\040\066\041" +
    "\060\042\050\043\055\044\043\045\045\046\041\047\071" +
    "\050\051\051\063\052\053\053\070\054\044\055\065\056" +
    "\047\057\056\064\042\100\067\001\002\000\042\007\365" +
    "\014\111\015\102\016\104\017\076\020\074\021\103\022" +
    "\113\023\110\024\105\025\077\026\100\027\106\030\075" +
    "\031\107\033\112\001\002\000\046\002\uffd0\003\uffd0\004" +
    "\uffd0\012\237\036\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\065\uffd0\067\uffd0\070\uffd0\071\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\076\uffd0\077\uffd0\001\002\000\044\002\uffcf\003\uffcf" +
    "\004\uffcf\036\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\065" +
    "\uffcf\067\uffcf\070\uffcf\071\uffcf\073\uffcf\074\uffcf\075\uffcf" +
    "\076\uffcf\077\uffcf\001\002\000\004\036\370\001\002\000" +
    "\004\037\371\001\002\000\004\036\372\001\002\000\004" +
    "\037\373\001\002\000\004\036\374\001\002\000\004\007" +
    "\375\001\002\000\046\002\uffd0\003\uffd0\004\uffd0\012\237" +
    "\036\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\065\uffd0\067" +
    "\uffd0\070\uffd0\071\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0" +
    "\077\uffd0\001\002\000\044\002\uffef\003\uffef\004\uffef\036" +
    "\uffef\060\uffef\061\uffef\062\uffef\063\uffef\065\uffef\067\uffef" +
    "\070\uffef\071\uffef\073\uffef\074\uffef\075\uffef\076\uffef\077" +
    "\uffef\001\002\000\060\006\061\015\054\032\046\035\057" +
    "\036\062\040\066\041\060\042\050\043\055\044\043\045" +
    "\045\046\041\047\071\050\051\051\063\052\053\053\070" +
    "\054\044\055\065\056\047\057\056\064\042\100\067\001" +
    "\002\000\042\007\u0101\014\111\015\102\016\104\017\076" +
    "\020\074\021\103\022\113\023\110\024\105\025\077\026" +
    "\100\027\106\030\075\031\107\033\112\001\002\000\004" +
    "\005\u0102\001\002\000\034\003\030\036\023\060\010\061" +
    "\022\062\024\063\006\065\015\067\005\070\020\071\033" +
    "\073\026\074\004\075\012\001\002\000\036\003\uffe4\004" +
    "\uffe4\036\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\065\uffe4" +
    "\067\uffe4\070\uffe4\071\uffe4\073\uffe4\074\uffe4\075\uffe4\001" +
    "\002\000\036\003\030\004\u0105\036\023\060\010\061\022" +
    "\062\024\063\006\065\015\067\005\070\020\071\033\073" +
    "\026\074\004\075\012\001\002\000\044\002\uffe6\003\uffe6" +
    "\004\uffe6\036\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\065" +
    "\uffe6\067\uffe6\070\uffe6\071\uffe6\073\uffe6\074\uffe6\075\uffe6" +
    "\076\uffe6\077\uffe6\001\002\000\036\003\uffe5\004\uffe5\036" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\065\uffe5\067\uffe5" +
    "\070\uffe5\071\uffe5\073\uffe5\074\uffe5\075\uffe5\001\002\000" +
    "\044\002\uffe9\003\uffe9\004\uffe9\036\uffe9\060\uffe9\061\uffe9" +
    "\062\uffe9\063\uffe9\065\uffe9\067\uffe9\070\uffe9\071\uffe9\073" +
    "\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\036\002\035\003\010\004\006\007\012\010" +
    "\030\022\026\024\024\026\033\027\020\030\031\031\013" +
    "\032\015\034\034\036\016\001\001\000\004\011\u0106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\004\350\007\012\010\030\022" +
    "\026\024\024\026\033\027\020\030\031\031\013\032\015" +
    "\034\034\036\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\051\017\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\222\017\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\175" +
    "\017\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\165\016\142\017\063\001\001\000\002\001\001" +
    "\000\006\016\163\017\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\072\017\063\001\001\000\002\001\001" +
    "\000\006\016\135\017\063\001\001\000\006\016\134\017" +
    "\063\001\001\000\006\016\133\017\063\001\001\000\006" +
    "\016\132\017\063\001\001\000\006\016\131\017\063\001" +
    "\001\000\006\016\127\017\063\001\001\000\006\016\126" +
    "\017\063\001\001\000\006\016\125\017\063\001\001\000" +
    "\006\016\124\017\063\001\001\000\006\016\123\017\063" +
    "\001\001\000\006\016\122\017\063\001\001\000\006\016" +
    "\121\017\063\001\001\000\006\016\120\017\063\001\001" +
    "\000\006\016\117\017\063\001\001\000\006\016\114\017" +
    "\063\001\001\000\006\016\113\017\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\116\017\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\137\017\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\143\016\142\017\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\146\017" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\150\017\063\001\001\000\002\001\001\000\006\016" +
    "\153\017\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\156\017\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\161\017\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\170\017\063\001\001\000\002\001\001\000" +
    "\006\016\173\017\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\177\017\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\202\017\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\206\007\012\010\030\022\026" +
    "\023\205\024\024\026\033\027\020\030\031\031\013\032" +
    "\015\034\034\036\016\001\001\000\032\004\210\007\012" +
    "\010\030\022\026\024\024\026\033\027\020\030\031\031" +
    "\013\032\015\034\034\036\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\212\017" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\215\017\063\001\001\000\002\001\001\000\006\016" +
    "\220\017\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\224\017" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\227\017\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\232\017\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\252\001\001\000\002\001" +
    "\001\000\006\016\254\017\063\001\001\000\004\011\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\265\001\001\000\002\001" +
    "\001\000\034\004\206\007\012\010\030\022\026\023\267" +
    "\024\024\026\033\027\020\030\031\031\013\032\015\034" +
    "\034\036\016\001\001\000\032\004\210\007\012\010\030" +
    "\022\026\024\024\026\033\027\020\030\031\031\013\032" +
    "\015\034\034\036\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\273\017\063\001\001\000\002\001" +
    "\001\000\004\011\275\001\001\000\002\001\001\000\006" +
    "\016\277\017\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\206\007\012\010\030\022\026\023\302" +
    "\024\024\026\033\027\020\030\031\031\013\032\015\034" +
    "\034\036\016\001\001\000\032\004\210\007\012\010\030" +
    "\022\026\024\024\026\033\027\020\030\031\031\013\032" +
    "\015\034\034\036\016\001\001\000\004\025\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\321\007\012\010\030\021\322\022\026\024\024" +
    "\026\033\027\020\030\031\031\013\032\015\034\034\036" +
    "\016\001\001\000\002\001\001\000\006\016\312\017\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\315\007\012\010\030\020\316\022\026\024\024\026\033" +
    "\027\020\030\031\031\013\032\015\034\034\036\016\001" +
    "\001\000\002\001\001\000\032\004\320\007\012\010\030" +
    "\022\026\024\024\026\033\027\020\030\031\031\013\032" +
    "\015\034\034\036\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\324\007\012\010" +
    "\030\022\026\024\024\026\033\027\020\030\031\031\013" +
    "\032\015\034\034\036\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\315\007\012\010\030\020\335" +
    "\022\026\024\024\026\033\027\020\030\031\031\013\032" +
    "\015\034\034\036\016\001\001\000\002\001\001\000\006" +
    "\016\330\017\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\315\007\012\010\030\020\333\022\026" +
    "\024\024\026\033\027\020\030\031\031\013\032\015\034" +
    "\034\036\016\001\001\000\032\004\320\007\012\010\030" +
    "\022\026\024\024\026\033\027\020\030\031\031\013\032" +
    "\015\034\034\036\016\001\001\000\002\001\001\000\032" +
    "\004\320\007\012\010\030\022\026\024\024\026\033\027" +
    "\020\030\031\031\013\032\015\034\034\036\016\001\001" +
    "\000\002\001\001\000\006\016\340\017\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\343\001\001" +
    "\000\002\001\001\000\006\016\345\017\063\001\001\000" +
    "\002\001\001\000\034\003\347\004\006\007\012\010\030" +
    "\022\026\024\024\026\033\027\020\030\031\031\013\032" +
    "\015\034\034\036\016\001\001\000\032\004\350\007\012" +
    "\010\030\022\026\024\024\026\033\027\020\030\031\031" +
    "\013\032\015\034\034\036\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\354\017" +
    "\063\001\001\000\002\001\001\000\034\003\356\004\006" +
    "\007\012\010\030\022\026\024\024\026\033\027\020\030" +
    "\031\031\013\032\015\034\034\036\016\001\001\000\032" +
    "\004\350\007\012\010\030\022\026\024\024\026\033\027" +
    "\020\030\031\031\013\032\015\034\034\036\016\001\001" +
    "\000\034\003\360\004\006\007\012\010\030\022\026\024" +
    "\024\026\033\027\020\030\031\031\013\032\015\034\034" +
    "\036\016\001\001\000\032\004\350\007\012\010\030\022" +
    "\026\024\024\026\033\027\020\030\031\031\013\032\015" +
    "\034\034\036\016\001\001\000\002\001\001\000\006\016" +
    "\363\017\063\001\001\000\002\001\001\000\004\011\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\375\001\001\000\002\001" +
    "\001\000\006\016\377\017\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\u0102\007\012\010\030\022" +
    "\026\024\024\026\033\027\020\030\031\031\013\032\015" +
    "\033\u0103\034\034\036\016\001\001\000\002\001\001\000" +
    "\032\004\u0105\007\012\010\030\022\026\024\024\026\033" +
    "\027\020\030\031\031\013\032\015\034\034\036\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public NodoAbstracto Raiz;
    public ArrayList <NodoAbstracto> Expresiones = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones2 = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones3 = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones4 = new ArrayList();
    public ArrayList <NodoAbstracto> ExpresionesWhile = new ArrayList();
    public String Lado1, Lado2 = "";
    public String Manejor_Error = "";
     public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila+1);
        System.out.println("\t\tColumna: "+columna);

         TError ERRORES = new TError(lexema,fila,columna,"Sintactico", "Sentencia incorrecta" );
         TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
       
        
        
    }

//Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       // TERROR ERRORES = new TERROR(lexema,"Error Sintactico","Caracter no esperado",fila,columna);
       // TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
     
    }
    
    public void AgregarElmentoALista(NodoAbstracto Nodo, NodoAbstracto Elemento){
        Nodo.Expresiones.add(Elemento);
    }
    public void semantic(String msg, Object obj) {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analisis_Sintactico$actions {



  private final Analisis_Sintactico parser;

  /** Constructor */
  CUP$Analisis_Sintactico$actions(Analisis_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action_part00000000(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto start_val = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico$parser.done_parsing();
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("INICIO");
                        nuevo.Hijos.add(nod);
                        parser.Raiz = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        //NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        //nuevo.Hijos.add(nodsentencias);
                        //nuevo.Hijos.add(nod);
                        //RESULT = nuevo;
                        
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARARASIGNAR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        RESULT=nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IMPRIM 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        //System.out.println("ID LINEA : SENTENCIA IMPRIMIR" + nodleft + " Columna " + nodright);
                        RESULT=nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= ELIF 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= ELIFELSE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= ELWHILE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= ELDOWHILE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= ELFOR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= ELBREAK 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= ELCONTINUE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= ELSWITCH 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= GRAFICAS 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= error puntoycoma 
            {
              NodoAbstracto RESULT =null;
		
                         NodoAbstracto nuevo = new ERRORES("Error");
                         NodoAbstracto nuevoid = new Nodo("#Error En alguna mulada XD");
                         nuevo.Cadena   = "#Error Semantico Encontrado ver reporte";
                         RESULT= nuevo; 
                     
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GRAFICAS ::= pie parentesisabrir id coma id coma id parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String valores = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String vector = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                NodoAbstracto nuevo = new pie("PIE");
                NodoAbstracto Datos = new Nodo(valores);
                NodoAbstracto Vector = new Nodo(vector);
                NodoAbstracto Titulo = new Nodo(titulo);
                nuevo.Hijos.add(Datos);
                nuevo.Hijos.add(Vector);
                nuevo.Hijos.add(Titulo);
                nuevo.columna = valoresleft;
                nuevo.linea = valoresright;
                RESULT = nuevo;            

        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAS",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GRAFICAS ::= barplot parentesisabrir id coma id coma id coma id coma id parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		String vector = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int cuatroleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int cuatroright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String cuatro = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int cincoleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cincoright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String cinco = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
         NodoAbstracto nuevo = new barras("BARRAS");
                NodoAbstracto Datos = new Nodo(nombre);
                NodoAbstracto Vector = new Nodo(vector);
                NodoAbstracto Titulo = new Nodo(titulo);
                NodoAbstracto Cuatro = new Nodo(cuatro);
                NodoAbstracto Cinco = new Nodo(cinco);
                nuevo.Hijos.add(Datos);
                nuevo.Hijos.add(Vector);
                nuevo.Hijos.add(Titulo);
                nuevo.Hijos.add(Cuatro);
                nuevo.Hijos.add(Cinco);
                nuevo.columna = nombreleft;
                nuevo.linea = nombreright;
                RESULT = nuevo;    
    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAS",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GRAFICAS ::= hist parentesisabrir id coma id coma id parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String vector = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                NodoAbstracto nuevo = new histograma("HISTOGRAMA");
                NodoAbstracto Datos = new Nodo(nombre);
                NodoAbstracto Vector = new Nodo(vector);
                NodoAbstracto Titulo = new Nodo(titulo);
                nuevo.Hijos.add(Datos);
                nuevo.Hijos.add(Vector);
                nuevo.Hijos.add(Titulo);
                nuevo.columna = nombreleft;
                nuevo.linea = nombreright;
                RESULT = nuevo;   
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAS",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELSWITCH ::= SWITCH parentesisabrir EXP parentesiscerrar llaveabrir EXPRESIONESSWITCH llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Switch("SWITCH");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                RESULT = nuevo;
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELSWITCH",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELSWITCH ::= SWITCH parentesisabrir EXP parentesiscerrar llaveabrir EXPRESIONESSWITCH DEF DOSP SENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentdefleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentdefright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentdef = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Switch("SWITCH");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                nuevo.Hijos.add(sentdef);
                RESULT = nuevo;
            
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELSWITCH",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESIONESSWITCH ::= EXPRESIONESSWITCH CASE EXP DOSP SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("CASE");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(sentencias);
                        nodsentencias.Hijos.add(nuevo);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONESSWITCH",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESIONESSWITCH ::= CASE EXP DOSP SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("CASE");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(sentencias);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONESSWITCH",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELBREAK ::= BREAK FINAL 
            {
              NodoAbstracto RESULT =null;
		
             NodoAbstracto nuevo = new Break("Break");
             RESULT= nuevo; 
          
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELBREAK",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELCONTINUE ::= CONTINUE FINAL 
            {
              NodoAbstracto RESULT =null;
		
            NodoAbstracto nuevo = new Continue("Break");
             RESULT= nuevo; 
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELCONTINUE",24, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELFOR ::= FOR parentesisabrir EXP IN EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new For("DoWhile");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(exp2);
            nuevo.Hijos.add(sentencias);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;
    
         
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELFOR",22, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELDOWHILE ::= DO llaveabrir LISTASENTENCIAS llavecerrar WHILE parentesisabrir EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
           NodoAbstracto nuevo = new DoWhile("DoWhile");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;


              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELDOWHILE",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELWHILE ::= WHILE parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIASwhile llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new While("WHILE");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< ExpresionesWhile.size();i++){
                           nuevo.Expresiones.add(ExpresionesWhile.get(i));
                        }
            ExpresionesWhile.clear();
            RESULT = nuevo;
    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELWHILE",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTASENTENCIASwhile ::= LISTASENTENCIASwhile SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                         ExpresionesWhile.add(nod);
                       // Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIASwhile",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTASENTENCIASwhile ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        ExpresionesWhile.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIASwhile",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIF("IF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar ELSE llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIF("IF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            for(int i = 0; i< Expresiones2.size();i++){
                           nuevo.Expresiones2.add(Expresiones2.get(i));
                        }
            Expresiones2.clear();
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar LISTAELSES 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
            NodoAbstracto nuevo = new SentenciaIFElseIF("IFelseIF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar LISTAELSES ELSE llaveabrir LISTASENTENCIAS3 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentaleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentaright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto senta = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIFElseIF("IFelseIF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.Hijos.add(senta);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;            
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTAELSES ::= LISTAELSES ELSE IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int noditoleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int noditoright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		NodoAbstracto nodito = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Nodo("ELSEIF1");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                nodito.Hijos.add(nuevo);
                RESULT = nodito;
              
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAELSES",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTAELSES ::= ELSE IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Nodo("ELSEIF2");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                RESULT = nuevo;
              
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAELSES",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTASENTENCIAS ::= LISTASENTENCIAS SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        Expresiones.add(nod);
                       // Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTASENTENCIAS ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTASENTENCIAS3 ::= LISTASENTENCIAS3 SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        
                        Expresiones4.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS3",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTASENTENCIAS3 ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        Expresiones4.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS3",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTASENTENCIAS2 ::= LISTASENTENCIAS2 SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        //Expresiones.add(nod);
                        Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS2",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTASENTENCIAS2 ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        //Expresiones.add(nod);
                        Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS2",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MODVECTOR ::= id corcheteabrir EXP corchetecerrar igual EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MODVECTOR",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MODVECTOR ::= id corcheteabrir EXP corchetecerrar igual FuncionC EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MODVECTOR",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARARVECTORC ::= id igual FuncionC LISTAEXPRESIONES parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int Listaleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int Listaright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto Lista = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                        NodoAbstracto nuevo = new FuncionC("CASTEAR");
                        NodoAbstracto nuevoid = new Nodo(valor);
                        nuevo.Hijos.add(nuevoid);
                        for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
                        Expresiones.clear();
                        nuevo.Hijos.add(Lista);
                        Manejor_Error = "Error al crear vector" + valor;
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVECTORC",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTAEXPRESIONES ::= LISTAEXPRESIONES coma EXP 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                       // NodoAbstracto nuevo = new Nodo("EXP");
                       // nuevo.Hijos.add(nodsentencias);
                       // nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                        Expresiones2.add(nod);
                        Expresiones3.add(nod);
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        //RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTAEXPRESIONES ::= EXP 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        //NodoAbstracto nuevo = new Nodo("EXP");
                        //nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                        Expresiones2.add(nod);
                        Expresiones3.add(nod);
                        //RESULT = nuevo;
                        NodoAbstracto nuevo = new Nodo("EXP");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARARASIGNAR ::= id igual EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new DeclararAsignar("DECLARARASIGNAR");
                        NodoAbstracto nuevoid = new Nodo(valor);
                        nuevo.Hijos.add(nuevoid);
                        nuevo.Hijos.add(exp1);
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                        // for(int i = 0; i< Expresiones.size();i++){
                        //   nuevo.Expresiones.add(Expresiones.get(i));
                       // }
                       // Expresiones.clear();
                       // for(int i = 0; i< Expresiones3.size();i++){
                       //    nuevo.Expresiones2.add(Expresiones3.get(i));
                       // }
                       // Expresiones3.clear();
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARASIGNAR",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FINAL ::= puntoycoma 
            {
              NodoAbstracto RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FINAL ::= 
            {
              NodoAbstracto RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMPRIM ::= imprimir parentesisabrir EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                        NodoAbstracto nuevo = new Imprimir("IMPRIMIR");
                        nuevo.Hijos.add(exp1);
                         Manejor_Error = "Error al imprimir";
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIM",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= LISTA parentesisabrir LISTAEXPRESIONES parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int valo4left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valo4right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valo4 = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int listaValoresleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int listaValoresright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto listaValores = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Lista");
                        NodoAbstracto nuevo2 = new Nodo("list(");
                        nuevo.Hijos.add(nuevo2);
                        nuevo.Hijos.add(listaValores);
                        nuevo.TipoDato = "Lista";
                        
                        RESULT = nuevo;

                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= FuncionC LISTAEXPRESIONES parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int valo4left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int valo4right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object valo4 = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int listaValoresleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int listaValoresright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto listaValores = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("FuncionC");
                        NodoAbstracto nuevo2 = new Nodo("c(");
                        nuevo.Hijos.add(nuevo2);
                        nuevo.Hijos.add(listaValores);
                        nuevo.TipoDato = "FuncionC";
                        //for(int i = 0; i< Expresiones2.size();i++){
                        //   nuevo.Expresiones2.add(Expresiones2.get(i));
                       // }
                       // Expresiones2.clear();
                        RESULT = nuevo;

                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= EXP PREGUNTAC EXP DOSP EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp3 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Ternario("EXP");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(exp2);  
                        nuevo.Hijos.add(exp3);
                         Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= NOT EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new NOT("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= menos EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Negativo("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= EXP mas EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("+");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= EXP menos EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                    
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= EXP por EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("*");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= EXP div EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("/");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                      
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= EXP modulo EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("%%");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2); 
                        Manejor_Error = "Error en expresion";                   
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= EXP potencia EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("^");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);   
                        Manejor_Error = "Error en expresion";                 
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= EXP igualdad EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("==");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= EXP Noigualdad EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= EXP MayorQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXP MenorQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= EXP MayorIgualQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP MenorIgualQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP AND EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("&&");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";                      
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP OR EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("||");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        Manejor_Error = "Error en expresion";
                        RESULT = exp1;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= NUMERO 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        Manejor_Error = "Error en expresion";
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= id 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("id");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "id";
                        nuevo.Nombre = valor;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= nulo 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= id corcheteabrir EXP corchetecerrar 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto pos = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Vector");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(pos);
                        nuevo.TipoDato = "vector";
                        Manejor_Error = "Error en expresion";
                        //RESULT = nuevo;
                        //nuevo.id = Integer.parseInt(pos);
                        nuevo.columna = valorleft;
                        nuevo.linea = valorright;
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= cadena 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        valor =  valor.replaceAll("\"", "");
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= ttrue 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= tfalse 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= typeof parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("TypeOF");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= length parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Length");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= stringlength parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("StringLength");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= remove parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Remove");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= tolowercase parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("ToLowerCase");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= touppercase parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("ToUpperCase");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= trunk parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Trunk");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= round parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Round");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= mean parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mean");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(null);
                        nuevo.TipoDato = "decimal";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= mean parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int limiteleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int limiteright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto limite = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mean");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(limite);
                        nuevo.TipoDato = "decimal";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= median parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Median");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "median";
                        nuevo.Hijos.add(null);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= median parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp3 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Median");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "median";
                        nuevo.Hijos.add(exp3);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= mode parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mode");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(null);
                        nuevo.TipoDato = "mode";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= mode parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mode");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "mode";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NUMERO ::= entero 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Entero");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("NUMERO",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NUMERO ::= decimal 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Decimal");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "decimal";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("NUMERO",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analisis_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analisis_Sintactico$do_action_part00000000(
                               CUP$Analisis_Sintactico$act_num,
                               CUP$Analisis_Sintactico$parser,
                               CUP$Analisis_Sintactico$stack,
                               CUP$Analisis_Sintactico$top);
    }
}

}
