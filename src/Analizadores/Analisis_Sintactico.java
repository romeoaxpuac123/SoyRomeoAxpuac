
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import static Analizadores.IDE.TABLA_DE_ERRORES_SINTACTICOS;
import CodigoASTCUP.*;
import Codigo.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analisis_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analisis_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analisis_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\034" +
    "\011\000\002\034\014\000\002\035\007\000\002\035\006" +
    "\000\002\031\004\000\002\032\004\000\002\030\013\000" +
    "\002\027\013\000\002\026\011\000\002\033\004\000\002" +
    "\033\003\000\002\022\011\000\002\022\015\000\002\022" +
    "\012\000\002\022\016\000\002\025\013\000\002\025\012" +
    "\000\002\023\004\000\002\023\003\000\002\021\004\000" +
    "\002\021\003\000\002\020\004\000\002\020\003\000\002" +
    "\015\011\000\002\015\013\000\002\013\010\000\002\014" +
    "\005\000\002\014\003\000\002\007\006\000\002\011\003" +
    "\000\002\011\002\000\002\010\007\000\002\016\006\000" +
    "\002\016\005\000\002\016\007\000\002\016\004\000\002" +
    "\016\004\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\006" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\006\000\002\016\006\000\002\016\006\000\002" +
    "\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\026\003\024\036\020\050\007\052\013\054" +
    "\005\055\016\056\027\060\022\061\004\062\011\001\002" +
    "\000\040\002\uffd4\003\uffd4\004\uffd4\012\160\036\uffd4\050" +
    "\uffd4\052\uffd4\054\uffd4\055\uffd4\056\uffd4\060\uffd4\061\uffd4" +
    "\062\uffd4\063\uffd4\064\uffd4\001\002\000\004\006\264\001" +
    "\002\000\036\002\ufffe\003\ufffe\004\ufffe\036\ufffe\050\ufffe" +
    "\052\ufffe\054\ufffe\055\ufffe\056\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\063\ufffe\064\ufffe\001\002\000\004\006\260\001\002" +
    "\000\030\002\000\003\024\036\020\050\007\052\013\054" +
    "\005\055\016\056\027\060\022\061\004\062\011\001\002" +
    "\000\004\006\235\001\002\000\036\002\ufff6\003\ufff6\004" +
    "\ufff6\036\ufff6\050\ufff6\052\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\001\002\000" +
    "\004\006\174\001\002\000\036\002\ufffd\003\ufffd\004\ufffd" +
    "\036\ufffd\050\ufffd\052\ufffd\054\ufffd\055\ufffd\056\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\001\002\000\036" +
    "\002\ufff5\003\ufff5\004\ufff5\036\ufff5\050\ufff5\052\ufff5\054" +
    "\ufff5\055\ufff5\056\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5" +
    "\064\ufff5\001\002\000\004\005\164\001\002\000\036\002" +
    "\ufff8\003\ufff8\004\ufff8\036\ufff8\050\ufff8\052\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064" +
    "\ufff8\001\002\000\004\013\161\001\002\000\036\002\ufffa" +
    "\003\ufffa\004\ufffa\036\ufffa\050\ufffa\052\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa" +
    "\001\002\000\040\002\uffd4\003\uffd4\004\uffd4\012\160\036" +
    "\uffd4\050\uffd4\052\uffd4\054\uffd4\055\uffd4\056\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\064\uffd4\001\002\000\036\002" +
    "\ufffb\003\ufffb\004\ufffb\036\ufffb\050\ufffb\052\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064" +
    "\ufffb\001\002\000\004\012\156\001\002\000\036\002\ufffc" +
    "\003\ufffc\004\ufffc\036\ufffc\050\ufffc\052\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc" +
    "\001\002\000\036\002\ufff7\003\ufff7\004\ufff7\036\ufff7\050" +
    "\ufff7\052\ufff7\054\ufff7\055\ufff7\056\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\063\ufff7\064\ufff7\001\002\000\004\006\034\001" +
    "\002\000\036\002\ufff9\003\ufff9\004\ufff9\036\ufff9\050\ufff9" +
    "\052\ufff9\054\ufff9\055\ufff9\056\ufff9\060\ufff9\061\ufff9\062" +
    "\ufff9\063\ufff9\064\ufff9\001\002\000\036\002\ufff4\003\ufff4" +
    "\004\ufff4\036\ufff4\050\ufff4\052\ufff4\054\ufff4\055\ufff4\056" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\001\002" +
    "\000\004\002\033\001\002\000\004\002\001\001\002\000" +
    "\040\006\037\015\046\032\054\035\050\036\036\040\052" +
    "\041\044\042\047\043\042\044\053\045\040\046\035\047" +
    "\045\051\043\065\041\001\002\000\004\006\153\001\002" +
    "\000\112\002\uffbd\003\uffbd\004\uffbd\007\uffbd\010\150\011" +
    "\uffbd\012\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\033\uffbd\034\uffbd\036\uffbd\037\uffbd" +
    "\050\uffbd\052\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\001\002\000\040" +
    "\006\037\015\046\032\054\035\050\036\036\040\052\041" +
    "\044\042\047\043\042\044\053\045\040\046\035\047\045" +
    "\051\043\065\041\001\002\000\004\006\143\001\002\000" +
    "\004\006\140\001\002\000\110\002\uffbc\003\uffbc\004\uffbc" +
    "\007\uffbc\011\uffbc\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc\036" +
    "\uffbc\037\uffbc\050\uffbc\052\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\001" +
    "\002\000\110\002\uffba\003\uffba\004\uffba\007\uffba\011\uffba" +
    "\012\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\033\uffba\034\uffba\036\uffba\037\uffba\050" +
    "\uffba\052\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\001\002\000\110\002" +
    "\uffb9\003\uffb9\004\uffb9\007\uffb9\011\uffb9\012\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\033\uffb9\034\uffb9\036\uffb9\037\uffb9\050\uffb9\052\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\001\002\000\110\002\uffb3\003\uffb3\004" +
    "\uffb3\007\uffb3\011\uffb3\012\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3" +
    "\036\uffb3\037\uffb3\050\uffb3\052\uffb3\054\uffb3\055\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3" +
    "\001\002\000\040\006\037\015\046\032\054\035\050\036" +
    "\036\040\052\041\044\042\047\043\042\044\053\045\040" +
    "\046\035\047\045\051\043\065\041\001\002\000\110\002" +
    "\uffb8\003\uffb8\004\uffb8\007\uffb8\011\uffb8\012\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\033\uffb8\034\uffb8\036\uffb8\037\uffb8\050\uffb8\052\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\001\002\000\040\006\037\015\046\032" +
    "\054\035\050\036\036\040\052\041\044\042\047\043\042" +
    "\044\053\045\040\046\035\047\045\051\043\065\041\001" +
    "\002\000\110\002\uffbe\003\uffbe\004\uffbe\007\uffbe\011\uffbe" +
    "\012\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\033\uffbe\034\uffbe\036\uffbe\037\uffbe\050" +
    "\uffbe\052\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\063\uffbe\064\uffbe\001\002\000\110\002" +
    "\uffb4\003\uffb4\004\uffb4\007\uffb4\011\uffb4\012\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\033\uffb4\034\uffb4\036\uffb4\037\uffb4\050\uffb4\052\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\001\002\000\004\006\127\001\002\000" +
    "\040\006\037\015\046\032\054\035\050\036\036\040\052" +
    "\041\044\042\047\043\042\044\053\045\040\046\035\047" +
    "\045\051\043\065\041\001\002\000\042\014\071\015\064" +
    "\016\067\017\060\020\057\021\065\022\075\023\073\024" +
    "\066\025\062\026\061\027\070\030\056\031\072\033\074" +
    "\057\063\001\002\000\040\006\037\015\046\032\054\035" +
    "\050\036\036\040\052\041\044\042\047\043\042\044\053" +
    "\045\040\046\035\047\045\051\043\065\041\001\002\000" +
    "\040\006\037\015\046\032\054\035\050\036\036\040\052" +
    "\041\044\042\047\043\042\044\053\045\040\046\035\047" +
    "\045\051\043\065\041\001\002\000\040\006\037\015\046" +
    "\032\054\035\050\036\036\040\052\041\044\042\047\043" +
    "\042\044\053\045\040\046\035\047\045\051\043\065\041" +
    "\001\002\000\040\006\037\015\046\032\054\035\050\036" +
    "\036\040\052\041\044\042\047\043\042\044\053\045\040" +
    "\046\035\047\045\051\043\065\041\001\002\000\040\006" +
    "\037\015\046\032\054\035\050\036\036\040\052\041\044" +
    "\042\047\043\042\044\053\045\040\046\035\047\045\051" +
    "\043\065\041\001\002\000\040\006\037\015\046\032\054" +
    "\035\050\036\036\040\052\041\044\042\047\043\042\044" +
    "\053\045\040\046\035\047\045\051\043\065\041\001\002" +
    "\000\040\006\037\015\046\032\054\035\050\036\036\040" +
    "\052\041\044\042\047\043\042\044\053\045\040\046\035" +
    "\047\045\051\043\065\041\001\002\000\040\006\037\015" +
    "\046\032\054\035\050\036\036\040\052\041\044\042\047" +
    "\043\042\044\053\045\040\046\035\047\045\051\043\065" +
    "\041\001\002\000\040\006\037\015\046\032\054\035\050" +
    "\036\036\040\052\041\044\042\047\043\042\044\053\045" +
    "\040\046\035\047\045\051\043\065\041\001\002\000\040" +
    "\006\037\015\046\032\054\035\050\036\036\040\052\041" +
    "\044\042\047\043\042\044\053\045\040\046\035\047\045" +
    "\051\043\065\041\001\002\000\040\006\037\015\046\032" +
    "\054\035\050\036\036\040\052\041\044\042\047\043\042" +
    "\044\053\045\040\046\035\047\045\051\043\065\041\001" +
    "\002\000\040\006\037\015\046\032\054\035\050\036\036" +
    "\040\052\041\044\042\047\043\042\044\053\045\040\046" +
    "\035\047\045\051\043\065\041\001\002\000\040\006\037" +
    "\015\046\032\054\035\050\036\036\040\052\041\044\042" +
    "\047\043\042\044\053\045\040\046\035\047\045\051\043" +
    "\065\041\001\002\000\040\006\037\015\046\032\054\035" +
    "\050\036\036\040\052\041\044\042\047\043\042\044\053" +
    "\045\040\046\035\047\045\051\043\065\041\001\002\000" +
    "\040\006\037\015\046\032\054\035\050\036\036\040\052" +
    "\041\044\042\047\043\042\044\053\045\040\046\035\047" +
    "\045\051\043\065\041\001\002\000\040\006\037\015\046" +
    "\032\054\035\050\036\036\040\052\041\044\042\047\043" +
    "\042\044\053\045\040\046\035\047\045\051\043\065\041" +
    "\001\002\000\110\002\uffc7\003\uffc7\004\uffc7\007\uffc7\011" +
    "\uffc7\012\uffc7\014\071\015\064\016\067\017\060\020\057" +
    "\021\065\022\uffc7\023\uffc7\024\066\025\062\026\061\027" +
    "\070\030\uffc7\031\uffc7\033\uffc7\034\uffc7\036\uffc7\037\uffc7" +
    "\050\uffc7\052\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\001\002\000\042" +
    "\014\071\015\064\016\067\017\060\020\057\021\065\022" +
    "\075\023\073\024\066\025\062\026\061\027\070\030\056" +
    "\031\072\033\074\034\100\001\002\000\040\006\037\015" +
    "\046\032\054\035\050\036\036\040\052\041\044\042\047" +
    "\043\042\044\053\045\040\046\035\047\045\051\043\065" +
    "\041\001\002\000\110\002\uffd0\003\uffd0\004\uffd0\007\uffd0" +
    "\011\uffd0\012\uffd0\014\071\015\064\016\067\017\060\020" +
    "\057\021\065\022\075\023\073\024\066\025\062\026\061" +
    "\027\070\030\056\031\072\033\074\034\uffd0\036\uffd0\037" +
    "\uffd0\050\uffd0\052\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\001\002\000" +
    "\110\002\uffc6\003\uffc6\004\uffc6\007\uffc6\011\uffc6\012\uffc6" +
    "\014\071\015\064\016\067\017\060\020\057\021\065\022" +
    "\uffc6\023\uffc6\024\066\025\062\026\061\027\070\030\uffc6" +
    "\031\uffc6\033\uffc6\034\uffc6\036\uffc6\037\uffc6\050\uffc6\052" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\001\002\000\110\002\uffc0\003" +
    "\uffc0\004\uffc0\007\uffc0\011\uffc0\012\uffc0\014\071\015\064" +
    "\016\067\017\060\020\057\021\065\022\075\023\073\024" +
    "\066\025\062\026\061\027\070\030\uffc0\031\uffc0\033\uffc0" +
    "\034\uffc0\036\uffc0\037\uffc0\050\uffc0\052\uffc0\054\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\001\002\000\110\002\uffcd\003\uffcd\004\uffcd\007" +
    "\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd\016\067\017\060" +
    "\020\uffcd\021\065\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034\uffcd\036\uffcd" +
    "\037\uffcd\050\uffcd\052\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\001\002" +
    "\000\110\002\uffc3\003\uffc3\004\uffc3\007\uffc3\011\uffc3\012" +
    "\uffc3\014\071\015\064\016\067\017\060\020\057\021\065" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3\050\uffc3" +
    "\052\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002\000\110\002\uffcb" +
    "\003\uffcb\004\uffcb\007\uffcb\011\uffcb\012\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033" +
    "\uffcb\034\uffcb\036\uffcb\037\uffcb\050\uffcb\052\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\001\002\000\110\002\uffc4\003\uffc4\004\uffc4" +
    "\007\uffc4\011\uffc4\012\uffc4\014\071\015\064\016\067\017" +
    "\060\020\057\021\065\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\033\uffc4\034\uffc4\036" +
    "\uffc4\037\uffc4\050\uffc4\052\uffc4\054\uffc4\055\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\001" +
    "\002\000\110\002\uffc9\003\uffc9\004\uffc9\007\uffc9\011\uffc9" +
    "\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\033\uffc9\034\uffc9\036\uffc9\037\uffc9\050" +
    "\uffc9\052\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\063\uffc9\064\uffc9\001\002\000\110\002" +
    "\uffcc\003\uffcc\004\uffcc\007\uffcc\011\uffcc\012\uffcc\014\uffcc" +
    "\015\uffcc\016\067\017\060\020\uffcc\021\065\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\033\uffcc\034\uffcc\036\uffcc\037\uffcc\050\uffcc\052\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc" +
    "\063\uffcc\064\uffcc\001\002\000\042\007\113\014\071\015" +
    "\064\016\067\017\060\020\057\021\065\022\075\023\073" +
    "\024\066\025\062\026\061\027\070\030\056\031\072\033" +
    "\074\001\002\000\004\005\114\001\002\000\026\003\024" +
    "\036\020\050\007\052\013\054\005\055\016\056\027\060" +
    "\022\061\004\062\011\001\002\000\030\003\024\004\117" +
    "\036\020\050\007\052\013\054\005\055\016\056\027\060" +
    "\022\061\004\062\011\001\002\000\030\003\uffe0\004\uffe0" +
    "\036\uffe0\050\uffe0\052\uffe0\054\uffe0\055\uffe0\056\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\001\002\000\036\002\uffec\003\uffec" +
    "\004\uffec\036\uffec\050\uffec\052\uffec\054\uffec\055\uffec\056" +
    "\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\001\002" +
    "\000\030\003\uffe1\004\uffe1\036\uffe1\050\uffe1\052\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\060\uffe1\061\uffe1\062\uffe1\001\002" +
    "\000\110\002\uffc5\003\uffc5\004\uffc5\007\uffc5\011\uffc5\012" +
    "\uffc5\014\071\015\064\016\067\017\060\020\057\021\065" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\033\uffc5\034\uffc5\036\uffc5\037\uffc5\050\uffc5" +
    "\052\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\001\002\000\110\002\uffc2" +
    "\003\uffc2\004\uffc2\007\uffc2\011\uffc2\012\uffc2\014\071\015" +
    "\064\016\067\017\060\020\057\021\065\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\033" +
    "\uffc2\034\uffc2\036\uffc2\037\uffc2\050\uffc2\052\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\001\002\000\110\002\uffca\003\uffca\004\uffca" +
    "\007\uffca\011\uffca\012\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\033\uffca\034\uffca\036" +
    "\uffca\037\uffca\050\uffca\052\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\001" +
    "\002\000\110\002\uffc8\003\uffc8\004\uffc8\007\uffc8\011\uffc8" +
    "\012\uffc8\014\071\015\064\016\067\017\060\020\uffc8\021" +
    "\065\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\033\uffc8\034\uffc8\036\uffc8\037\uffc8\050" +
    "\uffc8\052\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\064\uffc8\001\002\000\110\002" +
    "\uffc1\003\uffc1\004\uffc1\007\uffc1\011\uffc1\012\uffc1\014\071" +
    "\015\064\016\067\017\060\020\057\021\065\022\075\023" +
    "\073\024\066\025\062\026\061\027\070\030\uffc1\031\uffc1" +
    "\033\uffc1\034\uffc1\036\uffc1\037\uffc1\050\uffc1\052\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\001\002\000\110\002\uffcf\003\uffcf\004" +
    "\uffcf\007\uffcf\011\uffcf\012\uffcf\014\071\015\064\016\067" +
    "\017\060\020\057\021\065\022\075\023\073\024\066\025" +
    "\062\026\061\027\070\030\056\031\072\033\074\034\uffcf" +
    "\036\uffcf\037\uffcf\050\uffcf\052\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\001\002\000\040\006\037\015\046\032\054\035\050\036" +
    "\036\040\052\041\044\042\047\043\042\044\053\045\040" +
    "\046\035\047\045\051\043\065\041\001\002\000\042\007" +
    "\131\014\071\015\064\016\067\017\060\020\057\021\065" +
    "\022\075\023\073\024\066\025\062\026\061\027\070\030" +
    "\056\031\072\033\074\001\002\000\110\002\uffb7\003\uffb7" +
    "\004\uffb7\007\uffb7\011\uffb7\012\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034" +
    "\uffb7\036\uffb7\037\uffb7\050\uffb7\052\uffb7\054\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\001\002\000\044\007\uffd7\014\071\015\064\016\067" +
    "\017\060\020\057\021\065\022\075\023\073\024\066\025" +
    "\062\026\061\027\070\030\056\031\072\033\074\037\uffd7" +
    "\001\002\000\006\007\135\037\134\001\002\000\040\006" +
    "\037\015\046\032\054\035\050\036\036\040\052\041\044" +
    "\042\047\043\042\044\053\045\040\046\035\047\045\051" +
    "\043\065\041\001\002\000\110\002\uffd1\003\uffd1\004\uffd1" +
    "\007\uffd1\011\uffd1\012\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1\036" +
    "\uffd1\037\uffd1\050\uffd1\052\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\001" +
    "\002\000\044\007\uffd8\014\071\015\064\016\067\017\060" +
    "\020\057\021\065\022\075\023\073\024\066\025\062\026" +
    "\061\027\070\030\056\031\072\033\074\037\uffd8\001\002" +
    "\000\110\002\uffce\003\uffce\004\uffce\007\uffce\011\uffce\012" +
    "\uffce\014\uffce\015\uffce\016\067\017\060\020\uffce\021\065" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\033\uffce\034\uffce\036\uffce\037\uffce\050\uffce" +
    "\052\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\064\uffce\001\002\000\040\006\037" +
    "\015\046\032\054\035\050\036\036\040\052\041\044\042" +
    "\047\043\042\044\053\045\040\046\035\047\045\051\043" +
    "\065\041\001\002\000\006\007\142\037\134\001\002\000" +
    "\110\002\uffd2\003\uffd2\004\uffd2\007\uffd2\011\uffd2\012\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\033\uffd2\034\uffd2\036\uffd2\037\uffd2\050\uffd2\052" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\001\002\000\040\006\037\015" +
    "\046\032\054\035\050\036\036\040\052\041\044\042\047" +
    "\043\042\044\053\045\040\046\035\047\045\051\043\065" +
    "\041\001\002\000\042\007\145\014\071\015\064\016\067" +
    "\017\060\020\057\021\065\022\075\023\073\024\066\025" +
    "\062\026\061\027\070\030\056\031\072\033\074\001\002" +
    "\000\110\002\uffb6\003\uffb6\004\uffb6\007\uffb6\011\uffb6\012" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\033\uffb6\034\uffb6\036\uffb6\037\uffb6\050\uffb6" +
    "\052\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\062\uffb6\063\uffb6\064\uffb6\001\002\000\042\007\147" +
    "\014\071\015\064\016\067\017\060\020\057\021\065\022" +
    "\075\023\073\024\066\025\062\026\061\027\070\030\056" +
    "\031\072\033\074\001\002\000\110\002\uffbf\003\uffbf\004" +
    "\uffbf\007\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf" +
    "\036\uffbf\037\uffbf\050\uffbf\052\uffbf\054\uffbf\055\uffbf\056" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf" +
    "\001\002\000\040\006\037\015\046\032\054\035\050\036" +
    "\036\040\052\041\044\042\047\043\042\044\053\045\040" +
    "\046\035\047\045\051\043\065\041\001\002\000\042\011" +
    "\152\014\071\015\064\016\067\017\060\020\057\021\065" +
    "\022\075\023\073\024\066\025\062\026\061\027\070\030" +
    "\056\031\072\033\074\001\002\000\110\002\uffbb\003\uffbb" +
    "\004\uffbb\007\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\033\uffbb\034" +
    "\uffbb\036\uffbb\037\uffbb\050\uffbb\052\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\001\002\000\040\006\037\015\046\032\054\035\050" +
    "\036\036\040\052\041\044\042\047\043\042\044\053\045" +
    "\040\046\035\047\045\051\043\065\041\001\002\000\042" +
    "\007\155\014\071\015\064\016\067\017\060\020\057\021" +
    "\065\022\075\023\073\024\066\025\062\026\061\027\070" +
    "\030\056\031\072\033\074\001\002\000\110\002\uffb5\003" +
    "\uffb5\004\uffb5\007\uffb5\011\uffb5\012\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\033\uffb5" +
    "\034\uffb5\036\uffb5\037\uffb5\050\uffb5\052\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\001\002\000\036\002\ufff3\003\ufff3\004\ufff3\036" +
    "\ufff3\050\ufff3\052\ufff3\054\ufff3\055\ufff3\056\ufff3\060\ufff3" +
    "\061\ufff3\062\ufff3\063\ufff3\064\ufff3\001\002\000\036\002" +
    "\uffee\003\uffee\004\uffee\036\uffee\050\uffee\052\uffee\054\uffee" +
    "\055\uffee\056\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064" +
    "\uffee\001\002\000\036\002\uffd5\003\uffd5\004\uffd5\036\uffd5" +
    "\050\uffd5\052\uffd5\054\uffd5\055\uffd5\056\uffd5\060\uffd5\061" +
    "\uffd5\062\uffd5\063\uffd5\064\uffd5\001\002\000\040\006\037" +
    "\015\046\032\054\035\050\036\036\040\052\041\044\042" +
    "\047\043\042\044\053\045\040\046\035\047\045\051\043" +
    "\065\041\001\002\000\076\002\uffd4\003\uffd4\004\uffd4\012" +
    "\160\014\071\015\064\016\067\017\060\020\057\021\065" +
    "\022\075\023\073\024\066\025\062\026\061\027\070\030" +
    "\056\031\072\033\074\036\uffd4\050\uffd4\052\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064" +
    "\uffd4\001\002\000\036\002\uffd6\003\uffd6\004\uffd6\036\uffd6" +
    "\050\uffd6\052\uffd6\054\uffd6\055\uffd6\056\uffd6\060\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\064\uffd6\001\002\000\026\003\024" +
    "\036\020\050\007\052\013\054\005\055\016\056\027\060" +
    "\022\061\004\062\011\001\002\000\030\003\024\004\166" +
    "\036\020\050\007\052\013\054\005\055\016\056\027\060" +
    "\022\061\004\062\011\001\002\000\004\054\167\001\002" +
    "\000\004\006\170\001\002\000\040\006\037\015\046\032" +
    "\054\035\050\036\036\040\052\041\044\042\047\043\042" +
    "\044\053\045\040\046\035\047\045\051\043\065\041\001" +
    "\002\000\042\007\172\014\071\015\064\016\067\017\060" +
    "\020\057\021\065\022\075\023\073\024\066\025\062\026" +
    "\061\027\070\030\056\031\072\033\074\001\002\000\040" +
    "\002\uffd4\003\uffd4\004\uffd4\012\160\036\uffd4\050\uffd4\052" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\060\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\001\002\000\036\002\uffeb\003\uffeb\004" +
    "\uffeb\036\uffeb\050\uffeb\052\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\001\002\000" +
    "\040\006\037\015\046\032\054\035\050\036\036\040\052" +
    "\041\044\042\047\043\042\044\053\045\040\046\035\047" +
    "\045\051\043\065\041\001\002\000\042\007\176\014\071" +
    "\015\064\016\067\017\060\020\057\021\065\022\075\023" +
    "\073\024\066\025\062\026\061\027\070\030\056\031\072" +
    "\033\074\001\002\000\004\005\177\001\002\000\026\003" +
    "\024\036\020\050\007\052\013\054\005\055\016\056\027" +
    "\060\022\061\004\062\011\001\002\000\030\003\024\004" +
    "\201\036\020\050\007\052\013\054\005\055\016\056\027" +
    "\060\022\061\004\062\011\001\002\000\040\002\uffe7\003" +
    "\uffe7\004\uffe7\036\uffe7\050\uffe7\052\uffe7\053\202\054\uffe7" +
    "\055\uffe7\056\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\001\002\000\006\005\223\052\224\001\002\000\040" +
    "\002\uffe5\003\uffe5\004\uffe5\036\uffe5\050\uffe5\052\uffe5\053" +
    "\204\054\uffe5\055\uffe5\056\uffe5\060\uffe5\061\uffe5\062\uffe5" +
    "\063\uffe5\064\uffe5\001\002\000\006\005\205\052\206\001" +
    "\002\000\026\003\024\036\020\050\007\052\013\054\005" +
    "\055\016\056\027\060\022\061\004\062\011\001\002\000" +
    "\004\006\207\001\002\000\040\006\037\015\046\032\054" +
    "\035\050\036\036\040\052\041\044\042\047\043\042\044" +
    "\053\045\040\046\035\047\045\051\043\065\041\001\002" +
    "\000\042\007\211\014\071\015\064\016\067\017\060\020" +
    "\057\021\065\022\075\023\073\024\066\025\062\026\061" +
    "\027\070\030\056\031\072\033\074\001\002\000\004\005" +
    "\212\001\002\000\026\003\024\036\020\050\007\052\013" +
    "\054\005\055\016\056\027\060\022\061\004\062\011\001" +
    "\002\000\030\003\uffdc\004\uffdc\036\uffdc\050\uffdc\052\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\060\uffdc\061\uffdc\062\uffdc\001" +
    "\002\000\030\003\024\004\215\036\020\050\007\052\013" +
    "\054\005\055\016\056\027\060\022\061\004\062\011\001" +
    "\002\000\040\002\uffe3\003\uffe3\004\uffe3\036\uffe3\050\uffe3" +
    "\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\060\uffe3\061" +
    "\uffe3\062\uffe3\063\uffe3\064\uffe3\001\002\000\030\003\uffdd" +
    "\004\uffdd\036\uffdd\050\uffdd\052\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\060\uffdd\061\uffdd\062\uffdd\001\002\000\030\003\uffde" +
    "\004\uffde\036\uffde\050\uffde\052\uffde\054\uffde\055\uffde\056" +
    "\uffde\060\uffde\061\uffde\062\uffde\001\002\000\030\003\024" +
    "\004\221\036\020\050\007\052\013\054\005\055\016\056" +
    "\027\060\022\061\004\062\011\001\002\000\036\002\uffe4" +
    "\003\uffe4\004\uffe4\036\uffe4\050\uffe4\052\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4" +
    "\001\002\000\030\003\uffdf\004\uffdf\036\uffdf\050\uffdf\052" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\060\uffdf\061\uffdf\062\uffdf" +
    "\001\002\000\026\003\024\036\020\050\007\052\013\054" +
    "\005\055\016\056\027\060\022\061\004\062\011\001\002" +
    "\000\004\006\225\001\002\000\040\006\037\015\046\032" +
    "\054\035\050\036\036\040\052\041\044\042\047\043\042" +
    "\044\053\045\040\046\035\047\045\051\043\065\041\001" +
    "\002\000\042\007\227\014\071\015\064\016\067\017\060" +
    "\020\057\021\065\022\075\023\073\024\066\025\062\026" +
    "\061\027\070\030\056\031\072\033\074\001\002\000\004" +
    "\005\230\001\002\000\026\003\024\036\020\050\007\052" +
    "\013\054\005\055\016\056\027\060\022\061\004\062\011" +
    "\001\002\000\030\003\024\004\232\036\020\050\007\052" +
    "\013\054\005\055\016\056\027\060\022\061\004\062\011" +
    "\001\002\000\040\002\uffe2\003\uffe2\004\uffe2\036\uffe2\050" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002\000\030\003" +
    "\024\004\234\036\020\050\007\052\013\054\005\055\016" +
    "\056\027\060\022\061\004\062\011\001\002\000\036\002" +
    "\uffe6\003\uffe6\004\uffe6\036\uffe6\050\uffe6\052\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\001\002\000\040\006\037\015\046\032\054\035\050" +
    "\036\036\040\052\041\044\042\047\043\042\044\053\045" +
    "\040\046\035\047\045\051\043\065\041\001\002\000\042" +
    "\007\237\014\071\015\064\016\067\017\060\020\057\021" +
    "\065\022\075\023\073\024\066\025\062\026\061\027\070" +
    "\030\056\031\072\033\074\001\002\000\004\005\240\001" +
    "\002\000\004\063\242\001\002\000\010\004\247\063\251" +
    "\064\250\001\002\000\040\006\037\015\046\032\054\035" +
    "\050\036\036\040\052\041\044\042\047\043\042\044\053" +
    "\045\040\046\035\047\045\051\043\065\041\001\002\000" +
    "\042\014\071\015\064\016\067\017\060\020\057\021\065" +
    "\022\075\023\073\024\066\025\062\026\061\027\070\030" +
    "\056\031\072\033\074\034\244\001\002\000\026\003\024" +
    "\036\020\050\007\052\013\054\005\055\016\056\027\060" +
    "\022\061\004\062\011\001\002\000\034\003\024\004\uffef" +
    "\036\020\050\007\052\013\054\005\055\016\056\027\060" +
    "\022\061\004\062\011\063\uffef\064\uffef\001\002\000\036" +
    "\002\uffff\003\uffff\004\uffff\036\uffff\050\uffff\052\uffff\054" +
    "\uffff\055\uffff\056\uffff\060\uffff\061\uffff\062\uffff\063\uffff" +
    "\064\uffff\001\002\000\036\002\ufff2\003\ufff2\004\ufff2\036" +
    "\ufff2\050\ufff2\052\ufff2\054\ufff2\055\ufff2\056\ufff2\060\ufff2" +
    "\061\ufff2\062\ufff2\063\ufff2\064\ufff2\001\002\000\004\034" +
    "\255\001\002\000\040\006\037\015\046\032\054\035\050" +
    "\036\036\040\052\041\044\042\047\043\042\044\053\045" +
    "\040\046\035\047\045\051\043\065\041\001\002\000\042" +
    "\014\071\015\064\016\067\017\060\020\057\021\065\022" +
    "\075\023\073\024\066\025\062\026\061\027\070\030\056" +
    "\031\072\033\074\034\253\001\002\000\026\003\024\036" +
    "\020\050\007\052\013\054\005\055\016\056\027\060\022" +
    "\061\004\062\011\001\002\000\034\003\024\004\ufff0\036" +
    "\020\050\007\052\013\054\005\055\016\056\027\060\022" +
    "\061\004\062\011\063\ufff0\064\ufff0\001\002\000\026\003" +
    "\024\036\020\050\007\052\013\054\005\055\016\056\027" +
    "\060\022\061\004\062\011\001\002\000\030\003\024\004" +
    "\257\036\020\050\007\052\013\054\005\055\016\056\027" +
    "\060\022\061\004\062\011\001\002\000\036\002\ufff1\003" +
    "\ufff1\004\ufff1\036\ufff1\050\ufff1\052\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\001" +
    "\002\000\040\006\037\015\046\032\054\035\050\036\036" +
    "\040\052\041\044\042\047\043\042\044\053\045\040\046" +
    "\035\047\045\051\043\065\041\001\002\000\042\007\262" +
    "\014\071\015\064\016\067\017\060\020\057\021\065\022" +
    "\075\023\073\024\066\025\062\026\061\027\070\030\056" +
    "\031\072\033\074\001\002\000\040\002\uffd4\003\uffd4\004" +
    "\uffd4\012\160\036\uffd4\050\uffd4\052\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\001" +
    "\002\000\036\002\uffd3\003\uffd3\004\uffd3\036\uffd3\050\uffd3" +
    "\052\uffd3\054\uffd3\055\uffd3\056\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\064\uffd3\001\002\000\040\006\037\015\046" +
    "\032\054\035\050\036\036\040\052\041\044\042\047\043" +
    "\042\044\053\045\040\046\035\047\045\051\043\065\041" +
    "\001\002\000\042\007\266\014\071\015\064\016\067\017" +
    "\060\020\057\021\065\022\075\023\073\024\066\025\062" +
    "\026\061\027\070\030\056\031\072\033\074\001\002\000" +
    "\004\005\267\001\002\000\026\003\024\036\020\050\007" +
    "\052\013\054\005\055\016\056\027\060\022\061\004\062" +
    "\011\001\002\000\030\003\uffe8\004\uffe8\036\uffe8\050\uffe8" +
    "\052\uffe8\054\uffe8\055\uffe8\056\uffe8\060\uffe8\061\uffe8\062" +
    "\uffe8\001\002\000\030\003\024\004\272\036\020\050\007" +
    "\052\013\054\005\055\016\056\027\060\022\061\004\062" +
    "\011\001\002\000\036\002\uffea\003\uffea\004\uffea\036\uffea" +
    "\050\uffea\052\uffea\054\uffea\055\uffea\056\uffea\060\uffea\061" +
    "\uffea\062\uffea\063\uffea\064\uffea\001\002\000\030\003\uffe9" +
    "\004\uffe9\036\uffe9\050\uffe9\052\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\060\uffe9\061\uffe9\062\uffe9\001\002\000\036\002\uffed" +
    "\003\uffed\004\uffed\036\uffed\050\uffed\052\uffed\054\uffed\055" +
    "\uffed\056\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\034\002\031\003\007\004\005\007\013\010" +
    "\024\022\022\024\020\026\027\027\016\030\025\031\011" +
    "\032\014\034\030\001\001\000\004\011\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\245\007\013\010\024\022\022\024\020\026\027\027" +
    "\016\030\025\031\011\032\014\034\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\054\017\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\145\017\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\136\017\050" +
    "\001\001\000\002\001\001\000\010\014\132\016\131\017" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\125\017\050\001\001\000\002\001" +
    "\001\000\006\016\124\017\050\001\001\000\006\016\123" +
    "\017\050\001\001\000\006\016\122\017\050\001\001\000" +
    "\006\016\121\017\050\001\001\000\006\016\120\017\050" +
    "\001\001\000\006\016\111\017\050\001\001\000\006\016" +
    "\110\017\050\001\001\000\006\016\107\017\050\001\001" +
    "\000\006\016\106\017\050\001\001\000\006\016\105\017" +
    "\050\001\001\000\006\016\104\017\050\001\001\000\006" +
    "\016\103\017\050\001\001\000\006\016\102\017\050\001" +
    "\001\000\006\016\101\017\050\001\001\000\006\016\076" +
    "\017\050\001\001\000\006\016\075\017\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\100\017\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\115\007\013" +
    "\010\024\022\022\023\114\024\020\026\027\027\016\030" +
    "\025\031\011\032\014\034\030\001\001\000\030\004\117" +
    "\007\013\010\024\022\022\024\020\026\027\027\016\030" +
    "\025\031\011\032\014\034\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\127\017\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\135\017\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\140\016\131\017\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\143\017\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\150\017\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\153\017\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\161\017\050\001" +
    "\001\000\004\011\162\001\001\000\002\001\001\000\032" +
    "\004\115\007\013\010\024\022\022\023\164\024\020\026" +
    "\027\027\016\030\025\031\011\032\014\034\030\001\001" +
    "\000\030\004\117\007\013\010\024\022\022\024\020\026" +
    "\027\027\016\030\025\031\011\032\014\034\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\170\017" +
    "\050\001\001\000\002\001\001\000\004\011\172\001\001" +
    "\000\002\001\001\000\006\016\174\017\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\115\007\013" +
    "\010\024\022\022\023\177\024\020\026\027\027\016\030" +
    "\025\031\011\032\014\034\030\001\001\000\030\004\117" +
    "\007\013\010\024\022\022\024\020\026\027\027\016\030" +
    "\025\031\011\032\014\034\030\001\001\000\004\025\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\216\007\013\010\024\021\217\022\022" +
    "\024\020\026\027\027\016\030\025\031\011\032\014\034" +
    "\030\001\001\000\002\001\001\000\006\016\207\017\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\212\007\013\010\024\020\213\022\022\024\020\026\027" +
    "\027\016\030\025\031\011\032\014\034\030\001\001\000" +
    "\002\001\001\000\030\004\215\007\013\010\024\022\022" +
    "\024\020\026\027\027\016\030\025\031\011\032\014\034" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\221\007\013\010\024\022\022\024" +
    "\020\026\027\027\016\030\025\031\011\032\014\034\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\212\007\013\010\024\020\232\022\022\024\020\026\027" +
    "\027\016\030\025\031\011\032\014\034\030\001\001\000" +
    "\002\001\001\000\006\016\225\017\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\212\007\013\010" +
    "\024\020\230\022\022\024\020\026\027\027\016\030\025" +
    "\031\011\032\014\034\030\001\001\000\030\004\215\007" +
    "\013\010\024\022\022\024\020\026\027\027\016\030\025" +
    "\031\011\032\014\034\030\001\001\000\002\001\001\000" +
    "\030\004\215\007\013\010\024\022\022\024\020\026\027" +
    "\027\016\030\025\031\011\032\014\034\030\001\001\000" +
    "\002\001\001\000\006\016\235\017\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\240\001\001\000" +
    "\002\001\001\000\006\016\242\017\050\001\001\000\002" +
    "\001\001\000\032\003\244\004\005\007\013\010\024\022" +
    "\022\024\020\026\027\027\016\030\025\031\011\032\014" +
    "\034\030\001\001\000\030\004\245\007\013\010\024\022" +
    "\022\024\020\026\027\027\016\030\025\031\011\032\014" +
    "\034\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\251\017\050\001\001\000\002" +
    "\001\001\000\032\003\253\004\005\007\013\010\024\022" +
    "\022\024\020\026\027\027\016\030\025\031\011\032\014" +
    "\034\030\001\001\000\030\004\245\007\013\010\024\022" +
    "\022\024\020\026\027\027\016\030\025\031\011\032\014" +
    "\034\030\001\001\000\032\003\255\004\005\007\013\010" +
    "\024\022\022\024\020\026\027\027\016\030\025\031\011" +
    "\032\014\034\030\001\001\000\030\004\245\007\013\010" +
    "\024\022\022\024\020\026\027\027\016\030\025\031\011" +
    "\032\014\034\030\001\001\000\002\001\001\000\006\016" +
    "\260\017\050\001\001\000\002\001\001\000\004\011\262" +
    "\001\001\000\002\001\001\000\006\016\264\017\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\267" +
    "\007\013\010\024\022\022\024\020\026\027\027\016\030" +
    "\025\031\011\032\014\033\270\034\030\001\001\000\002" +
    "\001\001\000\030\004\272\007\013\010\024\022\022\024" +
    "\020\026\027\027\016\030\025\031\011\032\014\034\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public NodoAbstracto Raiz;
    public ArrayList <NodoAbstracto> Expresiones = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones2 = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones3 = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones4 = new ArrayList();
    public ArrayList <NodoAbstracto> ExpresionesWhile = new ArrayList();
    public String Lado1, Lado2 = "";
    public String Manejor_Error = "";
     public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila+1);
        System.out.println("\t\tColumna: "+columna);

         TError ERRORES = new TError(lexema,fila,columna,"Sintactico", "Sentencia incorrecta" );
         TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
       
        
        
    }

//Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       // TERROR ERRORES = new TERROR(lexema,"Error Sintactico","Caracter no esperado",fila,columna);
       // TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
     
    }
    
    public void AgregarElmentoALista(NodoAbstracto Nodo, NodoAbstracto Elemento){
        Nodo.Expresiones.add(Elemento);
    }
    public void semantic(String msg, Object obj) {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analisis_Sintactico$actions {



  private final Analisis_Sintactico parser;

  /** Constructor */
  CUP$Analisis_Sintactico$actions(Analisis_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action_part00000000(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto start_val = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico$parser.done_parsing();
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("INICIO");
                        nuevo.Hijos.add(nod);
                        parser.Raiz = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        //NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        //nuevo.Hijos.add(nodsentencias);
                        //nuevo.Hijos.add(nod);
                        //RESULT = nuevo;
                        
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARARASIGNAR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        RESULT=nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IMPRIM 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        //System.out.println("ID LINEA : SENTENCIA IMPRIMIR" + nodleft + " Columna " + nodright);
                        RESULT=nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= ELIF 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= ELIFELSE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= ELWHILE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= ELDOWHILE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= ELFOR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= ELBREAK 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= ELCONTINUE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= ELSWITCH 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= error puntoycoma 
            {
              NodoAbstracto RESULT =null;
		
                         NodoAbstracto nuevo = new ERRORES("Error");
                         NodoAbstracto nuevoid = new Nodo("#Error En alguna mulada XD");
                         nuevo.Cadena   = "#Error Semantico Encontrado ver reporte";
                         RESULT= nuevo; 
                     
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELSWITCH ::= SWITCH parentesisabrir EXP parentesiscerrar llaveabrir EXPRESIONESSWITCH llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Switch("SWITCH");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                RESULT = nuevo;
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELSWITCH",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELSWITCH ::= SWITCH parentesisabrir EXP parentesiscerrar llaveabrir EXPRESIONESSWITCH DEF DOSP SENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentdefleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentdefright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentdef = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Switch("SWITCH");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                nuevo.Hijos.add(sentdef);
                RESULT = nuevo;
            
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELSWITCH",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESIONESSWITCH ::= EXPRESIONESSWITCH CASE EXP DOSP SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("CASE");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(sentencias);
                        nodsentencias.Hijos.add(nuevo);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONESSWITCH",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESIONESSWITCH ::= CASE EXP DOSP SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("CASE");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(sentencias);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONESSWITCH",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELBREAK ::= BREAK FINAL 
            {
              NodoAbstracto RESULT =null;
		
             NodoAbstracto nuevo = new Break("Break");
             RESULT= nuevo; 
          
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELBREAK",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELCONTINUE ::= CONTINUE FINAL 
            {
              NodoAbstracto RESULT =null;
		
            NodoAbstracto nuevo = new Continue("Break");
             RESULT= nuevo; 
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELCONTINUE",24, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELFOR ::= FOR parentesisabrir EXP IN EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new For("DoWhile");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(exp2);
            nuevo.Hijos.add(sentencias);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;
    
         
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELFOR",22, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELDOWHILE ::= DO llaveabrir LISTASENTENCIAS llavecerrar WHILE parentesisabrir EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
           NodoAbstracto nuevo = new DoWhile("DoWhile");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;


              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELDOWHILE",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELWHILE ::= WHILE parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIASwhile llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new While("WHILE");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< ExpresionesWhile.size();i++){
                           nuevo.Expresiones.add(ExpresionesWhile.get(i));
                        }
            ExpresionesWhile.clear();
            RESULT = nuevo;
    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELWHILE",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTASENTENCIASwhile ::= LISTASENTENCIASwhile SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                         ExpresionesWhile.add(nod);
                       // Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIASwhile",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTASENTENCIASwhile ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        ExpresionesWhile.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIASwhile",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIF("IF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar ELSE llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIF("IF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            for(int i = 0; i< Expresiones2.size();i++){
                           nuevo.Expresiones2.add(Expresiones2.get(i));
                        }
            Expresiones2.clear();
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar LISTAELSES 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
            NodoAbstracto nuevo = new SentenciaIFElseIF("IFelseIF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar LISTAELSES ELSE llaveabrir LISTASENTENCIAS3 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentaleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentaright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto senta = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIFElseIF("IFelseIF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.Hijos.add(senta);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;            
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTAELSES ::= LISTAELSES ELSE IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int noditoleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int noditoright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		NodoAbstracto nodito = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Nodo("ELSEIF1");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                nodito.Hijos.add(nuevo);
                RESULT = nodito;
              
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAELSES",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTAELSES ::= ELSE IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Nodo("ELSEIF2");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                RESULT = nuevo;
              
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAELSES",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTASENTENCIAS ::= LISTASENTENCIAS SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        Expresiones.add(nod);
                       // Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTASENTENCIAS ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTASENTENCIAS3 ::= LISTASENTENCIAS3 SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        
                        Expresiones4.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS3",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTASENTENCIAS3 ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        Expresiones4.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS3",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTASENTENCIAS2 ::= LISTASENTENCIAS2 SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        //Expresiones.add(nod);
                        Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS2",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTASENTENCIAS2 ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        //Expresiones.add(nod);
                        Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS2",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MODVECTOR ::= id corcheteabrir EXP corchetecerrar igual EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MODVECTOR",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MODVECTOR ::= id corcheteabrir EXP corchetecerrar igual FuncionC EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MODVECTOR",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARARVECTORC ::= id igual FuncionC LISTAEXPRESIONES parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int Listaleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int Listaright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto Lista = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                        NodoAbstracto nuevo = new FuncionC("CASTEAR");
                        NodoAbstracto nuevoid = new Nodo(valor);
                        nuevo.Hijos.add(nuevoid);
                        for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
                        Expresiones.clear();
                        nuevo.Hijos.add(Lista);
                        Manejor_Error = "Error al crear vector" + valor;
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVECTORC",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTAEXPRESIONES ::= LISTAEXPRESIONES coma EXP 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                       // NodoAbstracto nuevo = new Nodo("EXP");
                       // nuevo.Hijos.add(nodsentencias);
                       // nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                        Expresiones2.add(nod);
                        Expresiones3.add(nod);
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        //RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTAEXPRESIONES ::= EXP 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        //NodoAbstracto nuevo = new Nodo("EXP");
                        //nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                        Expresiones2.add(nod);
                        Expresiones3.add(nod);
                        //RESULT = nuevo;
                        NodoAbstracto nuevo = new Nodo("EXP");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARARASIGNAR ::= id igual EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new DeclararAsignar("DECLARARASIGNAR");
                        NodoAbstracto nuevoid = new Nodo(valor);
                        nuevo.Hijos.add(nuevoid);
                        nuevo.Hijos.add(exp1);
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                         for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
                        Expresiones.clear();
                        for(int i = 0; i< Expresiones3.size();i++){
                           nuevo.Expresiones2.add(Expresiones3.get(i));
                        }
                        Expresiones3.clear();
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARASIGNAR",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FINAL ::= puntoycoma 
            {
              NodoAbstracto RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FINAL ::= 
            {
              NodoAbstracto RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IMPRIM ::= imprimir parentesisabrir EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                        NodoAbstracto nuevo = new Imprimir("IMPRIMIR");
                        nuevo.Hijos.add(exp1);
                         Manejor_Error = "Error al imprimir";
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIM",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= LISTA parentesisabrir LISTAEXPRESIONES parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int valo4left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valo4right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valo4 = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int listaValoresleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int listaValoresright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto listaValores = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Lista");
                        NodoAbstracto nuevo2 = new Nodo("list(");
                        nuevo.Hijos.add(nuevo2);
                        nuevo.Hijos.add(listaValores);
                        nuevo.TipoDato = "Lista";
                        
                        RESULT = nuevo;

                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= FuncionC LISTAEXPRESIONES parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int valo4left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int valo4right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object valo4 = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int listaValoresleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int listaValoresright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto listaValores = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("FuncionC");
                        NodoAbstracto nuevo2 = new Nodo("c(");
                        nuevo.Hijos.add(nuevo2);
                        nuevo.Hijos.add(listaValores);
                        nuevo.TipoDato = "FuncionC";
                        for(int i = 0; i< Expresiones2.size();i++){
                           nuevo.Expresiones2.add(Expresiones2.get(i));
                        }
                        Expresiones2.clear();
                        RESULT = nuevo;

                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= EXP PREGUNTAC EXP DOSP EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp3 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Ternario("EXP");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(exp2);  
                        nuevo.Hijos.add(exp3);
                         Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= NOT EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new NOT("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= menos EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Negativo("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= EXP mas EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("+");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= EXP menos EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                    
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= EXP por EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("*");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= EXP div EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("/");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                      
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= EXP modulo EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("%%");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2); 
                        Manejor_Error = "Error en expresion";                   
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= EXP potencia EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("^");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);   
                        Manejor_Error = "Error en expresion";                 
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= EXP igualdad EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("==");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= EXP Noigualdad EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= EXP MayorQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= EXP MenorQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= EXP MayorIgualQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= EXP MenorIgualQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= EXP AND EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("&&");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";                      
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXP OR EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("||");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        Manejor_Error = "Error en expresion";
                        RESULT = exp1;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= NUMERO 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        Manejor_Error = "Error en expresion";
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= id 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("id");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "id";
                        nuevo.Nombre = valor;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= nulo 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= id corcheteabrir EXP corchetecerrar 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto pos = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Vector");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(pos);
                        nuevo.TipoDato = "vector";
                        Manejor_Error = "Error en expresion";
                        //RESULT = nuevo;
                        //nuevo.id = Integer.parseInt(pos);
                        nuevo.columna = valorleft;
                        nuevo.linea = valorright;
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= cadena 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        valor =  valor.replaceAll("\"", "");
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= ttrue 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= tfalse 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= typeof parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("TypeOF");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= length parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Length");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= stringlength parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("StringLength");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NUMERO ::= entero 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Entero");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("NUMERO",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NUMERO ::= decimal 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Decimal");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "decimal";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("NUMERO",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analisis_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analisis_Sintactico$do_action_part00000000(
                               CUP$Analisis_Sintactico$act_num,
                               CUP$Analisis_Sintactico$parser,
                               CUP$Analisis_Sintactico$stack,
                               CUP$Analisis_Sintactico$top);
    }
}

}
