
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import static Analizadores.IDE.TABLA_DE_ERRORES_SINTACTICOS;
import CodigoASTCUP.*;
import Codigo.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analisis_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analisis_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analisis_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\040\005\000\002\040\005" +
    "\000\002\040\003\000\002\040\003\000\002\037\012\000" +
    "\002\037\013\000\002\037\013\000\002\037\013\000\002" +
    "\036\013\000\002\036\017\000\002\036\013\000\002\036" +
    "\017\000\002\034\011\000\002\034\014\000\002\035\007" +
    "\000\002\035\006\000\002\031\004\000\002\032\004\000" +
    "\002\030\013\000\002\027\013\000\002\026\011\000\002" +
    "\033\004\000\002\033\003\000\002\022\011\000\002\022" +
    "\015\000\002\022\012\000\002\022\016\000\002\025\013" +
    "\000\002\025\012\000\002\023\004\000\002\023\003\000" +
    "\002\021\004\000\002\021\003\000\002\020\004\000\002" +
    "\020\003\000\002\015\011\000\002\015\013\000\002\013" +
    "\010\000\002\014\005\000\002\014\003\000\002\007\006" +
    "\000\002\011\003\000\002\011\002\000\002\010\007\000" +
    "\002\016\006\000\002\016\005\000\002\016\007\000\002" +
    "\016\004\000\002\016\004\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\006\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\006\000\002\016\006\000\002" +
    "\016\006\000\002\016\010\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\016\006\000\002\016\006" +
    "\000\002\016\010\000\002\016\006\000\002\016\010\000" +
    "\002\016\006\000\002\016\010\000\002\017\003\000\002" +
    "\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\036\003\031\036\025\060\011\061\023\062" +
    "\024\063\007\064\032\070\016\072\006\073\021\074\035" +
    "\076\027\077\004\100\013\001\002\000\050\002\uffc6\003" +
    "\uffc6\004\uffc6\012\253\036\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\064\uffc6\070\uffc6\072\uffc6\073\uffc6\074\uffc6\076" +
    "\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\001\002\000\046" +
    "\002\ufff2\003\ufff2\004\ufff2\036\ufff2\060\ufff2\061\ufff2\062" +
    "\ufff2\063\ufff2\064\ufff2\070\ufff2\072\ufff2\073\ufff2\074\ufff2" +
    "\076\ufff2\077\ufff2\100\ufff2\101\ufff2\102\ufff2\001\002\000" +
    "\004\006\u012d\001\002\000\004\006\u0125\001\002\000\046" +
    "\002\ufffe\003\ufffe\004\ufffe\036\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\063\ufffe\064\ufffe\070\ufffe\072\ufffe\073\ufffe\074\ufffe" +
    "\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\001\002\000" +
    "\004\006\u0121\001\002\000\040\002\000\003\031\036\025" +
    "\060\011\061\023\062\024\063\007\064\032\070\016\072" +
    "\006\073\021\074\035\076\027\077\004\100\013\001\002" +
    "\000\004\006\u010e\001\002\000\046\002\ufffd\003\ufffd\004" +
    "\ufffd\036\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd" +
    "\070\ufffd\072\ufffd\073\ufffd\074\ufffd\076\ufffd\077\ufffd\100" +
    "\ufffd\101\ufffd\102\ufffd\001\002\000\046\002\ufff6\003\ufff6" +
    "\004\ufff6\036\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064" +
    "\ufff6\070\ufff6\072\ufff6\073\ufff6\074\ufff6\076\ufff6\077\ufff6" +
    "\100\ufff6\101\ufff6\102\ufff6\001\002\000\004\006\355\001" +
    "\002\000\046\002\ufff5\003\ufff5\004\ufff5\036\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\064\ufff5\070\ufff5\072\ufff5\073" +
    "\ufff5\074\ufff5\076\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5" +
    "\001\002\000\046\002\ufff3\003\ufff3\004\ufff3\036\ufff3\060" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\070\ufff3\072\ufff3" +
    "\073\ufff3\074\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3\102" +
    "\ufff3\001\002\000\004\005\345\001\002\000\046\002\ufff8" +
    "\003\ufff8\004\ufff8\036\ufff8\060\ufff8\061\ufff8\062\ufff8\063" +
    "\ufff8\064\ufff8\070\ufff8\072\ufff8\073\ufff8\074\ufff8\076\ufff8" +
    "\077\ufff8\100\ufff8\101\ufff8\102\ufff8\001\002\000\004\006" +
    "\335\001\002\000\004\006\321\001\002\000\006\006\257" +
    "\013\256\001\002\000\046\002\ufffa\003\ufffa\004\ufffa\036" +
    "\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\070\ufffa" +
    "\072\ufffa\073\ufffa\074\ufffa\076\ufffa\077\ufffa\100\ufffa\101" +
    "\ufffa\102\ufffa\001\002\000\050\002\uffc6\003\uffc6\004\uffc6" +
    "\012\253\036\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\070\uffc6\072\uffc6\073\uffc6\074\uffc6\076\uffc6\077\uffc6" +
    "\100\uffc6\101\uffc6\102\uffc6\001\002\000\046\002\ufffb\003" +
    "\ufffb\004\ufffb\036\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb" +
    "\064\ufffb\070\ufffb\072\ufffb\073\ufffb\074\ufffb\076\ufffb\077" +
    "\ufffb\100\ufffb\101\ufffb\102\ufffb\001\002\000\004\012\254" +
    "\001\002\000\004\006\237\001\002\000\046\002\ufffc\003" +
    "\ufffc\004\ufffc\036\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc" +
    "\064\ufffc\070\ufffc\072\ufffc\073\ufffc\074\ufffc\076\ufffc\077" +
    "\ufffc\100\ufffc\101\ufffc\102\ufffc\001\002\000\046\002\ufff7" +
    "\003\ufff7\004\ufff7\036\ufff7\060\ufff7\061\ufff7\062\ufff7\063" +
    "\ufff7\064\ufff7\070\ufff7\072\ufff7\073\ufff7\074\ufff7\076\ufff7" +
    "\077\ufff7\100\ufff7\101\ufff7\102\ufff7\001\002\000\004\006" +
    "\042\001\002\000\046\002\ufff4\003\ufff4\004\ufff4\036\ufff4" +
    "\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\070\ufff4\072" +
    "\ufff4\073\ufff4\074\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4" +
    "\102\ufff4\001\002\000\046\002\ufff9\003\ufff9\004\ufff9\036" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\070\ufff9" +
    "\072\ufff9\073\ufff9\074\ufff9\076\ufff9\077\ufff9\100\ufff9\101" +
    "\ufff9\102\ufff9\001\002\000\004\002\041\001\002\000\004" +
    "\002\001\001\002\000\060\006\062\015\056\032\050\035" +
    "\061\036\064\040\070\041\063\042\052\043\057\044\045" +
    "\045\047\046\043\047\073\050\053\051\065\052\055\053" +
    "\072\054\046\055\067\056\051\057\060\067\044\103\071" +
    "\001\002\000\004\006\234\001\002\000\120\002\uffac\003" +
    "\uffac\004\uffac\007\uffac\011\uffac\012\uffac\014\uffac\015\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\033\uffac" +
    "\034\uffac\036\uffac\037\uffac\060\uffac\061\uffac\062\uffac\063" +
    "\uffac\064\uffac\070\uffac\072\uffac\073\uffac\074\uffac\075\uffac" +
    "\076\uffac\077\uffac\100\uffac\101\uffac\102\uffac\001\002\000" +
    "\004\006\231\001\002\000\120\002\uff9a\003\uff9a\004\uff9a" +
    "\007\uff9a\011\uff9a\012\uff9a\014\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\033\uff9a\034\uff9a\036" +
    "\uff9a\037\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a" +
    "\070\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077" +
    "\uff9a\100\uff9a\101\uff9a\102\uff9a\001\002\000\004\006\226" +
    "\001\002\000\060\006\062\015\056\032\050\035\061\036" +
    "\064\040\070\041\063\042\052\043\057\044\045\045\047" +
    "\046\043\047\073\050\053\051\065\052\055\053\072\054" +
    "\046\055\067\056\051\057\060\067\044\103\071\001\002" +
    "\000\004\006\217\001\002\000\120\002\uffaa\003\uffaa\004" +
    "\uffaa\007\uffaa\011\uffaa\012\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa\034\uffaa" +
    "\036\uffaa\037\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\070\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa" +
    "\077\uffaa\100\uffaa\101\uffaa\102\uffaa\001\002\000\004\006" +
    "\214\001\002\000\042\014\111\015\104\016\107\017\100" +
    "\020\077\021\105\022\114\023\112\024\106\025\102\026" +
    "\101\027\110\030\076\031\113\033\115\075\204\001\002" +
    "\000\004\006\201\001\002\000\060\006\062\015\056\032" +
    "\050\035\061\036\064\040\070\041\063\042\052\043\057" +
    "\044\045\045\047\046\043\047\073\050\053\051\065\052" +
    "\055\053\072\054\046\055\067\056\051\057\060\067\044" +
    "\103\071\001\002\000\120\002\uffae\003\uffae\004\uffae\007" +
    "\uffae\011\uffae\012\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034\uffae\036\uffae" +
    "\037\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\070" +
    "\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae" +
    "\100\uffae\101\uffae\102\uffae\001\002\000\004\006\172\001" +
    "\002\000\060\006\062\015\056\032\050\035\061\036\064" +
    "\040\070\041\063\042\052\043\057\044\045\045\047\046" +
    "\043\047\073\050\053\051\065\052\055\053\072\054\046" +
    "\055\067\056\051\057\060\067\044\103\071\001\002\000" +
    "\060\006\062\015\056\032\050\035\061\036\064\040\070" +
    "\041\063\042\052\043\057\044\045\045\047\046\043\047" +
    "\073\050\053\051\065\052\055\053\072\054\046\055\067" +
    "\056\051\057\060\067\044\103\071\001\002\000\120\002" +
    "\uffab\003\uffab\004\uffab\007\uffab\011\uffab\012\uffab\014\uffab" +
    "\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab" +
    "\033\uffab\034\uffab\036\uffab\037\uffab\060\uffab\061\uffab\062" +
    "\uffab\063\uffab\064\uffab\070\uffab\072\uffab\073\uffab\074\uffab" +
    "\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\102\uffab\001" +
    "\002\000\122\002\uffaf\003\uffaf\004\uffaf\007\uffaf\010\163" +
    "\011\uffaf\012\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf\036\uffaf\037" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\070\uffaf" +
    "\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100" +
    "\uffaf\101\uffaf\102\uffaf\001\002\000\004\006\160\001\002" +
    "\000\120\002\uffb0\003\uffb0\004\uffb0\007\uffb0\011\uffb0\012" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\033\uffb0\034\uffb0\036\uffb0\037\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\064\uffb0\070\uffb0\072\uffb0\073" +
    "\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0" +
    "\102\uffb0\001\002\000\004\006\152\001\002\000\120\002" +
    "\uff9b\003\uff9b\004\uff9b\007\uff9b\011\uff9b\012\uff9b\014\uff9b" +
    "\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\033\uff9b\034\uff9b\036\uff9b\037\uff9b\060\uff9b\061\uff9b\062" +
    "\uff9b\063\uff9b\064\uff9b\070\uff9b\072\uff9b\073\uff9b\074\uff9b" +
    "\075\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\001" +
    "\002\000\004\006\144\001\002\000\004\006\141\001\002" +
    "\000\004\006\074\001\002\000\060\006\062\015\056\032" +
    "\050\035\061\036\064\040\070\041\063\042\052\043\057" +
    "\044\045\045\047\046\043\047\073\050\053\051\065\052" +
    "\055\053\072\054\046\055\067\056\051\057\060\067\044" +
    "\103\071\001\002\000\042\014\111\015\104\016\107\017" +
    "\100\020\077\021\105\022\114\023\112\024\106\025\102" +
    "\026\101\027\110\030\076\031\113\033\115\037\103\001" +
    "\002\000\060\006\062\015\056\032\050\035\061\036\064" +
    "\040\070\041\063\042\052\043\057\044\045\045\047\046" +
    "\043\047\073\050\053\051\065\052\055\053\072\054\046" +
    "\055\067\056\051\057\060\067\044\103\071\001\002\000" +
    "\060\006\062\015\056\032\050\035\061\036\064\040\070" +
    "\041\063\042\052\043\057\044\045\045\047\046\043\047" +
    "\073\050\053\051\065\052\055\053\072\054\046\055\067" +
    "\056\051\057\060\067\044\103\071\001\002\000\060\006" +
    "\062\015\056\032\050\035\061\036\064\040\070\041\063" +
    "\042\052\043\057\044\045\045\047\046\043\047\073\050" +
    "\053\051\065\052\055\053\072\054\046\055\067\056\051" +
    "\057\060\067\044\103\071\001\002\000\060\006\062\015" +
    "\056\032\050\035\061\036\064\040\070\041\063\042\052" +
    "\043\057\044\045\045\047\046\043\047\073\050\053\051" +
    "\065\052\055\053\072\054\046\055\067\056\051\057\060" +
    "\067\044\103\071\001\002\000\060\006\062\015\056\032" +
    "\050\035\061\036\064\040\070\041\063\042\052\043\057" +
    "\044\045\045\047\046\043\047\073\050\053\051\065\052" +
    "\055\053\072\054\046\055\067\056\051\057\060\067\044" +
    "\103\071\001\002\000\060\006\062\015\056\032\050\035" +
    "\061\036\064\040\070\041\063\042\052\043\057\044\045" +
    "\045\047\046\043\047\073\050\053\051\065\052\055\053" +
    "\072\054\046\055\067\056\051\057\060\067\044\103\071" +
    "\001\002\000\060\006\062\015\056\032\050\035\061\036" +
    "\064\040\070\041\063\042\052\043\057\044\045\045\047" +
    "\046\043\047\073\050\053\051\065\052\055\053\072\054" +
    "\046\055\067\056\051\057\060\067\044\103\071\001\002" +
    "\000\060\006\062\015\056\032\050\035\061\036\064\040" +
    "\070\041\063\042\052\043\057\044\045\045\047\046\043" +
    "\047\073\050\053\051\065\052\055\053\072\054\046\055" +
    "\067\056\051\057\060\067\044\103\071\001\002\000\060" +
    "\006\062\015\056\032\050\035\061\036\064\040\070\041" +
    "\063\042\052\043\057\044\045\045\047\046\043\047\073" +
    "\050\053\051\065\052\055\053\072\054\046\055\067\056" +
    "\051\057\060\067\044\103\071\001\002\000\060\006\062" +
    "\015\056\032\050\035\061\036\064\040\070\041\063\042" +
    "\052\043\057\044\045\045\047\046\043\047\073\050\053" +
    "\051\065\052\055\053\072\054\046\055\067\056\051\057" +
    "\060\067\044\103\071\001\002\000\060\006\062\015\056" +
    "\032\050\035\061\036\064\040\070\041\063\042\052\043" +
    "\057\044\045\045\047\046\043\047\073\050\053\051\065" +
    "\052\055\053\072\054\046\055\067\056\051\057\060\067" +
    "\044\103\071\001\002\000\060\006\062\015\056\032\050" +
    "\035\061\036\064\040\070\041\063\042\052\043\057\044" +
    "\045\045\047\046\043\047\073\050\053\051\065\052\055" +
    "\053\072\054\046\055\067\056\051\057\060\067\044\103" +
    "\071\001\002\000\060\006\062\015\056\032\050\035\061" +
    "\036\064\040\070\041\063\042\052\043\057\044\045\045" +
    "\047\046\043\047\073\050\053\051\065\052\055\053\072" +
    "\054\046\055\067\056\051\057\060\067\044\103\071\001" +
    "\002\000\060\006\062\015\056\032\050\035\061\036\064" +
    "\040\070\041\063\042\052\043\057\044\045\045\047\046" +
    "\043\047\073\050\053\051\065\052\055\053\072\054\046" +
    "\055\067\056\051\057\060\067\044\103\071\001\002\000" +
    "\060\006\062\015\056\032\050\035\061\036\064\040\070" +
    "\041\063\042\052\043\057\044\045\045\047\046\043\047" +
    "\073\050\053\051\065\052\055\053\072\054\046\055\067" +
    "\056\051\057\060\067\044\103\071\001\002\000\060\006" +
    "\062\015\056\032\050\035\061\036\064\040\070\041\063" +
    "\042\052\043\057\044\045\045\047\046\043\047\073\050" +
    "\053\051\065\052\055\053\072\054\046\055\067\056\051" +
    "\057\060\067\044\103\071\001\002\000\042\014\111\015" +
    "\104\016\107\017\100\020\077\021\105\022\114\023\112" +
    "\024\106\025\102\026\101\027\110\030\076\031\113\033" +
    "\115\034\117\001\002\000\060\006\062\015\056\032\050" +
    "\035\061\036\064\040\070\041\063\042\052\043\057\044" +
    "\045\045\047\046\043\047\073\050\053\051\065\052\055" +
    "\053\072\054\046\055\067\056\051\057\060\067\044\103" +
    "\071\001\002\000\120\002\uffc2\003\uffc2\004\uffc2\007\uffc2" +
    "\011\uffc2\012\uffc2\014\111\015\104\016\107\017\100\020" +
    "\077\021\105\022\114\023\112\024\106\025\102\026\101" +
    "\027\110\030\076\031\113\033\115\034\uffc2\036\uffc2\037" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\070\uffc2" +
    "\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100" +
    "\uffc2\101\uffc2\102\uffc2\001\002\000\120\002\uffb9\003\uffb9" +
    "\004\uffb9\007\uffb9\011\uffb9\012\uffb9\014\111\015\104\016" +
    "\107\017\100\020\077\021\105\022\uffb9\023\uffb9\024\106" +
    "\025\102\026\101\027\110\030\uffb9\031\uffb9\033\uffb9\034" +
    "\uffb9\036\uffb9\037\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9" +
    "\064\uffb9\070\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\001\002\000\120" +
    "\002\uffb2\003\uffb2\004\uffb2\007\uffb2\011\uffb2\012\uffb2\014" +
    "\111\015\104\016\107\017\100\020\077\021\105\022\114" +
    "\023\112\024\106\025\102\026\101\027\110\030\uffb2\031" +
    "\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\070\uffb2\072\uffb2\073\uffb2\074" +
    "\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2" +
    "\001\002\000\120\002\uffb8\003\uffb8\004\uffb8\007\uffb8\011" +
    "\uffb8\012\uffb8\014\111\015\104\016\107\017\100\020\077" +
    "\021\105\022\uffb8\023\uffb8\024\106\025\102\026\101\027" +
    "\110\030\uffb8\031\uffb8\033\uffb8\034\uffb8\036\uffb8\037\uffb8" +
    "\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\070\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8" +
    "\101\uffb8\102\uffb8\001\002\000\120\002\uffbf\003\uffbf\004" +
    "\uffbf\007\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016\107" +
    "\017\100\020\uffbf\021\105\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf" +
    "\036\uffbf\037\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064" +
    "\uffbf\070\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf" +
    "\077\uffbf\100\uffbf\101\uffbf\102\uffbf\001\002\000\120\002" +
    "\uffb5\003\uffb5\004\uffb5\007\uffb5\011\uffb5\012\uffb5\014\111" +
    "\015\104\016\107\017\100\020\077\021\105\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\033\uffb5\034\uffb5\036\uffb5\037\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\070\uffb5\072\uffb5\073\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\001" +
    "\002\000\120\002\uffbd\003\uffbd\004\uffbd\007\uffbd\011\uffbd" +
    "\012\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\033\uffbd\034\uffbd\036\uffbd\037\uffbd\060" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\070\uffbd\072\uffbd" +
    "\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101" +
    "\uffbd\102\uffbd\001\002\000\120\002\uffb6\003\uffb6\004\uffb6" +
    "\007\uffb6\011\uffb6\012\uffb6\014\111\015\104\016\107\017" +
    "\100\020\077\021\105\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\036" +
    "\uffb6\037\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\070\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077" +
    "\uffb6\100\uffb6\101\uffb6\102\uffb6\001\002\000\120\002\uffbb" +
    "\003\uffbb\004\uffbb\007\uffbb\011\uffbb\012\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\033" +
    "\uffbb\034\uffbb\036\uffbb\037\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\070\uffbb\072\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\001\002" +
    "\000\120\002\uffbe\003\uffbe\004\uffbe\007\uffbe\011\uffbe\012" +
    "\uffbe\014\uffbe\015\uffbe\016\107\017\100\020\uffbe\021\105" +
    "\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\033\uffbe\034\uffbe\036\uffbe\037\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\063\uffbe\064\uffbe\070\uffbe\072\uffbe\073" +
    "\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe" +
    "\102\uffbe\001\002\000\042\007\133\014\111\015\104\016" +
    "\107\017\100\020\077\021\105\022\114\023\112\024\106" +
    "\025\102\026\101\027\110\030\076\031\113\033\115\001" +
    "\002\000\120\002\uffa6\003\uffa6\004\uffa6\007\uffa6\011\uffa6" +
    "\012\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\033\uffa6\034\uffa6\036\uffa6\037\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\070\uffa6\072\uffa6" +
    "\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101" +
    "\uffa6\102\uffa6\001\002\000\120\002\uffb7\003\uffb7\004\uffb7" +
    "\007\uffb7\011\uffb7\012\uffb7\014\111\015\104\016\107\017" +
    "\100\020\077\021\105\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7\036" +
    "\uffb7\037\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7" +
    "\070\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077" +
    "\uffb7\100\uffb7\101\uffb7\102\uffb7\001\002\000\120\002\uffb4" +
    "\003\uffb4\004\uffb4\007\uffb4\011\uffb4\012\uffb4\014\111\015" +
    "\104\016\107\017\100\020\077\021\105\022\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\033" +
    "\uffb4\034\uffb4\036\uffb4\037\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\070\uffb4\072\uffb4\073\uffb4\074\uffb4\075" +
    "\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\001\002" +
    "\000\120\002\uffbc\003\uffbc\004\uffbc\007\uffbc\011\uffbc\012" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\033\uffbc\034\uffbc\036\uffbc\037\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\064\uffbc\070\uffbc\072\uffbc\073" +
    "\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc" +
    "\102\uffbc\001\002\000\120\002\uffba\003\uffba\004\uffba\007" +
    "\uffba\011\uffba\012\uffba\014\111\015\104\016\107\017\100" +
    "\020\uffba\021\105\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\033\uffba\034\uffba\036\uffba" +
    "\037\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\070" +
    "\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba" +
    "\100\uffba\101\uffba\102\uffba\001\002\000\120\002\uffb3\003" +
    "\uffb3\004\uffb3\007\uffb3\011\uffb3\012\uffb3\014\111\015\104" +
    "\016\107\017\100\020\077\021\105\022\114\023\112\024" +
    "\106\025\102\026\101\027\110\030\uffb3\031\uffb3\033\uffb3" +
    "\034\uffb3\036\uffb3\037\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\070\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3" +
    "\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\001\002\000" +
    "\060\006\062\015\056\032\050\035\061\036\064\040\070" +
    "\041\063\042\052\043\057\044\045\045\047\046\043\047" +
    "\073\050\053\051\065\052\055\053\072\054\046\055\067" +
    "\056\051\057\060\067\044\103\071\001\002\000\042\007" +
    "\143\014\111\015\104\016\107\017\100\020\077\021\105" +
    "\022\114\023\112\024\106\025\102\026\101\027\110\030" +
    "\076\031\113\033\115\001\002\000\120\002\uffa2\003\uffa2" +
    "\004\uffa2\007\uffa2\011\uffa2\012\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2\034" +
    "\uffa2\036\uffa2\037\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2" +
    "\064\uffa2\070\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076" +
    "\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2\001\002\000\060" +
    "\006\062\015\056\032\050\035\061\036\064\040\070\041" +
    "\063\042\052\043\057\044\045\045\047\046\043\047\073" +
    "\050\053\051\065\052\055\053\072\054\046\055\067\056" +
    "\051\057\060\067\044\103\071\001\002\000\044\007\uffc9" +
    "\014\111\015\104\016\107\017\100\020\077\021\105\022" +
    "\114\023\112\024\106\025\102\026\101\027\110\030\076" +
    "\031\113\033\115\037\uffc9\001\002\000\006\007\150\037" +
    "\147\001\002\000\060\006\062\015\056\032\050\035\061" +
    "\036\064\040\070\041\063\042\052\043\057\044\045\045" +
    "\047\046\043\047\073\050\053\051\065\052\055\053\072" +
    "\054\046\055\067\056\051\057\060\067\044\103\071\001" +
    "\002\000\120\002\uffc4\003\uffc4\004\uffc4\007\uffc4\011\uffc4" +
    "\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\033\uffc4\034\uffc4\036\uffc4\037\uffc4\060" +
    "\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\070\uffc4\072\uffc4" +
    "\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101" +
    "\uffc4\102\uffc4\001\002\000\044\007\uffca\014\111\015\104" +
    "\016\107\017\100\020\077\021\105\022\114\023\112\024" +
    "\106\025\102\026\101\027\110\030\076\031\113\033\115" +
    "\037\uffca\001\002\000\060\006\062\015\056\032\050\035" +
    "\061\036\064\040\070\041\063\042\052\043\057\044\045" +
    "\045\047\046\043\047\073\050\053\051\065\052\055\053" +
    "\072\054\046\055\067\056\051\057\060\067\044\103\071" +
    "\001\002\000\044\007\155\014\111\015\104\016\107\017" +
    "\100\020\077\021\105\022\114\023\112\024\106\025\102" +
    "\026\101\027\110\030\076\031\113\033\115\037\154\001" +
    "\002\000\060\006\062\015\056\032\050\035\061\036\064" +
    "\040\070\041\063\042\052\043\057\044\045\045\047\046" +
    "\043\047\073\050\053\051\065\052\055\053\072\054\046" +
    "\055\067\056\051\057\060\067\044\103\071\001\002\000" +
    "\120\002\uffa1\003\uffa1\004\uffa1\007\uffa1\011\uffa1\012\uffa1" +
    "\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\033\uffa1\034\uffa1\036\uffa1\037\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\070\uffa1\072\uffa1\073\uffa1" +
    "\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\102" +
    "\uffa1\001\002\000\042\007\157\014\111\015\104\016\107" +
    "\017\100\020\077\021\105\022\114\023\112\024\106\025" +
    "\102\026\101\027\110\030\076\031\113\033\115\001\002" +
    "\000\120\002\uffa0\003\uffa0\004\uffa0\007\uffa0\011\uffa0\012" +
    "\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\033\uffa0\034\uffa0\036\uffa0\037\uffa0\060\uffa0" +
    "\061\uffa0\062\uffa0\063\uffa0\064\uffa0\070\uffa0\072\uffa0\073" +
    "\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0" +
    "\102\uffa0\001\002\000\060\006\062\015\056\032\050\035" +
    "\061\036\064\040\070\041\063\042\052\043\057\044\045" +
    "\045\047\046\043\047\073\050\053\051\065\052\055\053" +
    "\072\054\046\055\067\056\051\057\060\067\044\103\071" +
    "\001\002\000\042\007\162\014\111\015\104\016\107\017" +
    "\100\020\077\021\105\022\114\023\112\024\106\025\102" +
    "\026\101\027\110\030\076\031\113\033\115\001\002\000" +
    "\120\002\uffa4\003\uffa4\004\uffa4\007\uffa4\011\uffa4\012\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\033\uffa4\034\uffa4\036\uffa4\037\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\063\uffa4\064\uffa4\070\uffa4\072\uffa4\073\uffa4" +
    "\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4\102" +
    "\uffa4\001\002\000\060\006\062\015\056\032\050\035\061" +
    "\036\064\040\070\041\063\042\052\043\057\044\045\045" +
    "\047\046\043\047\073\050\053\051\065\052\055\053\072" +
    "\054\046\055\067\056\051\057\060\067\044\103\071\001" +
    "\002\000\042\011\165\014\111\015\104\016\107\017\100" +
    "\020\077\021\105\022\114\023\112\024\106\025\102\026" +
    "\101\027\110\030\076\031\113\033\115\001\002\000\120" +
    "\002\uffad\003\uffad\004\uffad\007\uffad\011\uffad\012\uffad\014" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\033\uffad\034\uffad\036\uffad\037\uffad\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\064\uffad\070\uffad\072\uffad\073\uffad\074" +
    "\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad" +
    "\001\002\000\042\007\167\014\111\015\104\016\107\017" +
    "\100\020\077\021\105\022\114\023\112\024\106\025\102" +
    "\026\101\027\110\030\076\031\113\033\115\001\002\000" +
    "\120\002\uffb1\003\uffb1\004\uffb1\007\uffb1\011\uffb1\012\uffb1" +
    "\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\033\uffb1\034\uffb1\036\uffb1\037\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\070\uffb1\072\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102" +
    "\uffb1\001\002\000\006\007\171\037\147\001\002\000\120" +
    "\002\uffc3\003\uffc3\004\uffc3\007\uffc3\011\uffc3\012\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3\060\uffc3\061\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\070\uffc3\072\uffc3\073\uffc3\074" +
    "\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3" +
    "\001\002\000\060\006\062\015\056\032\050\035\061\036" +
    "\064\040\070\041\063\042\052\043\057\044\045\045\047" +
    "\046\043\047\073\050\053\051\065\052\055\053\072\054" +
    "\046\055\067\056\051\057\060\067\044\103\071\001\002" +
    "\000\044\007\175\014\111\015\104\016\107\017\100\020" +
    "\077\021\105\022\114\023\112\024\106\025\102\026\101" +
    "\027\110\030\076\031\113\033\115\037\174\001\002\000" +
    "\060\006\062\015\056\032\050\035\061\036\064\040\070" +
    "\041\063\042\052\043\057\044\045\045\047\046\043\047" +
    "\073\050\053\051\065\052\055\053\072\054\046\055\067" +
    "\056\051\057\060\067\044\103\071\001\002\000\120\002" +
    "\uff9d\003\uff9d\004\uff9d\007\uff9d\011\uff9d\012\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\033\uff9d\034\uff9d\036\uff9d\037\uff9d\060\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\064\uff9d\070\uff9d\072\uff9d\073\uff9d\074\uff9d" +
    "\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\001" +
    "\002\000\042\007\177\014\111\015\104\016\107\017\100" +
    "\020\077\021\105\022\114\023\112\024\106\025\102\026" +
    "\101\027\110\030\076\031\113\033\115\001\002\000\120" +
    "\002\uff9c\003\uff9c\004\uff9c\007\uff9c\011\uff9c\012\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\033\uff9c\034\uff9c\036\uff9c\037\uff9c\060\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\070\uff9c\072\uff9c\073\uff9c\074" +
    "\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c" +
    "\001\002\000\120\002\uffc0\003\uffc0\004\uffc0\007\uffc0\011" +
    "\uffc0\012\uffc0\014\uffc0\015\uffc0\016\107\017\100\020\uffc0" +
    "\021\105\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\033\uffc0\034\uffc0\036\uffc0\037\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\070\uffc0\072" +
    "\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0" +
    "\101\uffc0\102\uffc0\001\002\000\060\006\062\015\056\032" +
    "\050\035\061\036\064\040\070\041\063\042\052\043\057" +
    "\044\045\045\047\046\043\047\073\050\053\051\065\052" +
    "\055\053\072\054\046\055\067\056\051\057\060\067\044" +
    "\103\071\001\002\000\042\007\203\014\111\015\104\016" +
    "\107\017\100\020\077\021\105\022\114\023\112\024\106" +
    "\025\102\026\101\027\110\030\076\031\113\033\115\001" +
    "\002\000\120\002\uffa3\003\uffa3\004\uffa3\007\uffa3\011\uffa3" +
    "\012\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\033\uffa3\034\uffa3\036\uffa3\037\uffa3\060" +
    "\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\070\uffa3\072\uffa3" +
    "\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3\101" +
    "\uffa3\102\uffa3\001\002\000\060\006\062\015\056\032\050" +
    "\035\061\036\064\040\070\041\063\042\052\043\057\044" +
    "\045\045\047\046\043\047\073\050\053\051\065\052\055" +
    "\053\072\054\046\055\067\056\051\057\060\067\044\103" +
    "\071\001\002\000\042\007\206\014\111\015\104\016\107" +
    "\017\100\020\077\021\105\022\114\023\112\024\106\025" +
    "\102\026\101\027\110\030\076\031\113\033\115\001\002" +
    "\000\004\005\207\001\002\000\036\003\031\036\025\060" +
    "\011\061\023\062\024\063\007\064\032\070\016\072\006" +
    "\073\021\074\035\076\027\077\004\100\013\001\002\000" +
    "\040\003\031\004\212\036\025\060\011\061\023\062\024" +
    "\063\007\064\032\070\016\072\006\073\021\074\035\076" +
    "\027\077\004\100\013\001\002\000\040\003\uffd2\004\uffd2" +
    "\036\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\070" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\076\uffd2\077\uffd2\100\uffd2" +
    "\001\002\000\046\002\uffde\003\uffde\004\uffde\036\uffde\060" +
    "\uffde\061\uffde\062\uffde\063\uffde\064\uffde\070\uffde\072\uffde" +
    "\073\uffde\074\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102" +
    "\uffde\001\002\000\040\003\uffd3\004\uffd3\036\uffd3\060\uffd3" +
    "\061\uffd3\062\uffd3\063\uffd3\064\uffd3\070\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\076\uffd3\077\uffd3\100\uffd3\001\002\000\060" +
    "\006\062\015\056\032\050\035\061\036\064\040\070\041" +
    "\063\042\052\043\057\044\045\045\047\046\043\047\073" +
    "\050\053\051\065\052\055\053\072\054\046\055\067\056" +
    "\051\057\060\067\044\103\071\001\002\000\042\007\216" +
    "\014\111\015\104\016\107\017\100\020\077\021\105\022" +
    "\114\023\112\024\106\025\102\026\101\027\110\030\076" +
    "\031\113\033\115\001\002\000\120\002\uffa5\003\uffa5\004" +
    "\uffa5\007\uffa5\011\uffa5\012\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5" +
    "\036\uffa5\037\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064" +
    "\uffa5\070\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5" +
    "\077\uffa5\100\uffa5\101\uffa5\102\uffa5\001\002\000\060\006" +
    "\062\015\056\032\050\035\061\036\064\040\070\041\063" +
    "\042\052\043\057\044\045\045\047\046\043\047\073\050" +
    "\053\051\065\052\055\053\072\054\046\055\067\056\051" +
    "\057\060\067\044\103\071\001\002\000\044\007\222\014" +
    "\111\015\104\016\107\017\100\020\077\021\105\022\114" +
    "\023\112\024\106\025\102\026\101\027\110\030\076\031" +
    "\113\033\115\037\221\001\002\000\060\006\062\015\056" +
    "\032\050\035\061\036\064\040\070\041\063\042\052\043" +
    "\057\044\045\045\047\046\043\047\073\050\053\051\065" +
    "\052\055\053\072\054\046\055\067\056\051\057\060\067" +
    "\044\103\071\001\002\000\120\002\uff9f\003\uff9f\004\uff9f" +
    "\007\uff9f\011\uff9f\012\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\033\uff9f\034\uff9f\036" +
    "\uff9f\037\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f" +
    "\070\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077" +
    "\uff9f\100\uff9f\101\uff9f\102\uff9f\001\002\000\042\007\224" +
    "\014\111\015\104\016\107\017\100\020\077\021\105\022" +
    "\114\023\112\024\106\025\102\026\101\027\110\030\076" +
    "\031\113\033\115\001\002\000\120\002\uff9e\003\uff9e\004" +
    "\uff9e\007\uff9e\011\uff9e\012\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\033\uff9e\034\uff9e" +
    "\036\uff9e\037\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064" +
    "\uff9e\070\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e" +
    "\077\uff9e\100\uff9e\101\uff9e\102\uff9e\001\002\000\120\002" +
    "\uffc1\003\uffc1\004\uffc1\007\uffc1\011\uffc1\012\uffc1\014\111" +
    "\015\104\016\107\017\100\020\077\021\105\022\114\023" +
    "\112\024\106\025\102\026\101\027\110\030\076\031\113" +
    "\033\115\034\uffc1\036\uffc1\037\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\063\uffc1\064\uffc1\070\uffc1\072\uffc1\073\uffc1\074\uffc1" +
    "\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\001" +
    "\002\000\060\006\062\015\056\032\050\035\061\036\064" +
    "\040\070\041\063\042\052\043\057\044\045\045\047\046" +
    "\043\047\073\050\053\051\065\052\055\053\072\054\046" +
    "\055\067\056\051\057\060\067\044\103\071\001\002\000" +
    "\042\007\230\014\111\015\104\016\107\017\100\020\077" +
    "\021\105\022\114\023\112\024\106\025\102\026\101\027" +
    "\110\030\076\031\113\033\115\001\002\000\120\002\uffa8" +
    "\003\uffa8\004\uffa8\007\uffa8\011\uffa8\012\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\033" +
    "\uffa8\034\uffa8\036\uffa8\037\uffa8\060\uffa8\061\uffa8\062\uffa8" +
    "\063\uffa8\064\uffa8\070\uffa8\072\uffa8\073\uffa8\074\uffa8\075" +
    "\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\001\002" +
    "\000\060\006\062\015\056\032\050\035\061\036\064\040" +
    "\070\041\063\042\052\043\057\044\045\045\047\046\043" +
    "\047\073\050\053\051\065\052\055\053\072\054\046\055" +
    "\067\056\051\057\060\067\044\103\071\001\002\000\042" +
    "\007\233\014\111\015\104\016\107\017\100\020\077\021" +
    "\105\022\114\023\112\024\106\025\102\026\101\027\110" +
    "\030\076\031\113\033\115\001\002\000\120\002\uffa9\003" +
    "\uffa9\004\uffa9\007\uffa9\011\uffa9\012\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\033\uffa9" +
    "\034\uffa9\036\uffa9\037\uffa9\060\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\070\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9" +
    "\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\001\002\000" +
    "\060\006\062\015\056\032\050\035\061\036\064\040\070" +
    "\041\063\042\052\043\057\044\045\045\047\046\043\047" +
    "\073\050\053\051\065\052\055\053\072\054\046\055\067" +
    "\056\051\057\060\067\044\103\071\001\002\000\042\007" +
    "\236\014\111\015\104\016\107\017\100\020\077\021\105" +
    "\022\114\023\112\024\106\025\102\026\101\027\110\030" +
    "\076\031\113\033\115\001\002\000\120\002\uffa7\003\uffa7" +
    "\004\uffa7\007\uffa7\011\uffa7\012\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7\034" +
    "\uffa7\036\uffa7\037\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\070\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076" +
    "\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7\001\002\000\004" +
    "\036\240\001\002\000\004\037\241\001\002\000\004\067" +
    "\242\001\002\000\004\037\243\001\002\000\004\067\244" +
    "\001\002\000\004\037\245\001\002\000\004\067\246\001" +
    "\002\000\004\037\247\001\002\000\004\067\250\001\002" +
    "\000\004\007\251\001\002\000\050\002\uffc6\003\uffc6\004" +
    "\uffc6\012\253\036\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\064\uffc6\070\uffc6\072\uffc6\073\uffc6\074\uffc6\076\uffc6\077" +
    "\uffc6\100\uffc6\101\uffc6\102\uffc6\001\002\000\046\002\uffe5" +
    "\003\uffe5\004\uffe5\036\uffe5\060\uffe5\061\uffe5\062\uffe5\063" +
    "\uffe5\064\uffe5\070\uffe5\072\uffe5\073\uffe5\074\uffe5\076\uffe5" +
    "\077\uffe5\100\uffe5\101\uffe5\102\uffe5\001\002\000\052\002" +
    "\uffc7\003\uffc7\004\uffc7\007\uffc7\036\uffc7\037\uffc7\060\uffc7" +
    "\061\uffc7\062\uffc7\063\uffc7\064\uffc7\070\uffc7\072\uffc7\073" +
    "\uffc7\074\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7" +
    "\001\002\000\046\002\ufff1\003\ufff1\004\ufff1\036\ufff1\060" +
    "\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\070\ufff1\072\ufff1" +
    "\073\ufff1\074\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102" +
    "\ufff1\001\002\000\046\002\uffe0\003\uffe0\004\uffe0\036\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\070\uffe0\072" +
    "\uffe0\073\uffe0\074\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0" +
    "\102\uffe0\001\002\000\062\006\300\015\056\032\050\035" +
    "\061\036\064\040\070\041\063\042\052\043\057\044\045" +
    "\045\047\046\043\047\073\050\053\051\065\052\055\053" +
    "\072\054\046\055\067\056\051\057\060\065\277\067\044" +
    "\103\071\001\002\000\004\036\262\001\002\000\006\007" +
    "\267\037\266\001\002\000\006\007\uffee\037\uffee\001\002" +
    "\000\010\007\uffed\013\263\037\uffed\001\002\000\060\006" +
    "\062\015\056\032\050\035\061\036\064\040\070\041\063" +
    "\042\052\043\057\044\045\045\047\046\043\047\073\050" +
    "\053\051\065\052\055\053\072\054\046\055\067\056\051" +
    "\057\060\067\044\103\071\001\002\000\112\002\uffc6\003" +
    "\uffc6\004\uffc6\007\uffc6\012\253\014\111\015\104\016\107" +
    "\017\100\020\077\021\105\022\114\023\112\024\106\025" +
    "\102\026\101\027\110\030\076\031\113\033\115\036\uffc6" +
    "\037\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\070" +
    "\uffc6\072\uffc6\073\uffc6\074\uffc6\076\uffc6\077\uffc6\100\uffc6" +
    "\101\uffc6\102\uffc6\001\002\000\052\002\uffc8\003\uffc8\004" +
    "\uffc8\007\uffc8\036\uffc8\037\uffc8\060\uffc8\061\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\070\uffc8\072\uffc8\073\uffc8\074\uffc8\076" +
    "\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\001\002\000\004" +
    "\036\276\001\002\000\004\013\270\001\002\000\004\025" +
    "\271\001\002\000\004\005\272\001\002\000\036\003\031" +
    "\036\025\060\011\061\023\062\024\063\007\064\032\070" +
    "\016\072\006\073\021\074\035\076\027\077\004\100\013" +
    "\001\002\000\040\003\031\004\274\036\025\060\011\061" +
    "\023\062\024\063\007\064\032\070\016\072\006\073\021" +
    "\074\035\076\027\077\004\100\013\001\002\000\046\002" +
    "\uffe9\003\uffe9\004\uffe9\036\uffe9\060\uffe9\061\uffe9\062\uffe9" +
    "\063\uffe9\064\uffe9\070\uffe9\072\uffe9\073\uffe9\074\uffe9\076" +
    "\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9\001\002\000\006" +
    "\007\uffef\037\uffef\001\002\000\010\007\ufff0\013\263\037" +
    "\ufff0\001\002\000\004\006\307\001\002\000\062\006\062" +
    "\007\301\015\056\032\050\035\061\036\064\040\070\041" +
    "\063\042\052\043\057\044\045\045\047\046\043\047\073" +
    "\050\053\051\065\052\055\053\072\054\046\055\067\056" +
    "\051\057\060\067\044\103\071\001\002\000\004\013\302" +
    "\001\002\000\004\025\303\001\002\000\004\005\304\001" +
    "\002\000\036\003\031\036\025\060\011\061\023\062\024" +
    "\063\007\064\032\070\016\072\006\073\021\074\035\076" +
    "\027\077\004\100\013\001\002\000\040\003\031\004\306" +
    "\036\025\060\011\061\023\062\024\063\007\064\032\070" +
    "\016\072\006\073\021\074\035\076\027\077\004\100\013" +
    "\001\002\000\046\002\uffeb\003\uffeb\004\uffeb\036\uffeb\060" +
    "\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\070\uffeb\072\uffeb" +
    "\073\uffeb\074\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102" +
    "\uffeb\001\002\000\006\007\311\036\262\001\002\000\006" +
    "\007\315\037\266\001\002\000\004\005\312\001\002\000" +
    "\036\003\031\036\025\060\011\061\023\062\024\063\007" +
    "\064\032\070\016\072\006\073\021\074\035\076\027\077" +
    "\004\100\013\001\002\000\040\003\031\004\314\036\025" +
    "\060\011\061\023\062\024\063\007\064\032\070\016\072" +
    "\006\073\021\074\035\076\027\077\004\100\013\001\002" +
    "\000\046\002\uffec\003\uffec\004\uffec\036\uffec\060\uffec\061" +
    "\uffec\062\uffec\063\uffec\064\uffec\070\uffec\072\uffec\073\uffec" +
    "\074\uffec\076\uffec\077\uffec\100\uffec\101\uffec\102\uffec\001" +
    "\002\000\004\005\316\001\002\000\036\003\031\036\025" +
    "\060\011\061\023\062\024\063\007\064\032\070\016\072" +
    "\006\073\021\074\035\076\027\077\004\100\013\001\002" +
    "\000\040\003\031\004\320\036\025\060\011\061\023\062" +
    "\024\063\007\064\032\070\016\072\006\073\021\074\035" +
    "\076\027\077\004\100\013\001\002\000\046\002\uffea\003" +
    "\uffea\004\uffea\036\uffea\060\uffea\061\uffea\062\uffea\063\uffea" +
    "\064\uffea\070\uffea\072\uffea\073\uffea\074\uffea\076\uffea\077" +
    "\uffea\100\uffea\101\uffea\102\uffea\001\002\000\004\036\322" +
    "\001\002\000\004\037\323\001\002\000\004\036\324\001" +
    "\002\000\004\037\325\001\002\000\004\036\326\001\002" +
    "\000\004\037\327\001\002\000\004\036\330\001\002\000" +
    "\004\037\331\001\002\000\004\036\332\001\002\000\004" +
    "\007\333\001\002\000\050\002\uffc6\003\uffc6\004\uffc6\012" +
    "\253\036\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\070\uffc6\072\uffc6\073\uffc6\074\uffc6\076\uffc6\077\uffc6\100" +
    "\uffc6\101\uffc6\102\uffc6\001\002\000\046\002\uffe7\003\uffe7" +
    "\004\uffe7\036\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\070\uffe7\072\uffe7\073\uffe7\074\uffe7\076\uffe7\077\uffe7" +
    "\100\uffe7\101\uffe7\102\uffe7\001\002\000\004\036\336\001" +
    "\002\000\004\037\337\001\002\000\004\036\340\001\002" +
    "\000\004\037\341\001\002\000\004\036\342\001\002\000" +
    "\004\007\343\001\002\000\050\002\uffc6\003\uffc6\004\uffc6" +
    "\012\253\036\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\070\uffc6\072\uffc6\073\uffc6\074\uffc6\076\uffc6\077\uffc6" +
    "\100\uffc6\101\uffc6\102\uffc6\001\002\000\046\002\uffe8\003" +
    "\uffe8\004\uffe8\036\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8" +
    "\064\uffe8\070\uffe8\072\uffe8\073\uffe8\074\uffe8\076\uffe8\077" +
    "\uffe8\100\uffe8\101\uffe8\102\uffe8\001\002\000\036\003\031" +
    "\036\025\060\011\061\023\062\024\063\007\064\032\070" +
    "\016\072\006\073\021\074\035\076\027\077\004\100\013" +
    "\001\002\000\040\003\031\004\347\036\025\060\011\061" +
    "\023\062\024\063\007\064\032\070\016\072\006\073\021" +
    "\074\035\076\027\077\004\100\013\001\002\000\004\072" +
    "\350\001\002\000\004\006\351\001\002\000\060\006\062" +
    "\015\056\032\050\035\061\036\064\040\070\041\063\042" +
    "\052\043\057\044\045\045\047\046\043\047\073\050\053" +
    "\051\065\052\055\053\072\054\046\055\067\056\051\057" +
    "\060\067\044\103\071\001\002\000\042\007\353\014\111" +
    "\015\104\016\107\017\100\020\077\021\105\022\114\023" +
    "\112\024\106\025\102\026\101\027\110\030\076\031\113" +
    "\033\115\001\002\000\050\002\uffc6\003\uffc6\004\uffc6\012" +
    "\253\036\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\070\uffc6\072\uffc6\073\uffc6\074\uffc6\076\uffc6\077\uffc6\100" +
    "\uffc6\101\uffc6\102\uffc6\001\002\000\046\002\uffdd\003\uffdd" +
    "\004\uffdd\036\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\070\uffdd\072\uffdd\073\uffdd\074\uffdd\076\uffdd\077\uffdd" +
    "\100\uffdd\101\uffdd\102\uffdd\001\002\000\060\006\062\015" +
    "\056\032\050\035\061\036\064\040\070\041\063\042\052" +
    "\043\057\044\045\045\047\046\043\047\073\050\053\051" +
    "\065\052\055\053\072\054\046\055\067\056\051\057\060" +
    "\067\044\103\071\001\002\000\042\007\357\014\111\015" +
    "\104\016\107\017\100\020\077\021\105\022\114\023\112" +
    "\024\106\025\102\026\101\027\110\030\076\031\113\033" +
    "\115\001\002\000\004\005\360\001\002\000\036\003\031" +
    "\036\025\060\011\061\023\062\024\063\007\064\032\070" +
    "\016\072\006\073\021\074\035\076\027\077\004\100\013" +
    "\001\002\000\040\003\031\004\362\036\025\060\011\061" +
    "\023\062\024\063\007\064\032\070\016\072\006\073\021" +
    "\074\035\076\027\077\004\100\013\001\002\000\050\002" +
    "\uffd9\003\uffd9\004\uffd9\036\uffd9\060\uffd9\061\uffd9\062\uffd9" +
    "\063\uffd9\064\uffd9\070\uffd9\071\363\072\uffd9\073\uffd9\074" +
    "\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\001\002" +
    "\000\006\005\u0104\070\u0105\001\002\000\050\002\uffd7\003" +
    "\uffd7\004\uffd7\036\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7" +
    "\064\uffd7\070\uffd7\071\365\072\uffd7\073\uffd7\074\uffd7\076" +
    "\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\001\002\000\006" +
    "\005\366\070\367\001\002\000\036\003\031\036\025\060" +
    "\011\061\023\062\024\063\007\064\032\070\016\072\006" +
    "\073\021\074\035\076\027\077\004\100\013\001\002\000" +
    "\004\006\370\001\002\000\060\006\062\015\056\032\050" +
    "\035\061\036\064\040\070\041\063\042\052\043\057\044" +
    "\045\045\047\046\043\047\073\050\053\051\065\052\055" +
    "\053\072\054\046\055\067\056\051\057\060\067\044\103" +
    "\071\001\002\000\042\007\372\014\111\015\104\016\107" +
    "\017\100\020\077\021\105\022\114\023\112\024\106\025" +
    "\102\026\101\027\110\030\076\031\113\033\115\001\002" +
    "\000\004\005\373\001\002\000\036\003\031\036\025\060" +
    "\011\061\023\062\024\063\007\064\032\070\016\072\006" +
    "\073\021\074\035\076\027\077\004\100\013\001\002\000" +
    "\040\003\uffce\004\uffce\036\uffce\060\uffce\061\uffce\062\uffce" +
    "\063\uffce\064\uffce\070\uffce\072\uffce\073\uffce\074\uffce\076" +
    "\uffce\077\uffce\100\uffce\001\002\000\040\003\031\004\376" +
    "\036\025\060\011\061\023\062\024\063\007\064\032\070" +
    "\016\072\006\073\021\074\035\076\027\077\004\100\013" +
    "\001\002\000\050\002\uffd5\003\uffd5\004\uffd5\036\uffd5\060" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\070\uffd5\071\uffd5" +
    "\072\uffd5\073\uffd5\074\uffd5\076\uffd5\077\uffd5\100\uffd5\101" +
    "\uffd5\102\uffd5\001\002\000\040\003\uffcf\004\uffcf\036\uffcf" +
    "\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\070\uffcf\072" +
    "\uffcf\073\uffcf\074\uffcf\076\uffcf\077\uffcf\100\uffcf\001\002" +
    "\000\040\003\uffd0\004\uffd0\036\uffd0\060\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\064\uffd0\070\uffd0\072\uffd0\073\uffd0\074\uffd0" +
    "\076\uffd0\077\uffd0\100\uffd0\001\002\000\040\003\031\004" +
    "\u0102\036\025\060\011\061\023\062\024\063\007\064\032" +
    "\070\016\072\006\073\021\074\035\076\027\077\004\100" +
    "\013\001\002\000\046\002\uffd6\003\uffd6\004\uffd6\036\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\070\uffd6\072" +
    "\uffd6\073\uffd6\074\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6" +
    "\102\uffd6\001\002\000\040\003\uffd1\004\uffd1\036\uffd1\060" +
    "\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\070\uffd1\072\uffd1" +
    "\073\uffd1\074\uffd1\076\uffd1\077\uffd1\100\uffd1\001\002\000" +
    "\036\003\031\036\025\060\011\061\023\062\024\063\007" +
    "\064\032\070\016\072\006\073\021\074\035\076\027\077" +
    "\004\100\013\001\002\000\004\006\u0106\001\002\000\060" +
    "\006\062\015\056\032\050\035\061\036\064\040\070\041" +
    "\063\042\052\043\057\044\045\045\047\046\043\047\073" +
    "\050\053\051\065\052\055\053\072\054\046\055\067\056" +
    "\051\057\060\067\044\103\071\001\002\000\042\007\u0108" +
    "\014\111\015\104\016\107\017\100\020\077\021\105\022" +
    "\114\023\112\024\106\025\102\026\101\027\110\030\076" +
    "\031\113\033\115\001\002\000\004\005\u0109\001\002\000" +
    "\036\003\031\036\025\060\011\061\023\062\024\063\007" +
    "\064\032\070\016\072\006\073\021\074\035\076\027\077" +
    "\004\100\013\001\002\000\040\003\031\004\u010b\036\025" +
    "\060\011\061\023\062\024\063\007\064\032\070\016\072" +
    "\006\073\021\074\035\076\027\077\004\100\013\001\002" +
    "\000\050\002\uffd4\003\uffd4\004\uffd4\036\uffd4\060\uffd4\061" +
    "\uffd4\062\uffd4\063\uffd4\064\uffd4\070\uffd4\071\uffd4\072\uffd4" +
    "\073\uffd4\074\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102" +
    "\uffd4\001\002\000\040\003\031\004\u010d\036\025\060\011" +
    "\061\023\062\024\063\007\064\032\070\016\072\006\073" +
    "\021\074\035\076\027\077\004\100\013\001\002\000\046" +
    "\002\uffd8\003\uffd8\004\uffd8\036\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\063\uffd8\064\uffd8\070\uffd8\072\uffd8\073\uffd8\074\uffd8" +
    "\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\001\002\000" +
    "\060\006\062\015\056\032\050\035\061\036\064\040\070" +
    "\041\063\042\052\043\057\044\045\045\047\046\043\047" +
    "\073\050\053\051\065\052\055\053\072\054\046\055\067" +
    "\056\051\057\060\067\044\103\071\001\002\000\042\007" +
    "\u0110\014\111\015\104\016\107\017\100\020\077\021\105" +
    "\022\114\023\112\024\106\025\102\026\101\027\110\030" +
    "\076\031\113\033\115\001\002\000\004\005\u0111\001\002" +
    "\000\004\101\u0113\001\002\000\010\004\u0118\101\u011a\102" +
    "\u0119\001\002\000\060\006\062\015\056\032\050\035\061" +
    "\036\064\040\070\041\063\042\052\043\057\044\045\045" +
    "\047\046\043\047\073\050\053\051\065\052\055\053\072" +
    "\054\046\055\067\056\051\057\060\067\044\103\071\001" +
    "\002\000\042\014\111\015\104\016\107\017\100\020\077" +
    "\021\105\022\114\023\112\024\106\025\102\026\101\027" +
    "\110\030\076\031\113\033\115\034\u0115\001\002\000\036" +
    "\003\031\036\025\060\011\061\023\062\024\063\007\064" +
    "\032\070\016\072\006\073\021\074\035\076\027\077\004" +
    "\100\013\001\002\000\044\003\031\004\uffe1\036\025\060" +
    "\011\061\023\062\024\063\007\064\032\070\016\072\006" +
    "\073\021\074\035\076\027\077\004\100\013\101\uffe1\102" +
    "\uffe1\001\002\000\046\002\uffff\003\uffff\004\uffff\036\uffff" +
    "\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff\070\uffff\072" +
    "\uffff\073\uffff\074\uffff\076\uffff\077\uffff\100\uffff\101\uffff" +
    "\102\uffff\001\002\000\046\002\uffe4\003\uffe4\004\uffe4\036" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\070\uffe4" +
    "\072\uffe4\073\uffe4\074\uffe4\076\uffe4\077\uffe4\100\uffe4\101" +
    "\uffe4\102\uffe4\001\002\000\004\034\u011e\001\002\000\060" +
    "\006\062\015\056\032\050\035\061\036\064\040\070\041" +
    "\063\042\052\043\057\044\045\045\047\046\043\047\073" +
    "\050\053\051\065\052\055\053\072\054\046\055\067\056" +
    "\051\057\060\067\044\103\071\001\002\000\042\014\111" +
    "\015\104\016\107\017\100\020\077\021\105\022\114\023" +
    "\112\024\106\025\102\026\101\027\110\030\076\031\113" +
    "\033\115\034\u011c\001\002\000\036\003\031\036\025\060" +
    "\011\061\023\062\024\063\007\064\032\070\016\072\006" +
    "\073\021\074\035\076\027\077\004\100\013\001\002\000" +
    "\044\003\031\004\uffe2\036\025\060\011\061\023\062\024" +
    "\063\007\064\032\070\016\072\006\073\021\074\035\076" +
    "\027\077\004\100\013\101\uffe2\102\uffe2\001\002\000\036" +
    "\003\031\036\025\060\011\061\023\062\024\063\007\064" +
    "\032\070\016\072\006\073\021\074\035\076\027\077\004" +
    "\100\013\001\002\000\040\003\031\004\u0120\036\025\060" +
    "\011\061\023\062\024\063\007\064\032\070\016\072\006" +
    "\073\021\074\035\076\027\077\004\100\013\001\002\000" +
    "\046\002\uffe3\003\uffe3\004\uffe3\036\uffe3\060\uffe3\061\uffe3" +
    "\062\uffe3\063\uffe3\064\uffe3\070\uffe3\072\uffe3\073\uffe3\074" +
    "\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\001\002" +
    "\000\060\006\062\015\056\032\050\035\061\036\064\040" +
    "\070\041\063\042\052\043\057\044\045\045\047\046\043" +
    "\047\073\050\053\051\065\052\055\053\072\054\046\055" +
    "\067\056\051\057\060\067\044\103\071\001\002\000\042" +
    "\007\u0123\014\111\015\104\016\107\017\100\020\077\021" +
    "\105\022\114\023\112\024\106\025\102\026\101\027\110" +
    "\030\076\031\113\033\115\001\002\000\050\002\uffc6\003" +
    "\uffc6\004\uffc6\012\253\036\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\064\uffc6\070\uffc6\072\uffc6\073\uffc6\074\uffc6\076" +
    "\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\001\002\000\046" +
    "\002\uffc5\003\uffc5\004\uffc5\036\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\070\uffc5\072\uffc5\073\uffc5\074\uffc5" +
    "\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\001\002\000" +
    "\004\036\u0126\001\002\000\004\037\u0127\001\002\000\004" +
    "\036\u0128\001\002\000\004\037\u0129\001\002\000\004\036" +
    "\u012a\001\002\000\004\007\u012b\001\002\000\050\002\uffc6" +
    "\003\uffc6\004\uffc6\012\253\036\uffc6\060\uffc6\061\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\070\uffc6\072\uffc6\073\uffc6\074\uffc6" +
    "\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\001\002\000" +
    "\046\002\uffe6\003\uffe6\004\uffe6\036\uffe6\060\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\064\uffe6\070\uffe6\072\uffe6\073\uffe6\074" +
    "\uffe6\076\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6\001\002" +
    "\000\060\006\062\015\056\032\050\035\061\036\064\040" +
    "\070\041\063\042\052\043\057\044\045\045\047\046\043" +
    "\047\073\050\053\051\065\052\055\053\072\054\046\055" +
    "\067\056\051\057\060\067\044\103\071\001\002\000\042" +
    "\007\u012f\014\111\015\104\016\107\017\100\020\077\021" +
    "\105\022\114\023\112\024\106\025\102\026\101\027\110" +
    "\030\076\031\113\033\115\001\002\000\004\005\u0130\001" +
    "\002\000\036\003\031\036\025\060\011\061\023\062\024" +
    "\063\007\064\032\070\016\072\006\073\021\074\035\076" +
    "\027\077\004\100\013\001\002\000\040\003\uffda\004\uffda" +
    "\036\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\070" +
    "\uffda\072\uffda\073\uffda\074\uffda\076\uffda\077\uffda\100\uffda" +
    "\001\002\000\040\003\031\004\u0133\036\025\060\011\061" +
    "\023\062\024\063\007\064\032\070\016\072\006\073\021" +
    "\074\035\076\027\077\004\100\013\001\002\000\046\002" +
    "\uffdc\003\uffdc\004\uffdc\036\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\064\uffdc\070\uffdc\072\uffdc\073\uffdc\074\uffdc\076" +
    "\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\001\002\000\040" +
    "\003\uffdb\004\uffdb\036\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\070\uffdb\072\uffdb\073\uffdb\074\uffdb\076\uffdb" +
    "\077\uffdb\100\uffdb\001\002\000\046\002\uffdf\003\uffdf\004" +
    "\uffdf\036\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf" +
    "\070\uffdf\072\uffdf\073\uffdf\074\uffdf\076\uffdf\077\uffdf\100" +
    "\uffdf\101\uffdf\102\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\040\002\037\003\011\004\007\007\013\010" +
    "\032\022\027\024\025\026\036\027\021\030\033\031\014" +
    "\032\016\034\035\036\017\037\004\001\001\000\004\011" +
    "\u0134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\u0116\007\013\010\032\022\027\024\025\026\036\027\021" +
    "\030\033\031\014\032\016\034\035\036\017\037\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\053\017\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\224\017\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\177\017" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\167\016\144\017\065\001\001\000\006\016\165\017" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\074\017\065\001\001\000\002\001\001\000" +
    "\006\016\137\017\065\001\001\000\006\016\136\017\065" +
    "\001\001\000\006\016\135\017\065\001\001\000\006\016" +
    "\134\017\065\001\001\000\006\016\133\017\065\001\001" +
    "\000\006\016\131\017\065\001\001\000\006\016\130\017" +
    "\065\001\001\000\006\016\127\017\065\001\001\000\006" +
    "\016\126\017\065\001\001\000\006\016\125\017\065\001" +
    "\001\000\006\016\124\017\065\001\001\000\006\016\123" +
    "\017\065\001\001\000\006\016\122\017\065\001\001\000" +
    "\006\016\121\017\065\001\001\000\006\016\120\017\065" +
    "\001\001\000\006\016\115\017\065\001\001\000\002\001" +
    "\001\000\006\016\117\017\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\141\017\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\145\016\144\017\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\150\017\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\152\017\065\001\001\000\002\001\001\000\006\016\155" +
    "\017\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\160\017\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\163\017\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\172\017\065\001\001\000\002\001\001\000\006" +
    "\016\175\017\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\201" +
    "\017\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\204\017\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\210\007\013\010\032\022\027\023" +
    "\207\024\025\026\036\027\021\030\033\031\014\032\016" +
    "\034\035\036\017\037\004\001\001\000\034\004\212\007" +
    "\013\010\032\022\027\024\025\026\036\027\021\030\033" +
    "\031\014\032\016\034\035\036\017\037\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\214\017\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\217\017\065\001\001\000\002\001\001" +
    "\000\006\016\222\017\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\226\017\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\231\017\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\234\017\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\263\017\065\001\001\000" +
    "\006\007\260\040\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\263\017\065\001" +
    "\001\000\004\011\264\001\001\000\002\001\001\000\004" +
    "\007\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\210\007\013\010\032\022\027" +
    "\023\272\024\025\026\036\027\021\030\033\031\014\032" +
    "\016\034\035\036\017\037\004\001\001\000\034\004\212" +
    "\007\013\010\032\022\027\024\025\026\036\027\021\030" +
    "\033\031\014\032\016\034\035\036\017\037\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\165\017\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\210\007\013\010\032\022\027\023\304\024\025\026\036" +
    "\027\021\030\033\031\014\032\016\034\035\036\017\037" +
    "\004\001\001\000\034\004\212\007\013\010\032\022\027" +
    "\024\025\026\036\027\021\030\033\031\014\032\016\034" +
    "\035\036\017\037\004\001\001\000\002\001\001\000\006" +
    "\007\260\040\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\210\007\013\010\032\022\027\023\312" +
    "\024\025\026\036\027\021\030\033\031\014\032\016\034" +
    "\035\036\017\037\004\001\001\000\034\004\212\007\013" +
    "\010\032\022\027\024\025\026\036\027\021\030\033\031" +
    "\014\032\016\034\035\036\017\037\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\210\007\013\010" +
    "\032\022\027\023\316\024\025\026\036\027\021\030\033" +
    "\031\014\032\016\034\035\036\017\037\004\001\001\000" +
    "\034\004\212\007\013\010\032\022\027\024\025\026\036" +
    "\027\021\030\033\031\014\032\016\034\035\036\017\037" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\343\001\001\000\002\001\001" +
    "\000\036\004\210\007\013\010\032\022\027\023\345\024" +
    "\025\026\036\027\021\030\033\031\014\032\016\034\035" +
    "\036\017\037\004\001\001\000\034\004\212\007\013\010" +
    "\032\022\027\024\025\026\036\027\021\030\033\031\014" +
    "\032\016\034\035\036\017\037\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\351\017\065\001\001" +
    "\000\002\001\001\000\004\011\353\001\001\000\002\001" +
    "\001\000\006\016\355\017\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\210\007\013\010\032\022" +
    "\027\023\360\024\025\026\036\027\021\030\033\031\014" +
    "\032\016\034\035\036\017\037\004\001\001\000\034\004" +
    "\212\007\013\010\032\022\027\024\025\026\036\027\021" +
    "\030\033\031\014\032\016\034\035\036\017\037\004\001" +
    "\001\000\004\025\363\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\377\007\013\010" +
    "\032\021\u0100\022\027\024\025\026\036\027\021\030\033" +
    "\031\014\032\016\034\035\036\017\037\004\001\001\000" +
    "\002\001\001\000\006\016\370\017\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\373\007\013\010" +
    "\032\020\374\022\027\024\025\026\036\027\021\030\033" +
    "\031\014\032\016\034\035\036\017\037\004\001\001\000" +
    "\002\001\001\000\034\004\376\007\013\010\032\022\027" +
    "\024\025\026\036\027\021\030\033\031\014\032\016\034" +
    "\035\036\017\037\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\u0102\007\013\010" +
    "\032\022\027\024\025\026\036\027\021\030\033\031\014" +
    "\032\016\034\035\036\017\037\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\373\007\013\010\032" +
    "\020\u010b\022\027\024\025\026\036\027\021\030\033\031" +
    "\014\032\016\034\035\036\017\037\004\001\001\000\002" +
    "\001\001\000\006\016\u0106\017\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\373\007\013\010\032" +
    "\020\u0109\022\027\024\025\026\036\027\021\030\033\031" +
    "\014\032\016\034\035\036\017\037\004\001\001\000\034" +
    "\004\376\007\013\010\032\022\027\024\025\026\036\027" +
    "\021\030\033\031\014\032\016\034\035\036\017\037\004" +
    "\001\001\000\002\001\001\000\034\004\376\007\013\010" +
    "\032\022\027\024\025\026\036\027\021\030\033\031\014" +
    "\032\016\034\035\036\017\037\004\001\001\000\002\001" +
    "\001\000\006\016\u010e\017\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\u0111\001\001\000\002\001" +
    "\001\000\006\016\u0113\017\065\001\001\000\002\001\001" +
    "\000\036\003\u0115\004\007\007\013\010\032\022\027\024" +
    "\025\026\036\027\021\030\033\031\014\032\016\034\035" +
    "\036\017\037\004\001\001\000\034\004\u0116\007\013\010" +
    "\032\022\027\024\025\026\036\027\021\030\033\031\014" +
    "\032\016\034\035\036\017\037\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\u011a" +
    "\017\065\001\001\000\002\001\001\000\036\003\u011c\004" +
    "\007\007\013\010\032\022\027\024\025\026\036\027\021" +
    "\030\033\031\014\032\016\034\035\036\017\037\004\001" +
    "\001\000\034\004\u0116\007\013\010\032\022\027\024\025" +
    "\026\036\027\021\030\033\031\014\032\016\034\035\036" +
    "\017\037\004\001\001\000\036\003\u011e\004\007\007\013" +
    "\010\032\022\027\024\025\026\036\027\021\030\033\031" +
    "\014\032\016\034\035\036\017\037\004\001\001\000\034" +
    "\004\u0116\007\013\010\032\022\027\024\025\026\036\027" +
    "\021\030\033\031\014\032\016\034\035\036\017\037\004" +
    "\001\001\000\002\001\001\000\006\016\u0121\017\065\001" +
    "\001\000\002\001\001\000\004\011\u0123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u012b\001\001\000\002\001\001\000\006\016" +
    "\u012d\017\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\u0130\007\013\010\032\022\027\024\025\026" +
    "\036\027\021\030\033\031\014\032\016\033\u0131\034\035" +
    "\036\017\037\004\001\001\000\002\001\001\000\034\004" +
    "\u0133\007\013\010\032\022\027\024\025\026\036\027\021" +
    "\030\033\031\014\032\016\034\035\036\017\037\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public NodoAbstracto Raiz;
    public ArrayList <NodoAbstracto> Expresiones = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones2 = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones3 = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones4 = new ArrayList();
    public ArrayList <NodoAbstracto> ExpresionesWhile = new ArrayList();
    public String Lado1, Lado2 = "";
    public String Manejor_Error = "";
     public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila+1);
        System.out.println("\t\tColumna: "+columna);

         TError ERRORES = new TError(lexema,fila,columna,"Sintactico", "Sentencia incorrecta" );
         TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
       
        
        
    }

//Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       // TERROR ERRORES = new TERROR(lexema,"Error Sintactico","Caracter no esperado",fila,columna);
       // TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
     
    }
    
    public void AgregarElmentoALista(NodoAbstracto Nodo, NodoAbstracto Elemento){
        Nodo.Expresiones.add(Elemento);
    }
    public void semantic(String msg, Object obj) {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analisis_Sintactico$actions {



  private final Analisis_Sintactico parser;

  /** Constructor */
  CUP$Analisis_Sintactico$actions(Analisis_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action_part00000000(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto start_val = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico$parser.done_parsing();
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("INICIO");
                        nuevo.Hijos.add(nod);
                        parser.Raiz = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        //NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        //nuevo.Hijos.add(nodsentencias);
                        //nuevo.Hijos.add(nod);
                        //RESULT = nuevo;
                        
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARARASIGNAR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        RESULT=nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IMPRIM 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        //System.out.println("ID LINEA : SENTENCIA IMPRIMIR" + nodleft + " Columna " + nodright);
                        RESULT=nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= ELIF 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= ELIFELSE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= ELWHILE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= ELDOWHILE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= ELFOR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= ELBREAK 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= ELCONTINUE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= ELSWITCH 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= GRAFICAS 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DECFUNCIONES 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= error puntoycoma 
            {
              NodoAbstracto RESULT =null;
		
                         NodoAbstracto nuevo = new ERRORES("Error");
                         NodoAbstracto nuevoid = new Nodo("#Error En alguna mulada XD");
                         nuevo.Cadena   = "#Error Semantico Encontrado ver reporte";
                         RESULT= nuevo; 
                     
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTAPARAMETROS ::= LISTAPARAMETROS coma id 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                    NodoAbstracto nod= new Nodo(iden);
                    nodsentencias.Hijos.add(nod);
                    RESULT = nodsentencias;
                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTAPARAMETROS ::= LISTAPARAMETROS coma DECLARARASIGNAR 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                    nodsentencias.Hijos.add(nod);
                    RESULT = nodsentencias;
                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTAPARAMETROS ::= DECLARARASIGNAR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("DECLARARASIGNAR");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTAPARAMETROS ::= id 
            {
              NodoAbstracto RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                    NodoAbstracto nod = new Nodo(iden);
                    RESULT = nod;
                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECFUNCIONES ::= id igual function parentesisabrir parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                 NodoAbstracto nuevo = new Funciones1("FUNCION SIN PARAMETROS");
                 NodoAbstracto FuncionNombre = new Nodo(nombre);
                 nuevo.Hijos.add(FuncionNombre);
                 nuevo.Hijos.add(sentencias);
                 nuevo.columna = nombreleft;
                 nuevo.linea = nombreright;
                 RESULT = nuevo; 

                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECFUNCIONES ::= id igual parentesisabrir parentesiscerrar igual MayorQue llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                 NodoAbstracto nuevo = new Funciones1("FUNCION SIN PARAMETROS");
                 NodoAbstracto FuncionNombre = new Nodo(nombre);
                 nuevo.Hijos.add(FuncionNombre);
                 nuevo.Hijos.add(sentencias);
                 nuevo.columna = nombreleft;
                 nuevo.linea = nombreright;
                 RESULT = nuevo; 

                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECFUNCIONES ::= id igual function parentesisabrir LISTAPARAMETROS parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto parametros = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                    NodoAbstracto nuevo = new Funciones2("FUNCION con PARAMETROS");
                    NodoAbstracto FuncionNombre = new Nodo(nombre);
                    nuevo.Hijos.add(FuncionNombre);
                    nuevo.Hijos.add(parametros);
                    nuevo.Hijos.add(sentencias);
                    nuevo.columna = nombreleft;
                    nuevo.linea = nombreright;
                    RESULT = nuevo;
                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECFUNCIONES ::= id parentesisabrir LISTAPARAMETROS parentesiscerrar igual MayorQue llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto parametros = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                    NodoAbstracto nuevo = new Funciones2("FUNCION con PARAMETROS");
                   NodoAbstracto FuncionNombre = new Nodo(nombre);
                   nuevo.Hijos.add(FuncionNombre);
                    nuevo.Hijos.add(parametros);
                    nuevo.Hijos.add(sentencias);
                    nuevo.columna = nombreleft;
                   nuevo.linea = nombreright;
                   RESULT = nuevo;
               
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECFUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GRAFICAS ::= pie parentesisabrir id coma id coma id parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String valores = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String vector = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                NodoAbstracto nuevo = new pie("PIE");
                NodoAbstracto Datos = new Nodo(valores);
                NodoAbstracto Vector = new Nodo(vector);
                NodoAbstracto Titulo = new Nodo(titulo);
                nuevo.Hijos.add(Datos);
                nuevo.Hijos.add(Vector);
                nuevo.Hijos.add(Titulo);
                nuevo.columna = valoresleft;
                nuevo.linea = valoresright;
                RESULT = nuevo;            

        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAS",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GRAFICAS ::= barplot parentesisabrir id coma id coma id coma id coma id parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		String vector = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int cuatroleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int cuatroright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String cuatro = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int cincoleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cincoright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String cinco = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
         NodoAbstracto nuevo = new barras("BARRAS");
                NodoAbstracto Datos = new Nodo(nombre);
                NodoAbstracto Vector = new Nodo(vector);
                NodoAbstracto Titulo = new Nodo(titulo);
                NodoAbstracto Cuatro = new Nodo(cuatro);
                NodoAbstracto Cinco = new Nodo(cinco);
                nuevo.Hijos.add(Datos);
                nuevo.Hijos.add(Vector);
                nuevo.Hijos.add(Titulo);
                nuevo.Hijos.add(Cuatro);
                nuevo.Hijos.add(Cinco);
                nuevo.columna = nombreleft;
                nuevo.linea = nombreright;
                RESULT = nuevo;    
    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAS",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // GRAFICAS ::= hist parentesisabrir id coma id coma id parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String vector = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                NodoAbstracto nuevo = new histograma("HISTOGRAMA");
                NodoAbstracto Datos = new Nodo(nombre);
                NodoAbstracto Vector = new Nodo(vector);
                NodoAbstracto Titulo = new Nodo(titulo);
                nuevo.Hijos.add(Datos);
                nuevo.Hijos.add(Vector);
                nuevo.Hijos.add(Titulo);
                nuevo.columna = nombreleft;
                nuevo.linea = nombreright;
                RESULT = nuevo;   
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAS",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // GRAFICAS ::= plot parentesisabrir id coma cadena coma cadena coma cadena coma cadena parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)).value;
		int par1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int par1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		String par1 = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int par2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int par2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String par2 = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int par3left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int par3right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String par3 = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int par4left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int par4right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String par4 = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
        NodoAbstracto nuevo = new plot("PLOT");
                NodoAbstracto Datos = new Nodo(nombre);
                NodoAbstracto Vector = new Nodo(par1);
                NodoAbstracto Titulo = new Nodo(par2) ;
                NodoAbstracto Vector2 = new Nodo(par3);
                NodoAbstracto Titulo2 = new Nodo(par4);
                nuevo.Hijos.add(Datos);
                nuevo.Hijos.add(Vector);
                nuevo.Hijos.add(Titulo);
                nuevo.Hijos.add(Vector2);
                nuevo.Hijos.add(Titulo2);
                nuevo.columna = nombreleft;
                nuevo.linea = nombreright;
                RESULT = nuevo;   

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAS",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELSWITCH ::= SWITCH parentesisabrir EXP parentesiscerrar llaveabrir EXPRESIONESSWITCH llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Switch("SWITCH");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                RESULT = nuevo;
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELSWITCH",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELSWITCH ::= SWITCH parentesisabrir EXP parentesiscerrar llaveabrir EXPRESIONESSWITCH DEF DOSP SENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentdefleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentdefright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentdef = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Switch("SWITCH");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                nuevo.Hijos.add(sentdef);
                RESULT = nuevo;
            
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELSWITCH",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESIONESSWITCH ::= EXPRESIONESSWITCH CASE EXP DOSP SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("CASE");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(sentencias);
                        nodsentencias.Hijos.add(nuevo);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONESSWITCH",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESIONESSWITCH ::= CASE EXP DOSP SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("CASE");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(sentencias);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONESSWITCH",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELBREAK ::= BREAK FINAL 
            {
              NodoAbstracto RESULT =null;
		
             NodoAbstracto nuevo = new Break("Break");
             RESULT= nuevo; 
          
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELBREAK",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELCONTINUE ::= CONTINUE FINAL 
            {
              NodoAbstracto RESULT =null;
		
            NodoAbstracto nuevo = new Continue("Break");
             RESULT= nuevo; 
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELCONTINUE",24, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELFOR ::= FOR parentesisabrir EXP IN EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new For("DoWhile");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(exp2);
            nuevo.Hijos.add(sentencias);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;
    
         
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELFOR",22, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELDOWHILE ::= DO llaveabrir LISTASENTENCIAS llavecerrar WHILE parentesisabrir EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
           NodoAbstracto nuevo = new DoWhile("DoWhile");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;


              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELDOWHILE",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELWHILE ::= WHILE parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIASwhile llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new While("WHILE");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< ExpresionesWhile.size();i++){
                           nuevo.Expresiones.add(ExpresionesWhile.get(i));
                        }
            ExpresionesWhile.clear();
            RESULT = nuevo;
    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELWHILE",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTASENTENCIASwhile ::= LISTASENTENCIASwhile SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                         ExpresionesWhile.add(nod);
                       // Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIASwhile",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTASENTENCIASwhile ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        ExpresionesWhile.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIASwhile",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIF("IF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar ELSE llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIF("IF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            for(int i = 0; i< Expresiones2.size();i++){
                           nuevo.Expresiones2.add(Expresiones2.get(i));
                        }
            Expresiones2.clear();
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar LISTAELSES 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
            NodoAbstracto nuevo = new SentenciaIFElseIF("IFelseIF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar LISTAELSES ELSE llaveabrir LISTASENTENCIAS3 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentaleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentaright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto senta = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIFElseIF("IFelseIF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.Hijos.add(senta);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;            
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTAELSES ::= LISTAELSES ELSE IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int noditoleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int noditoright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		NodoAbstracto nodito = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Nodo("ELSEIF1");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                nodito.Hijos.add(nuevo);
                RESULT = nodito;
              
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAELSES",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTAELSES ::= ELSE IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Nodo("ELSEIF2");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                RESULT = nuevo;
              
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAELSES",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTASENTENCIAS ::= LISTASENTENCIAS SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        Expresiones.add(nod);
                       // Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTASENTENCIAS ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTASENTENCIAS3 ::= LISTASENTENCIAS3 SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        
                        Expresiones4.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS3",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTASENTENCIAS3 ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        Expresiones4.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS3",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LISTASENTENCIAS2 ::= LISTASENTENCIAS2 SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        //Expresiones.add(nod);
                        Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS2",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTASENTENCIAS2 ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        //Expresiones.add(nod);
                        Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS2",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MODVECTOR ::= id corcheteabrir EXP corchetecerrar igual EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MODVECTOR",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MODVECTOR ::= id corcheteabrir EXP corchetecerrar igual FuncionC EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MODVECTOR",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARARVECTORC ::= id igual FuncionC LISTAEXPRESIONES parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int Listaleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int Listaright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto Lista = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                        NodoAbstracto nuevo = new FuncionC("CASTEAR");
                        NodoAbstracto nuevoid = new Nodo(valor);
                        nuevo.Hijos.add(nuevoid);
                        for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
                        Expresiones.clear();
                        nuevo.Hijos.add(Lista);
                        Manejor_Error = "Error al crear vector" + valor;
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVECTORC",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTAEXPRESIONES ::= LISTAEXPRESIONES coma EXP 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                       // NodoAbstracto nuevo = new Nodo("EXP");
                       // nuevo.Hijos.add(nodsentencias);
                       // nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                        Expresiones2.add(nod);
                        Expresiones3.add(nod);
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        //RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTAEXPRESIONES ::= EXP 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        //NodoAbstracto nuevo = new Nodo("EXP");
                        //nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                        Expresiones2.add(nod);
                        Expresiones3.add(nod);
                        //RESULT = nuevo;
                        NodoAbstracto nuevo = new Nodo("EXP");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARARASIGNAR ::= id igual EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new DeclararAsignar("DECLARARASIGNAR");
                        NodoAbstracto nuevoid = new Nodo(valor);
                        nuevo.Hijos.add(nuevoid);
                        nuevo.Hijos.add(exp1);
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                        // for(int i = 0; i< Expresiones.size();i++){
                        //   nuevo.Expresiones.add(Expresiones.get(i));
                       // }
                       // Expresiones.clear();
                       // for(int i = 0; i< Expresiones3.size();i++){
                       //    nuevo.Expresiones2.add(Expresiones3.get(i));
                       // }
                       // Expresiones3.clear();
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARASIGNAR",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FINAL ::= puntoycoma 
            {
              NodoAbstracto RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FINAL ::= 
            {
              NodoAbstracto RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IMPRIM ::= imprimir parentesisabrir EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                        NodoAbstracto nuevo = new Imprimir("IMPRIMIR");
                        nuevo.Hijos.add(exp1);
                         Manejor_Error = "Error al imprimir";
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIM",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= LISTA parentesisabrir LISTAEXPRESIONES parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int valo4left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valo4right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valo4 = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int listaValoresleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int listaValoresright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto listaValores = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Lista");
                        NodoAbstracto nuevo2 = new Nodo("list(");
                        nuevo.Hijos.add(nuevo2);
                        nuevo.Hijos.add(listaValores);
                        nuevo.TipoDato = "Lista";
                        
                        RESULT = nuevo;

                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= FuncionC LISTAEXPRESIONES parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int valo4left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int valo4right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object valo4 = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int listaValoresleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int listaValoresright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto listaValores = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("FuncionC");
                        NodoAbstracto nuevo2 = new Nodo("c(");
                        nuevo.Hijos.add(nuevo2);
                        nuevo.Hijos.add(listaValores);
                        nuevo.TipoDato = "FuncionC";
                        //for(int i = 0; i< Expresiones2.size();i++){
                        //   nuevo.Expresiones2.add(Expresiones2.get(i));
                       // }
                       // Expresiones2.clear();
                        RESULT = nuevo;

                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= EXP PREGUNTAC EXP DOSP EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp3 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Ternario("EXP");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(exp2);  
                        nuevo.Hijos.add(exp3);
                         Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= NOT EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new NOT("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= menos EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Negativo("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= EXP mas EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("+");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP menos EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                    
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP por EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("*");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP div EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("/");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                      
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP modulo EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("%%");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2); 
                        Manejor_Error = "Error en expresion";                   
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP potencia EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("^");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);   
                        Manejor_Error = "Error en expresion";                 
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP igualdad EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("==");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP Noigualdad EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP MayorQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP MenorQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP MayorIgualQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP MenorIgualQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP AND EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("&&");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";                      
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP OR EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("||");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        Manejor_Error = "Error en expresion";
                        RESULT = exp1;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= NUMERO 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        Manejor_Error = "Error en expresion";
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= id 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("id");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "id";
                        nuevo.Nombre = valor;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= nulo 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= id corcheteabrir EXP corchetecerrar 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto pos = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Vector");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(pos);
                        nuevo.TipoDato = "vector";
                        Manejor_Error = "Error en expresion";
                        //RESULT = nuevo;
                        //nuevo.id = Integer.parseInt(pos);
                        nuevo.columna = valorleft;
                        nuevo.linea = valorright;
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= cadena 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        valor =  valor.replaceAll("\"", "");
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= ttrue 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= tfalse 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= typeof parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("TypeOF");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= length parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Length");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= stringlength parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("StringLength");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= remove parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Remove");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= tolowercase parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("ToLowerCase");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= touppercase parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("ToUpperCase");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= trunk parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Trunk");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= round parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Round");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= mean parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mean");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(null);
                        nuevo.TipoDato = "decimal";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= mean parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int limiteleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int limiteright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto limite = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mean");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(limite);
                        nuevo.TipoDato = "decimal";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= median parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Median");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "median";
                        nuevo.Hijos.add(null);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= median parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp3 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Median");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "median";
                        nuevo.Hijos.add(exp3);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= mode parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mode");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(null);
                        nuevo.TipoDato = "mode";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= mode parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mode");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "mode";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NUMERO ::= entero 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Entero");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("NUMERO",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NUMERO ::= decimal 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Decimal");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "decimal";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("NUMERO",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analisis_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analisis_Sintactico$do_action_part00000000(
                               CUP$Analisis_Sintactico$act_num,
                               CUP$Analisis_Sintactico$parser,
                               CUP$Analisis_Sintactico$stack,
                               CUP$Analisis_Sintactico$top);
    }
}

}
