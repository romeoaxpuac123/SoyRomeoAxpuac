
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import static Analizadores.IDE.TABLA_DE_ERRORES_SINTACTICOS;
import CodigoASTCUP.*;
import Codigo.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analisis_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analisis_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analisis_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\034" +
    "\011\000\002\034\014\000\002\035\007\000\002\035\006" +
    "\000\002\031\004\000\002\032\004\000\002\030\013\000" +
    "\002\027\013\000\002\026\011\000\002\033\004\000\002" +
    "\033\003\000\002\022\011\000\002\022\015\000\002\022" +
    "\012\000\002\022\016\000\002\025\013\000\002\025\012" +
    "\000\002\023\004\000\002\023\003\000\002\021\004\000" +
    "\002\021\003\000\002\020\004\000\002\020\003\000\002" +
    "\015\011\000\002\015\013\000\002\013\010\000\002\014" +
    "\005\000\002\014\003\000\002\007\006\000\002\011\003" +
    "\000\002\011\002\000\002\010\007\000\002\016\006\000" +
    "\002\016\005\000\002\016\007\000\002\016\004\000\002" +
    "\016\004\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\006" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\006\000\002\016\006\000\002\016\006\000\002" +
    "\016\010\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\016\006\000\002\016\010" +
    "\000\002\016\006\000\002\016\006\000\002\017\003\000" +
    "\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\026\003\024\036\020\060\007\062\013\064" +
    "\005\065\016\066\027\070\022\071\004\072\011\001\002" +
    "\000\040\002\uffd4\003\uffd4\004\uffd4\012\225\036\uffd4\060" +
    "\uffd4\062\uffd4\064\uffd4\065\uffd4\066\uffd4\070\uffd4\071\uffd4" +
    "\072\uffd4\073\uffd4\074\uffd4\001\002\000\004\006\331\001" +
    "\002\000\036\002\ufffe\003\ufffe\004\ufffe\036\ufffe\060\ufffe" +
    "\062\ufffe\064\ufffe\065\ufffe\066\ufffe\070\ufffe\071\ufffe\072" +
    "\ufffe\073\ufffe\074\ufffe\001\002\000\004\006\325\001\002" +
    "\000\030\002\000\003\024\036\020\060\007\062\013\064" +
    "\005\065\016\066\027\070\022\071\004\072\011\001\002" +
    "\000\004\006\302\001\002\000\036\002\ufff6\003\ufff6\004" +
    "\ufff6\036\ufff6\060\ufff6\062\ufff6\064\ufff6\065\ufff6\066\ufff6" +
    "\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\001\002\000" +
    "\004\006\241\001\002\000\036\002\ufffd\003\ufffd\004\ufffd" +
    "\036\ufffd\060\ufffd\062\ufffd\064\ufffd\065\ufffd\066\ufffd\070" +
    "\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\001\002\000\036" +
    "\002\ufff5\003\ufff5\004\ufff5\036\ufff5\060\ufff5\062\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5" +
    "\074\ufff5\001\002\000\004\005\231\001\002\000\036\002" +
    "\ufff8\003\ufff8\004\ufff8\036\ufff8\060\ufff8\062\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074" +
    "\ufff8\001\002\000\004\013\226\001\002\000\036\002\ufffa" +
    "\003\ufffa\004\ufffa\036\ufffa\060\ufffa\062\ufffa\064\ufffa\065" +
    "\ufffa\066\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa" +
    "\001\002\000\040\002\uffd4\003\uffd4\004\uffd4\012\225\036" +
    "\uffd4\060\uffd4\062\uffd4\064\uffd4\065\uffd4\066\uffd4\070\uffd4" +
    "\071\uffd4\072\uffd4\073\uffd4\074\uffd4\001\002\000\036\002" +
    "\ufffb\003\ufffb\004\ufffb\036\ufffb\060\ufffb\062\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074" +
    "\ufffb\001\002\000\004\012\223\001\002\000\036\002\ufffc" +
    "\003\ufffc\004\ufffc\036\ufffc\060\ufffc\062\ufffc\064\ufffc\065" +
    "\ufffc\066\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc" +
    "\001\002\000\036\002\ufff7\003\ufff7\004\ufff7\036\ufff7\060" +
    "\ufff7\062\ufff7\064\ufff7\065\ufff7\066\ufff7\070\ufff7\071\ufff7" +
    "\072\ufff7\073\ufff7\074\ufff7\001\002\000\004\006\034\001" +
    "\002\000\036\002\ufff9\003\ufff9\004\ufff9\036\ufff9\060\ufff9" +
    "\062\ufff9\064\ufff9\065\ufff9\066\ufff9\070\ufff9\071\ufff9\072" +
    "\ufff9\073\ufff9\074\ufff9\001\002\000\036\002\ufff4\003\ufff4" +
    "\004\ufff4\036\ufff4\060\ufff4\062\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\001\002" +
    "\000\004\002\033\001\002\000\004\002\001\001\002\000" +
    "\060\006\055\015\050\032\042\035\053\036\056\040\062" +
    "\041\054\042\044\043\051\044\037\045\041\046\035\047" +
    "\065\050\045\051\057\052\047\053\064\054\040\055\061" +
    "\056\043\057\052\061\036\075\063\001\002\000\004\006" +
    "\220\001\002\000\110\002\uffba\003\uffba\004\uffba\007\uffba" +
    "\011\uffba\012\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\030\uffba\031\uffba\033\uffba\034\uffba\036\uffba\037" +
    "\uffba\060\uffba\062\uffba\064\uffba\065\uffba\066\uffba\067\uffba" +
    "\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\001\002\000" +
    "\004\006\215\001\002\000\110\002\uffaa\003\uffaa\004\uffaa" +
    "\007\uffaa\011\uffaa\012\uffaa\014\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa\034\uffaa\036" +
    "\uffaa\037\uffaa\060\uffaa\062\uffaa\064\uffaa\065\uffaa\066\uffaa" +
    "\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\001" +
    "\002\000\004\006\212\001\002\000\060\006\055\015\050" +
    "\032\042\035\053\036\056\040\062\041\054\042\044\043" +
    "\051\044\037\045\041\046\035\047\065\050\045\051\057" +
    "\052\047\053\064\054\040\055\061\056\043\057\052\061" +
    "\036\075\063\001\002\000\004\006\206\001\002\000\110" +
    "\002\uffb8\003\uffb8\004\uffb8\007\uffb8\011\uffb8\012\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\033\uffb8\034\uffb8\036\uffb8\037\uffb8\060\uffb8\062\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\001\002\000\004\006\203\001\002" +
    "\000\042\014\103\015\076\016\101\017\072\020\071\021" +
    "\077\022\107\023\105\024\100\025\074\026\073\027\102" +
    "\030\070\031\104\033\106\067\173\001\002\000\004\006" +
    "\170\001\002\000\060\006\055\015\050\032\042\035\053" +
    "\036\056\040\062\041\054\042\044\043\051\044\037\045" +
    "\041\046\035\047\065\050\045\051\057\052\047\053\064" +
    "\054\040\055\061\056\043\057\052\061\036\075\063\001" +
    "\002\000\110\002\uffbc\003\uffbc\004\uffbc\007\uffbc\011\uffbc" +
    "\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\033\uffbc\034\uffbc\036\uffbc\037\uffbc\060" +
    "\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc" +
    "\071\uffbc\072\uffbc\073\uffbc\074\uffbc\001\002\000\004\006" +
    "\164\001\002\000\060\006\055\015\050\032\042\035\053" +
    "\036\056\040\062\041\054\042\044\043\051\044\037\045" +
    "\041\046\035\047\065\050\045\051\057\052\047\053\064" +
    "\054\040\055\061\056\043\057\052\061\036\075\063\001" +
    "\002\000\110\002\uffb9\003\uffb9\004\uffb9\007\uffb9\011\uffb9" +
    "\012\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\033\uffb9\034\uffb9\036\uffb9\037\uffb9\060" +
    "\uffb9\062\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\071\uffb9\072\uffb9\073\uffb9\074\uffb9\001\002\000\060\006" +
    "\055\015\050\032\042\035\053\036\056\040\062\041\054" +
    "\042\044\043\051\044\037\045\041\046\035\047\065\050" +
    "\045\051\057\052\047\053\064\054\040\055\061\056\043" +
    "\057\052\061\036\075\063\001\002\000\112\002\uffbd\003" +
    "\uffbd\004\uffbd\007\uffbd\010\155\011\uffbd\012\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\033\uffbd\034\uffbd\036\uffbd\037\uffbd\060\uffbd\062\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd" +
    "\073\uffbd\074\uffbd\001\002\000\004\006\152\001\002\000" +
    "\110\002\uffbe\003\uffbe\004\uffbe\007\uffbe\011\uffbe\012\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\033\uffbe\034\uffbe\036\uffbe\037\uffbe\060\uffbe\062" +
    "\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe" +
    "\072\uffbe\073\uffbe\074\uffbe\001\002\000\004\006\144\001" +
    "\002\000\110\002\uffab\003\uffab\004\uffab\007\uffab\011\uffab" +
    "\012\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\033\uffab\034\uffab\036\uffab\037\uffab\060" +
    "\uffab\062\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab" +
    "\071\uffab\072\uffab\073\uffab\074\uffab\001\002\000\004\006" +
    "\136\001\002\000\004\006\133\001\002\000\004\006\066" +
    "\001\002\000\060\006\055\015\050\032\042\035\053\036" +
    "\056\040\062\041\054\042\044\043\051\044\037\045\041" +
    "\046\035\047\065\050\045\051\057\052\047\053\064\054" +
    "\040\055\061\056\043\057\052\061\036\075\063\001\002" +
    "\000\042\014\103\015\076\016\101\017\072\020\071\021" +
    "\077\022\107\023\105\024\100\025\074\026\073\027\102" +
    "\030\070\031\104\033\106\037\075\001\002\000\060\006" +
    "\055\015\050\032\042\035\053\036\056\040\062\041\054" +
    "\042\044\043\051\044\037\045\041\046\035\047\065\050" +
    "\045\051\057\052\047\053\064\054\040\055\061\056\043" +
    "\057\052\061\036\075\063\001\002\000\060\006\055\015" +
    "\050\032\042\035\053\036\056\040\062\041\054\042\044" +
    "\043\051\044\037\045\041\046\035\047\065\050\045\051" +
    "\057\052\047\053\064\054\040\055\061\056\043\057\052" +
    "\061\036\075\063\001\002\000\060\006\055\015\050\032" +
    "\042\035\053\036\056\040\062\041\054\042\044\043\051" +
    "\044\037\045\041\046\035\047\065\050\045\051\057\052" +
    "\047\053\064\054\040\055\061\056\043\057\052\061\036" +
    "\075\063\001\002\000\060\006\055\015\050\032\042\035" +
    "\053\036\056\040\062\041\054\042\044\043\051\044\037" +
    "\045\041\046\035\047\065\050\045\051\057\052\047\053" +
    "\064\054\040\055\061\056\043\057\052\061\036\075\063" +
    "\001\002\000\060\006\055\015\050\032\042\035\053\036" +
    "\056\040\062\041\054\042\044\043\051\044\037\045\041" +
    "\046\035\047\065\050\045\051\057\052\047\053\064\054" +
    "\040\055\061\056\043\057\052\061\036\075\063\001\002" +
    "\000\060\006\055\015\050\032\042\035\053\036\056\040" +
    "\062\041\054\042\044\043\051\044\037\045\041\046\035" +
    "\047\065\050\045\051\057\052\047\053\064\054\040\055" +
    "\061\056\043\057\052\061\036\075\063\001\002\000\060" +
    "\006\055\015\050\032\042\035\053\036\056\040\062\041" +
    "\054\042\044\043\051\044\037\045\041\046\035\047\065" +
    "\050\045\051\057\052\047\053\064\054\040\055\061\056" +
    "\043\057\052\061\036\075\063\001\002\000\060\006\055" +
    "\015\050\032\042\035\053\036\056\040\062\041\054\042" +
    "\044\043\051\044\037\045\041\046\035\047\065\050\045" +
    "\051\057\052\047\053\064\054\040\055\061\056\043\057" +
    "\052\061\036\075\063\001\002\000\060\006\055\015\050" +
    "\032\042\035\053\036\056\040\062\041\054\042\044\043" +
    "\051\044\037\045\041\046\035\047\065\050\045\051\057" +
    "\052\047\053\064\054\040\055\061\056\043\057\052\061" +
    "\036\075\063\001\002\000\060\006\055\015\050\032\042" +
    "\035\053\036\056\040\062\041\054\042\044\043\051\044" +
    "\037\045\041\046\035\047\065\050\045\051\057\052\047" +
    "\053\064\054\040\055\061\056\043\057\052\061\036\075" +
    "\063\001\002\000\060\006\055\015\050\032\042\035\053" +
    "\036\056\040\062\041\054\042\044\043\051\044\037\045" +
    "\041\046\035\047\065\050\045\051\057\052\047\053\064" +
    "\054\040\055\061\056\043\057\052\061\036\075\063\001" +
    "\002\000\060\006\055\015\050\032\042\035\053\036\056" +
    "\040\062\041\054\042\044\043\051\044\037\045\041\046" +
    "\035\047\065\050\045\051\057\052\047\053\064\054\040" +
    "\055\061\056\043\057\052\061\036\075\063\001\002\000" +
    "\060\006\055\015\050\032\042\035\053\036\056\040\062" +
    "\041\054\042\044\043\051\044\037\045\041\046\035\047" +
    "\065\050\045\051\057\052\047\053\064\054\040\055\061" +
    "\056\043\057\052\061\036\075\063\001\002\000\060\006" +
    "\055\015\050\032\042\035\053\036\056\040\062\041\054" +
    "\042\044\043\051\044\037\045\041\046\035\047\065\050" +
    "\045\051\057\052\047\053\064\054\040\055\061\056\043" +
    "\057\052\061\036\075\063\001\002\000\060\006\055\015" +
    "\050\032\042\035\053\036\056\040\062\041\054\042\044" +
    "\043\051\044\037\045\041\046\035\047\065\050\045\051" +
    "\057\052\047\053\064\054\040\055\061\056\043\057\052" +
    "\061\036\075\063\001\002\000\060\006\055\015\050\032" +
    "\042\035\053\036\056\040\062\041\054\042\044\043\051" +
    "\044\037\045\041\046\035\047\065\050\045\051\057\052" +
    "\047\053\064\054\040\055\061\056\043\057\052\061\036" +
    "\075\063\001\002\000\110\002\uffc7\003\uffc7\004\uffc7\007" +
    "\uffc7\011\uffc7\012\uffc7\014\103\015\076\016\101\017\072" +
    "\020\071\021\077\022\uffc7\023\uffc7\024\100\025\074\026" +
    "\073\027\102\030\uffc7\031\uffc7\033\uffc7\034\uffc7\036\uffc7" +
    "\037\uffc7\060\uffc7\062\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\001\002" +
    "\000\042\014\103\015\076\016\101\017\072\020\071\021" +
    "\077\022\107\023\105\024\100\025\074\026\073\027\102" +
    "\030\070\031\104\033\106\034\112\001\002\000\060\006" +
    "\055\015\050\032\042\035\053\036\056\040\062\041\054" +
    "\042\044\043\051\044\037\045\041\046\035\047\065\050" +
    "\045\051\057\052\047\053\064\054\040\055\061\056\043" +
    "\057\052\061\036\075\063\001\002\000\110\002\uffd0\003" +
    "\uffd0\004\uffd0\007\uffd0\011\uffd0\012\uffd0\014\103\015\076" +
    "\016\101\017\072\020\071\021\077\022\107\023\105\024" +
    "\100\025\074\026\073\027\102\030\070\031\104\033\106" +
    "\034\uffd0\036\uffd0\037\uffd0\060\uffd0\062\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0" +
    "\074\uffd0\001\002\000\110\002\uffc6\003\uffc6\004\uffc6\007" +
    "\uffc6\011\uffc6\012\uffc6\014\103\015\076\016\101\017\072" +
    "\020\071\021\077\022\uffc6\023\uffc6\024\100\025\074\026" +
    "\073\027\102\030\uffc6\031\uffc6\033\uffc6\034\uffc6\036\uffc6" +
    "\037\uffc6\060\uffc6\062\uffc6\064\uffc6\065\uffc6\066\uffc6\067" +
    "\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\001\002" +
    "\000\110\002\uffc0\003\uffc0\004\uffc0\007\uffc0\011\uffc0\012" +
    "\uffc0\014\103\015\076\016\101\017\072\020\071\021\077" +
    "\022\107\023\105\024\100\025\074\026\073\027\102\030" +
    "\uffc0\031\uffc0\033\uffc0\034\uffc0\036\uffc0\037\uffc0\060\uffc0" +
    "\062\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071" +
    "\uffc0\072\uffc0\073\uffc0\074\uffc0\001\002\000\110\002\uffcd" +
    "\003\uffcd\004\uffcd\007\uffcd\011\uffcd\012\uffcd\014\uffcd\015" +
    "\uffcd\016\101\017\072\020\uffcd\021\077\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\033" +
    "\uffcd\034\uffcd\036\uffcd\037\uffcd\060\uffcd\062\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\074\uffcd\001\002\000\110\002\uffc3\003\uffc3\004\uffc3" +
    "\007\uffc3\011\uffc3\012\uffc3\014\103\015\076\016\101\017" +
    "\072\020\071\021\077\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3\036" +
    "\uffc3\037\uffc3\060\uffc3\062\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\001" +
    "\002\000\110\002\uffcb\003\uffcb\004\uffcb\007\uffcb\011\uffcb" +
    "\012\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb\060" +
    "\uffcb\062\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb" +
    "\071\uffcb\072\uffcb\073\uffcb\074\uffcb\001\002\000\110\002" +
    "\uffc4\003\uffc4\004\uffc4\007\uffc4\011\uffc4\012\uffc4\014\103" +
    "\015\076\016\101\017\072\020\071\021\077\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\033\uffc4\034\uffc4\036\uffc4\037\uffc4\060\uffc4\062\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4" +
    "\073\uffc4\074\uffc4\001\002\000\110\002\uffc9\003\uffc9\004" +
    "\uffc9\007\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9" +
    "\036\uffc9\037\uffc9\060\uffc9\062\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9" +
    "\001\002\000\110\002\uffcc\003\uffcc\004\uffcc\007\uffcc\011" +
    "\uffcc\012\uffcc\014\uffcc\015\uffcc\016\101\017\072\020\uffcc" +
    "\021\077\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\033\uffcc\034\uffcc\036\uffcc\037\uffcc" +
    "\060\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070" +
    "\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\001\002\000\042" +
    "\007\125\014\103\015\076\016\101\017\072\020\071\021" +
    "\077\022\107\023\105\024\100\025\074\026\073\027\102" +
    "\030\070\031\104\033\106\001\002\000\110\002\uffb4\003" +
    "\uffb4\004\uffb4\007\uffb4\011\uffb4\012\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4" +
    "\034\uffb4\036\uffb4\037\uffb4\060\uffb4\062\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4" +
    "\074\uffb4\001\002\000\110\002\uffc5\003\uffc5\004\uffc5\007" +
    "\uffc5\011\uffc5\012\uffc5\014\103\015\076\016\101\017\072" +
    "\020\071\021\077\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\034\uffc5\036\uffc5" +
    "\037\uffc5\060\uffc5\062\uffc5\064\uffc5\065\uffc5\066\uffc5\067" +
    "\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\001\002" +
    "\000\110\002\uffc2\003\uffc2\004\uffc2\007\uffc2\011\uffc2\012" +
    "\uffc2\014\103\015\076\016\101\017\072\020\071\021\077" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\033\uffc2\034\uffc2\036\uffc2\037\uffc2\060\uffc2" +
    "\062\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071" +
    "\uffc2\072\uffc2\073\uffc2\074\uffc2\001\002\000\110\002\uffca" +
    "\003\uffca\004\uffca\007\uffca\011\uffca\012\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\033" +
    "\uffca\034\uffca\036\uffca\037\uffca\060\uffca\062\uffca\064\uffca" +
    "\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073" +
    "\uffca\074\uffca\001\002\000\110\002\uffc8\003\uffc8\004\uffc8" +
    "\007\uffc8\011\uffc8\012\uffc8\014\103\015\076\016\101\017" +
    "\072\020\uffc8\021\077\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\036" +
    "\uffc8\037\uffc8\060\uffc8\062\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\001" +
    "\002\000\110\002\uffc1\003\uffc1\004\uffc1\007\uffc1\011\uffc1" +
    "\012\uffc1\014\103\015\076\016\101\017\072\020\071\021" +
    "\077\022\107\023\105\024\100\025\074\026\073\027\102" +
    "\030\uffc1\031\uffc1\033\uffc1\034\uffc1\036\uffc1\037\uffc1\060" +
    "\uffc1\062\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1" +
    "\071\uffc1\072\uffc1\073\uffc1\074\uffc1\001\002\000\060\006" +
    "\055\015\050\032\042\035\053\036\056\040\062\041\054" +
    "\042\044\043\051\044\037\045\041\046\035\047\065\050" +
    "\045\051\057\052\047\053\064\054\040\055\061\056\043" +
    "\057\052\061\036\075\063\001\002\000\042\007\135\014" +
    "\103\015\076\016\101\017\072\020\071\021\077\022\107" +
    "\023\105\024\100\025\074\026\073\027\102\030\070\031" +
    "\104\033\106\001\002\000\110\002\uffb0\003\uffb0\004\uffb0" +
    "\007\uffb0\011\uffb0\012\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0\036" +
    "\uffb0\037\uffb0\060\uffb0\062\uffb0\064\uffb0\065\uffb0\066\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\001" +
    "\002\000\060\006\055\015\050\032\042\035\053\036\056" +
    "\040\062\041\054\042\044\043\051\044\037\045\041\046" +
    "\035\047\065\050\045\051\057\052\047\053\064\054\040" +
    "\055\061\056\043\057\052\061\036\075\063\001\002\000" +
    "\044\007\uffd7\014\103\015\076\016\101\017\072\020\071" +
    "\021\077\022\107\023\105\024\100\025\074\026\073\027" +
    "\102\030\070\031\104\033\106\037\uffd7\001\002\000\006" +
    "\007\142\037\141\001\002\000\060\006\055\015\050\032" +
    "\042\035\053\036\056\040\062\041\054\042\044\043\051" +
    "\044\037\045\041\046\035\047\065\050\045\051\057\052" +
    "\047\053\064\054\040\055\061\056\043\057\052\061\036" +
    "\075\063\001\002\000\110\002\uffd2\003\uffd2\004\uffd2\007" +
    "\uffd2\011\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\036\uffd2" +
    "\037\uffd2\060\uffd2\062\uffd2\064\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\001\002" +
    "\000\044\007\uffd8\014\103\015\076\016\101\017\072\020" +
    "\071\021\077\022\107\023\105\024\100\025\074\026\073" +
    "\027\102\030\070\031\104\033\106\037\uffd8\001\002\000" +
    "\060\006\055\015\050\032\042\035\053\036\056\040\062" +
    "\041\054\042\044\043\051\044\037\045\041\046\035\047" +
    "\065\050\045\051\057\052\047\053\064\054\040\055\061" +
    "\056\043\057\052\061\036\075\063\001\002\000\044\007" +
    "\147\014\103\015\076\016\101\017\072\020\071\021\077" +
    "\022\107\023\105\024\100\025\074\026\073\027\102\030" +
    "\070\031\104\033\106\037\146\001\002\000\060\006\055" +
    "\015\050\032\042\035\053\036\056\040\062\041\054\042" +
    "\044\043\051\044\037\045\041\046\035\047\065\050\045" +
    "\051\057\052\047\053\064\054\040\055\061\056\043\057" +
    "\052\061\036\075\063\001\002\000\110\002\uffaf\003\uffaf" +
    "\004\uffaf\007\uffaf\011\uffaf\012\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034" +
    "\uffaf\036\uffaf\037\uffaf\060\uffaf\062\uffaf\064\uffaf\065\uffaf" +
    "\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074" +
    "\uffaf\001\002\000\042\007\151\014\103\015\076\016\101" +
    "\017\072\020\071\021\077\022\107\023\105\024\100\025" +
    "\074\026\073\027\102\030\070\031\104\033\106\001\002" +
    "\000\110\002\uffae\003\uffae\004\uffae\007\uffae\011\uffae\012" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\033\uffae\034\uffae\036\uffae\037\uffae\060\uffae" +
    "\062\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae\071" +
    "\uffae\072\uffae\073\uffae\074\uffae\001\002\000\060\006\055" +
    "\015\050\032\042\035\053\036\056\040\062\041\054\042" +
    "\044\043\051\044\037\045\041\046\035\047\065\050\045" +
    "\051\057\052\047\053\064\054\040\055\061\056\043\057" +
    "\052\061\036\075\063\001\002\000\042\007\154\014\103" +
    "\015\076\016\101\017\072\020\071\021\077\022\107\023" +
    "\105\024\100\025\074\026\073\027\102\030\070\031\104" +
    "\033\106\001\002\000\110\002\uffb2\003\uffb2\004\uffb2\007" +
    "\uffb2\011\uffb2\012\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\033\uffb2\034\uffb2\036\uffb2" +
    "\037\uffb2\060\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067" +
    "\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\001\002" +
    "\000\060\006\055\015\050\032\042\035\053\036\056\040" +
    "\062\041\054\042\044\043\051\044\037\045\041\046\035" +
    "\047\065\050\045\051\057\052\047\053\064\054\040\055" +
    "\061\056\043\057\052\061\036\075\063\001\002\000\042" +
    "\011\157\014\103\015\076\016\101\017\072\020\071\021" +
    "\077\022\107\023\105\024\100\025\074\026\073\027\102" +
    "\030\070\031\104\033\106\001\002\000\110\002\uffbb\003" +
    "\uffbb\004\uffbb\007\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\033\uffbb" +
    "\034\uffbb\036\uffbb\037\uffbb\060\uffbb\062\uffbb\064\uffbb\065" +
    "\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb" +
    "\074\uffbb\001\002\000\042\007\161\014\103\015\076\016" +
    "\101\017\072\020\071\021\077\022\107\023\105\024\100" +
    "\025\074\026\073\027\102\030\070\031\104\033\106\001" +
    "\002\000\110\002\uffbf\003\uffbf\004\uffbf\007\uffbf\011\uffbf" +
    "\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\033\uffbf\034\uffbf\036\uffbf\037\uffbf\060" +
    "\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf" +
    "\071\uffbf\072\uffbf\073\uffbf\074\uffbf\001\002\000\006\007" +
    "\163\037\141\001\002\000\110\002\uffd1\003\uffd1\004\uffd1" +
    "\007\uffd1\011\uffd1\012\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1\036" +
    "\uffd1\037\uffd1\060\uffd1\062\uffd1\064\uffd1\065\uffd1\066\uffd1" +
    "\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\001" +
    "\002\000\060\006\055\015\050\032\042\035\053\036\056" +
    "\040\062\041\054\042\044\043\051\044\037\045\041\046" +
    "\035\047\065\050\045\051\057\052\047\053\064\054\040" +
    "\055\061\056\043\057\052\061\036\075\063\001\002\000" +
    "\042\007\166\014\103\015\076\016\101\017\072\020\071" +
    "\021\077\022\107\023\105\024\100\025\074\026\073\027" +
    "\102\030\070\031\104\033\106\001\002\000\110\002\uffac" +
    "\003\uffac\004\uffac\007\uffac\011\uffac\012\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\033" +
    "\uffac\034\uffac\036\uffac\037\uffac\060\uffac\062\uffac\064\uffac" +
    "\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073" +
    "\uffac\074\uffac\001\002\000\110\002\uffce\003\uffce\004\uffce" +
    "\007\uffce\011\uffce\012\uffce\014\uffce\015\uffce\016\101\017" +
    "\072\020\uffce\021\077\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\033\uffce\034\uffce\036" +
    "\uffce\037\uffce\060\uffce\062\uffce\064\uffce\065\uffce\066\uffce" +
    "\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\001" +
    "\002\000\060\006\055\015\050\032\042\035\053\036\056" +
    "\040\062\041\054\042\044\043\051\044\037\045\041\046" +
    "\035\047\065\050\045\051\057\052\047\053\064\054\040" +
    "\055\061\056\043\057\052\061\036\075\063\001\002\000" +
    "\042\007\172\014\103\015\076\016\101\017\072\020\071" +
    "\021\077\022\107\023\105\024\100\025\074\026\073\027" +
    "\102\030\070\031\104\033\106\001\002\000\110\002\uffb1" +
    "\003\uffb1\004\uffb1\007\uffb1\011\uffb1\012\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\033" +
    "\uffb1\034\uffb1\036\uffb1\037\uffb1\060\uffb1\062\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073" +
    "\uffb1\074\uffb1\001\002\000\060\006\055\015\050\032\042" +
    "\035\053\036\056\040\062\041\054\042\044\043\051\044" +
    "\037\045\041\046\035\047\065\050\045\051\057\052\047" +
    "\053\064\054\040\055\061\056\043\057\052\061\036\075" +
    "\063\001\002\000\042\007\175\014\103\015\076\016\101" +
    "\017\072\020\071\021\077\022\107\023\105\024\100\025" +
    "\074\026\073\027\102\030\070\031\104\033\106\001\002" +
    "\000\004\005\176\001\002\000\026\003\024\036\020\060" +
    "\007\062\013\064\005\065\016\066\027\070\022\071\004" +
    "\072\011\001\002\000\030\003\024\004\201\036\020\060" +
    "\007\062\013\064\005\065\016\066\027\070\022\071\004" +
    "\072\011\001\002\000\030\003\uffe0\004\uffe0\036\uffe0\060" +
    "\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\070\uffe0\071\uffe0" +
    "\072\uffe0\001\002\000\036\002\uffec\003\uffec\004\uffec\036" +
    "\uffec\060\uffec\062\uffec\064\uffec\065\uffec\066\uffec\070\uffec" +
    "\071\uffec\072\uffec\073\uffec\074\uffec\001\002\000\030\003" +
    "\uffe1\004\uffe1\036\uffe1\060\uffe1\062\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\070\uffe1\071\uffe1\072\uffe1\001\002\000\060\006" +
    "\055\015\050\032\042\035\053\036\056\040\062\041\054" +
    "\042\044\043\051\044\037\045\041\046\035\047\065\050" +
    "\045\051\057\052\047\053\064\054\040\055\061\056\043" +
    "\057\052\061\036\075\063\001\002\000\042\007\205\014" +
    "\103\015\076\016\101\017\072\020\071\021\077\022\107" +
    "\023\105\024\100\025\074\026\073\027\102\030\070\031" +
    "\104\033\106\001\002\000\110\002\uffb3\003\uffb3\004\uffb3" +
    "\007\uffb3\011\uffb3\012\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\036" +
    "\uffb3\037\uffb3\060\uffb3\062\uffb3\064\uffb3\065\uffb3\066\uffb3" +
    "\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\001" +
    "\002\000\060\006\055\015\050\032\042\035\053\036\056" +
    "\040\062\041\054\042\044\043\051\044\037\045\041\046" +
    "\035\047\065\050\045\051\057\052\047\053\064\054\040" +
    "\055\061\056\043\057\052\061\036\075\063\001\002\000" +
    "\042\007\210\014\103\015\076\016\101\017\072\020\071" +
    "\021\077\022\107\023\105\024\100\025\074\026\073\027" +
    "\102\030\070\031\104\033\106\001\002\000\110\002\uffad" +
    "\003\uffad\004\uffad\007\uffad\011\uffad\012\uffad\014\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\033" +
    "\uffad\034\uffad\036\uffad\037\uffad\060\uffad\062\uffad\064\uffad" +
    "\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073" +
    "\uffad\074\uffad\001\002\000\110\002\uffcf\003\uffcf\004\uffcf" +
    "\007\uffcf\011\uffcf\012\uffcf\014\103\015\076\016\101\017" +
    "\072\020\071\021\077\022\107\023\105\024\100\025\074" +
    "\026\073\027\102\030\070\031\104\033\106\034\uffcf\036" +
    "\uffcf\037\uffcf\060\uffcf\062\uffcf\064\uffcf\065\uffcf\066\uffcf" +
    "\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\001" +
    "\002\000\060\006\055\015\050\032\042\035\053\036\056" +
    "\040\062\041\054\042\044\043\051\044\037\045\041\046" +
    "\035\047\065\050\045\051\057\052\047\053\064\054\040" +
    "\055\061\056\043\057\052\061\036\075\063\001\002\000" +
    "\042\007\214\014\103\015\076\016\101\017\072\020\071" +
    "\021\077\022\107\023\105\024\100\025\074\026\073\027" +
    "\102\030\070\031\104\033\106\001\002\000\110\002\uffb6" +
    "\003\uffb6\004\uffb6\007\uffb6\011\uffb6\012\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\033" +
    "\uffb6\034\uffb6\036\uffb6\037\uffb6\060\uffb6\062\uffb6\064\uffb6" +
    "\065\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073" +
    "\uffb6\074\uffb6\001\002\000\060\006\055\015\050\032\042" +
    "\035\053\036\056\040\062\041\054\042\044\043\051\044" +
    "\037\045\041\046\035\047\065\050\045\051\057\052\047" +
    "\053\064\054\040\055\061\056\043\057\052\061\036\075" +
    "\063\001\002\000\042\007\217\014\103\015\076\016\101" +
    "\017\072\020\071\021\077\022\107\023\105\024\100\025" +
    "\074\026\073\027\102\030\070\031\104\033\106\001\002" +
    "\000\110\002\uffb7\003\uffb7\004\uffb7\007\uffb7\011\uffb7\012" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\033\uffb7\034\uffb7\036\uffb7\037\uffb7\060\uffb7" +
    "\062\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071" +
    "\uffb7\072\uffb7\073\uffb7\074\uffb7\001\002\000\060\006\055" +
    "\015\050\032\042\035\053\036\056\040\062\041\054\042" +
    "\044\043\051\044\037\045\041\046\035\047\065\050\045" +
    "\051\057\052\047\053\064\054\040\055\061\056\043\057" +
    "\052\061\036\075\063\001\002\000\042\007\222\014\103" +
    "\015\076\016\101\017\072\020\071\021\077\022\107\023" +
    "\105\024\100\025\074\026\073\027\102\030\070\031\104" +
    "\033\106\001\002\000\110\002\uffb5\003\uffb5\004\uffb5\007" +
    "\uffb5\011\uffb5\012\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5\036\uffb5" +
    "\037\uffb5\060\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5\067" +
    "\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\001\002" +
    "\000\036\002\ufff3\003\ufff3\004\ufff3\036\ufff3\060\ufff3\062" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\070\ufff3\071\ufff3\072\ufff3" +
    "\073\ufff3\074\ufff3\001\002\000\036\002\uffee\003\uffee\004" +
    "\uffee\036\uffee\060\uffee\062\uffee\064\uffee\065\uffee\066\uffee" +
    "\070\uffee\071\uffee\072\uffee\073\uffee\074\uffee\001\002\000" +
    "\036\002\uffd5\003\uffd5\004\uffd5\036\uffd5\060\uffd5\062\uffd5" +
    "\064\uffd5\065\uffd5\066\uffd5\070\uffd5\071\uffd5\072\uffd5\073" +
    "\uffd5\074\uffd5\001\002\000\060\006\055\015\050\032\042" +
    "\035\053\036\056\040\062\041\054\042\044\043\051\044" +
    "\037\045\041\046\035\047\065\050\045\051\057\052\047" +
    "\053\064\054\040\055\061\056\043\057\052\061\036\075" +
    "\063\001\002\000\076\002\uffd4\003\uffd4\004\uffd4\012\225" +
    "\014\103\015\076\016\101\017\072\020\071\021\077\022" +
    "\107\023\105\024\100\025\074\026\073\027\102\030\070" +
    "\031\104\033\106\036\uffd4\060\uffd4\062\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4" +
    "\001\002\000\036\002\uffd6\003\uffd6\004\uffd6\036\uffd6\060" +
    "\uffd6\062\uffd6\064\uffd6\065\uffd6\066\uffd6\070\uffd6\071\uffd6" +
    "\072\uffd6\073\uffd6\074\uffd6\001\002\000\026\003\024\036" +
    "\020\060\007\062\013\064\005\065\016\066\027\070\022" +
    "\071\004\072\011\001\002\000\030\003\024\004\233\036" +
    "\020\060\007\062\013\064\005\065\016\066\027\070\022" +
    "\071\004\072\011\001\002\000\004\064\234\001\002\000" +
    "\004\006\235\001\002\000\060\006\055\015\050\032\042" +
    "\035\053\036\056\040\062\041\054\042\044\043\051\044" +
    "\037\045\041\046\035\047\065\050\045\051\057\052\047" +
    "\053\064\054\040\055\061\056\043\057\052\061\036\075" +
    "\063\001\002\000\042\007\237\014\103\015\076\016\101" +
    "\017\072\020\071\021\077\022\107\023\105\024\100\025" +
    "\074\026\073\027\102\030\070\031\104\033\106\001\002" +
    "\000\040\002\uffd4\003\uffd4\004\uffd4\012\225\036\uffd4\060" +
    "\uffd4\062\uffd4\064\uffd4\065\uffd4\066\uffd4\070\uffd4\071\uffd4" +
    "\072\uffd4\073\uffd4\074\uffd4\001\002\000\036\002\uffeb\003" +
    "\uffeb\004\uffeb\036\uffeb\060\uffeb\062\uffeb\064\uffeb\065\uffeb" +
    "\066\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\001" +
    "\002\000\060\006\055\015\050\032\042\035\053\036\056" +
    "\040\062\041\054\042\044\043\051\044\037\045\041\046" +
    "\035\047\065\050\045\051\057\052\047\053\064\054\040" +
    "\055\061\056\043\057\052\061\036\075\063\001\002\000" +
    "\042\007\243\014\103\015\076\016\101\017\072\020\071" +
    "\021\077\022\107\023\105\024\100\025\074\026\073\027" +
    "\102\030\070\031\104\033\106\001\002\000\004\005\244" +
    "\001\002\000\026\003\024\036\020\060\007\062\013\064" +
    "\005\065\016\066\027\070\022\071\004\072\011\001\002" +
    "\000\030\003\024\004\246\036\020\060\007\062\013\064" +
    "\005\065\016\066\027\070\022\071\004\072\011\001\002" +
    "\000\040\002\uffe7\003\uffe7\004\uffe7\036\uffe7\060\uffe7\062" +
    "\uffe7\063\247\064\uffe7\065\uffe7\066\uffe7\070\uffe7\071\uffe7" +
    "\072\uffe7\073\uffe7\074\uffe7\001\002\000\006\005\270\062" +
    "\271\001\002\000\040\002\uffe5\003\uffe5\004\uffe5\036\uffe5" +
    "\060\uffe5\062\uffe5\063\251\064\uffe5\065\uffe5\066\uffe5\070" +
    "\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\001\002\000\006" +
    "\005\252\062\253\001\002\000\026\003\024\036\020\060" +
    "\007\062\013\064\005\065\016\066\027\070\022\071\004" +
    "\072\011\001\002\000\004\006\254\001\002\000\060\006" +
    "\055\015\050\032\042\035\053\036\056\040\062\041\054" +
    "\042\044\043\051\044\037\045\041\046\035\047\065\050" +
    "\045\051\057\052\047\053\064\054\040\055\061\056\043" +
    "\057\052\061\036\075\063\001\002\000\042\007\256\014" +
    "\103\015\076\016\101\017\072\020\071\021\077\022\107" +
    "\023\105\024\100\025\074\026\073\027\102\030\070\031" +
    "\104\033\106\001\002\000\004\005\257\001\002\000\026" +
    "\003\024\036\020\060\007\062\013\064\005\065\016\066" +
    "\027\070\022\071\004\072\011\001\002\000\030\003\uffdc" +
    "\004\uffdc\036\uffdc\060\uffdc\062\uffdc\064\uffdc\065\uffdc\066" +
    "\uffdc\070\uffdc\071\uffdc\072\uffdc\001\002\000\030\003\024" +
    "\004\262\036\020\060\007\062\013\064\005\065\016\066" +
    "\027\070\022\071\004\072\011\001\002\000\040\002\uffe3" +
    "\003\uffe3\004\uffe3\036\uffe3\060\uffe3\062\uffe3\063\uffe3\064" +
    "\uffe3\065\uffe3\066\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3" +
    "\074\uffe3\001\002\000\030\003\uffdd\004\uffdd\036\uffdd\060" +
    "\uffdd\062\uffdd\064\uffdd\065\uffdd\066\uffdd\070\uffdd\071\uffdd" +
    "\072\uffdd\001\002\000\030\003\uffde\004\uffde\036\uffde\060" +
    "\uffde\062\uffde\064\uffde\065\uffde\066\uffde\070\uffde\071\uffde" +
    "\072\uffde\001\002\000\030\003\024\004\266\036\020\060" +
    "\007\062\013\064\005\065\016\066\027\070\022\071\004" +
    "\072\011\001\002\000\036\002\uffe4\003\uffe4\004\uffe4\036" +
    "\uffe4\060\uffe4\062\uffe4\064\uffe4\065\uffe4\066\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\073\uffe4\074\uffe4\001\002\000\030\003" +
    "\uffdf\004\uffdf\036\uffdf\060\uffdf\062\uffdf\064\uffdf\065\uffdf" +
    "\066\uffdf\070\uffdf\071\uffdf\072\uffdf\001\002\000\026\003" +
    "\024\036\020\060\007\062\013\064\005\065\016\066\027" +
    "\070\022\071\004\072\011\001\002\000\004\006\272\001" +
    "\002\000\060\006\055\015\050\032\042\035\053\036\056" +
    "\040\062\041\054\042\044\043\051\044\037\045\041\046" +
    "\035\047\065\050\045\051\057\052\047\053\064\054\040" +
    "\055\061\056\043\057\052\061\036\075\063\001\002\000" +
    "\042\007\274\014\103\015\076\016\101\017\072\020\071" +
    "\021\077\022\107\023\105\024\100\025\074\026\073\027" +
    "\102\030\070\031\104\033\106\001\002\000\004\005\275" +
    "\001\002\000\026\003\024\036\020\060\007\062\013\064" +
    "\005\065\016\066\027\070\022\071\004\072\011\001\002" +
    "\000\030\003\024\004\277\036\020\060\007\062\013\064" +
    "\005\065\016\066\027\070\022\071\004\072\011\001\002" +
    "\000\040\002\uffe2\003\uffe2\004\uffe2\036\uffe2\060\uffe2\062" +
    "\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\070\uffe2\071\uffe2" +
    "\072\uffe2\073\uffe2\074\uffe2\001\002\000\030\003\024\004" +
    "\301\036\020\060\007\062\013\064\005\065\016\066\027" +
    "\070\022\071\004\072\011\001\002\000\036\002\uffe6\003" +
    "\uffe6\004\uffe6\036\uffe6\060\uffe6\062\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\001" +
    "\002\000\060\006\055\015\050\032\042\035\053\036\056" +
    "\040\062\041\054\042\044\043\051\044\037\045\041\046" +
    "\035\047\065\050\045\051\057\052\047\053\064\054\040" +
    "\055\061\056\043\057\052\061\036\075\063\001\002\000" +
    "\042\007\304\014\103\015\076\016\101\017\072\020\071" +
    "\021\077\022\107\023\105\024\100\025\074\026\073\027" +
    "\102\030\070\031\104\033\106\001\002\000\004\005\305" +
    "\001\002\000\004\073\307\001\002\000\010\004\314\073" +
    "\316\074\315\001\002\000\060\006\055\015\050\032\042" +
    "\035\053\036\056\040\062\041\054\042\044\043\051\044" +
    "\037\045\041\046\035\047\065\050\045\051\057\052\047" +
    "\053\064\054\040\055\061\056\043\057\052\061\036\075" +
    "\063\001\002\000\042\014\103\015\076\016\101\017\072" +
    "\020\071\021\077\022\107\023\105\024\100\025\074\026" +
    "\073\027\102\030\070\031\104\033\106\034\311\001\002" +
    "\000\026\003\024\036\020\060\007\062\013\064\005\065" +
    "\016\066\027\070\022\071\004\072\011\001\002\000\034" +
    "\003\024\004\uffef\036\020\060\007\062\013\064\005\065" +
    "\016\066\027\070\022\071\004\072\011\073\uffef\074\uffef" +
    "\001\002\000\036\002\uffff\003\uffff\004\uffff\036\uffff\060" +
    "\uffff\062\uffff\064\uffff\065\uffff\066\uffff\070\uffff\071\uffff" +
    "\072\uffff\073\uffff\074\uffff\001\002\000\036\002\ufff2\003" +
    "\ufff2\004\ufff2\036\ufff2\060\ufff2\062\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\001" +
    "\002\000\004\034\322\001\002\000\060\006\055\015\050" +
    "\032\042\035\053\036\056\040\062\041\054\042\044\043" +
    "\051\044\037\045\041\046\035\047\065\050\045\051\057" +
    "\052\047\053\064\054\040\055\061\056\043\057\052\061" +
    "\036\075\063\001\002\000\042\014\103\015\076\016\101" +
    "\017\072\020\071\021\077\022\107\023\105\024\100\025" +
    "\074\026\073\027\102\030\070\031\104\033\106\034\320" +
    "\001\002\000\026\003\024\036\020\060\007\062\013\064" +
    "\005\065\016\066\027\070\022\071\004\072\011\001\002" +
    "\000\034\003\024\004\ufff0\036\020\060\007\062\013\064" +
    "\005\065\016\066\027\070\022\071\004\072\011\073\ufff0" +
    "\074\ufff0\001\002\000\026\003\024\036\020\060\007\062" +
    "\013\064\005\065\016\066\027\070\022\071\004\072\011" +
    "\001\002\000\030\003\024\004\324\036\020\060\007\062" +
    "\013\064\005\065\016\066\027\070\022\071\004\072\011" +
    "\001\002\000\036\002\ufff1\003\ufff1\004\ufff1\036\ufff1\060" +
    "\ufff1\062\ufff1\064\ufff1\065\ufff1\066\ufff1\070\ufff1\071\ufff1" +
    "\072\ufff1\073\ufff1\074\ufff1\001\002\000\060\006\055\015" +
    "\050\032\042\035\053\036\056\040\062\041\054\042\044" +
    "\043\051\044\037\045\041\046\035\047\065\050\045\051" +
    "\057\052\047\053\064\054\040\055\061\056\043\057\052" +
    "\061\036\075\063\001\002\000\042\007\327\014\103\015" +
    "\076\016\101\017\072\020\071\021\077\022\107\023\105" +
    "\024\100\025\074\026\073\027\102\030\070\031\104\033" +
    "\106\001\002\000\040\002\uffd4\003\uffd4\004\uffd4\012\225" +
    "\036\uffd4\060\uffd4\062\uffd4\064\uffd4\065\uffd4\066\uffd4\070" +
    "\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\001\002\000\036" +
    "\002\uffd3\003\uffd3\004\uffd3\036\uffd3\060\uffd3\062\uffd3\064" +
    "\uffd3\065\uffd3\066\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3" +
    "\074\uffd3\001\002\000\060\006\055\015\050\032\042\035" +
    "\053\036\056\040\062\041\054\042\044\043\051\044\037" +
    "\045\041\046\035\047\065\050\045\051\057\052\047\053" +
    "\064\054\040\055\061\056\043\057\052\061\036\075\063" +
    "\001\002\000\042\007\333\014\103\015\076\016\101\017" +
    "\072\020\071\021\077\022\107\023\105\024\100\025\074" +
    "\026\073\027\102\030\070\031\104\033\106\001\002\000" +
    "\004\005\334\001\002\000\026\003\024\036\020\060\007" +
    "\062\013\064\005\065\016\066\027\070\022\071\004\072" +
    "\011\001\002\000\030\003\uffe8\004\uffe8\036\uffe8\060\uffe8" +
    "\062\uffe8\064\uffe8\065\uffe8\066\uffe8\070\uffe8\071\uffe8\072" +
    "\uffe8\001\002\000\030\003\024\004\337\036\020\060\007" +
    "\062\013\064\005\065\016\066\027\070\022\071\004\072" +
    "\011\001\002\000\036\002\uffea\003\uffea\004\uffea\036\uffea" +
    "\060\uffea\062\uffea\064\uffea\065\uffea\066\uffea\070\uffea\071" +
    "\uffea\072\uffea\073\uffea\074\uffea\001\002\000\030\003\uffe9" +
    "\004\uffe9\036\uffe9\060\uffe9\062\uffe9\064\uffe9\065\uffe9\066" +
    "\uffe9\070\uffe9\071\uffe9\072\uffe9\001\002\000\036\002\uffed" +
    "\003\uffed\004\uffed\036\uffed\060\uffed\062\uffed\064\uffed\065" +
    "\uffed\066\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\034\002\031\003\007\004\005\007\013\010" +
    "\024\022\022\024\020\026\027\027\016\030\025\031\011" +
    "\032\014\034\030\001\001\000\004\011\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\312\007\013\010\024\022\022\024\020\026\027\027" +
    "\016\030\025\031\011\032\014\034\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\045\017\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\210\017\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\166\017\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\161\016\136\017\057" +
    "\001\001\000\002\001\001\000\006\016\157\017\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\066\017\057" +
    "\001\001\000\002\001\001\000\006\016\131\017\057\001" +
    "\001\000\006\016\130\017\057\001\001\000\006\016\127" +
    "\017\057\001\001\000\006\016\126\017\057\001\001\000" +
    "\006\016\125\017\057\001\001\000\006\016\123\017\057" +
    "\001\001\000\006\016\122\017\057\001\001\000\006\016" +
    "\121\017\057\001\001\000\006\016\120\017\057\001\001" +
    "\000\006\016\117\017\057\001\001\000\006\016\116\017" +
    "\057\001\001\000\006\016\115\017\057\001\001\000\006" +
    "\016\114\017\057\001\001\000\006\016\113\017\057\001" +
    "\001\000\006\016\110\017\057\001\001\000\006\016\107" +
    "\017\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\112\017\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\133\017\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\137" +
    "\016\136\017\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\142\017\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\144\017\057\001\001\000" +
    "\002\001\001\000\006\016\147\017\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\152\017\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\155\017\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\164\017\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\170\017\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\173\017\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\177\007\013\010" +
    "\024\022\022\023\176\024\020\026\027\027\016\030\025" +
    "\031\011\032\014\034\030\001\001\000\030\004\201\007" +
    "\013\010\024\022\022\024\020\026\027\027\016\030\025" +
    "\031\011\032\014\034\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\203\017\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\206\017\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\212\017\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\215\017\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\220\017\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\226\017\057\001\001\000\004\011\227\001\001" +
    "\000\002\001\001\000\032\004\177\007\013\010\024\022" +
    "\022\023\231\024\020\026\027\027\016\030\025\031\011" +
    "\032\014\034\030\001\001\000\030\004\201\007\013\010" +
    "\024\022\022\024\020\026\027\027\016\030\025\031\011" +
    "\032\014\034\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\235\017\057\001\001\000\002\001\001" +
    "\000\004\011\237\001\001\000\002\001\001\000\006\016" +
    "\241\017\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\177\007\013\010\024\022\022\023\244\024" +
    "\020\026\027\027\016\030\025\031\011\032\014\034\030" +
    "\001\001\000\030\004\201\007\013\010\024\022\022\024" +
    "\020\026\027\027\016\030\025\031\011\032\014\034\030" +
    "\001\001\000\004\025\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\263\007\013" +
    "\010\024\021\264\022\022\024\020\026\027\027\016\030" +
    "\025\031\011\032\014\034\030\001\001\000\002\001\001" +
    "\000\006\016\254\017\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\257\007\013\010\024\020\260" +
    "\022\022\024\020\026\027\027\016\030\025\031\011\032" +
    "\014\034\030\001\001\000\002\001\001\000\030\004\262" +
    "\007\013\010\024\022\022\024\020\026\027\027\016\030" +
    "\025\031\011\032\014\034\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\266\007" +
    "\013\010\024\022\022\024\020\026\027\027\016\030\025" +
    "\031\011\032\014\034\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\257\007\013\010\024\020\277" +
    "\022\022\024\020\026\027\027\016\030\025\031\011\032" +
    "\014\034\030\001\001\000\002\001\001\000\006\016\272" +
    "\017\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\257\007\013\010\024\020\275\022\022\024\020" +
    "\026\027\027\016\030\025\031\011\032\014\034\030\001" +
    "\001\000\030\004\262\007\013\010\024\022\022\024\020" +
    "\026\027\027\016\030\025\031\011\032\014\034\030\001" +
    "\001\000\002\001\001\000\030\004\262\007\013\010\024" +
    "\022\022\024\020\026\027\027\016\030\025\031\011\032" +
    "\014\034\030\001\001\000\002\001\001\000\006\016\302" +
    "\017\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\305\001\001\000\002\001\001\000\006\016\307" +
    "\017\057\001\001\000\002\001\001\000\032\003\311\004" +
    "\005\007\013\010\024\022\022\024\020\026\027\027\016" +
    "\030\025\031\011\032\014\034\030\001\001\000\030\004" +
    "\312\007\013\010\024\022\022\024\020\026\027\027\016" +
    "\030\025\031\011\032\014\034\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\316" +
    "\017\057\001\001\000\002\001\001\000\032\003\320\004" +
    "\005\007\013\010\024\022\022\024\020\026\027\027\016" +
    "\030\025\031\011\032\014\034\030\001\001\000\030\004" +
    "\312\007\013\010\024\022\022\024\020\026\027\027\016" +
    "\030\025\031\011\032\014\034\030\001\001\000\032\003" +
    "\322\004\005\007\013\010\024\022\022\024\020\026\027" +
    "\027\016\030\025\031\011\032\014\034\030\001\001\000" +
    "\030\004\312\007\013\010\024\022\022\024\020\026\027" +
    "\027\016\030\025\031\011\032\014\034\030\001\001\000" +
    "\002\001\001\000\006\016\325\017\057\001\001\000\002" +
    "\001\001\000\004\011\327\001\001\000\002\001\001\000" +
    "\006\016\331\017\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\334\007\013\010\024\022\022\024" +
    "\020\026\027\027\016\030\025\031\011\032\014\033\335" +
    "\034\030\001\001\000\002\001\001\000\030\004\337\007" +
    "\013\010\024\022\022\024\020\026\027\027\016\030\025" +
    "\031\011\032\014\034\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public NodoAbstracto Raiz;
    public ArrayList <NodoAbstracto> Expresiones = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones2 = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones3 = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones4 = new ArrayList();
    public ArrayList <NodoAbstracto> ExpresionesWhile = new ArrayList();
    public String Lado1, Lado2 = "";
    public String Manejor_Error = "";
     public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila+1);
        System.out.println("\t\tColumna: "+columna);

         TError ERRORES = new TError(lexema,fila,columna,"Sintactico", "Sentencia incorrecta" );
         TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
       
        
        
    }

//Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       // TERROR ERRORES = new TERROR(lexema,"Error Sintactico","Caracter no esperado",fila,columna);
       // TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
     
    }
    
    public void AgregarElmentoALista(NodoAbstracto Nodo, NodoAbstracto Elemento){
        Nodo.Expresiones.add(Elemento);
    }
    public void semantic(String msg, Object obj) {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analisis_Sintactico$actions {



  private final Analisis_Sintactico parser;

  /** Constructor */
  CUP$Analisis_Sintactico$actions(Analisis_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action_part00000000(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto start_val = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico$parser.done_parsing();
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("INICIO");
                        nuevo.Hijos.add(nod);
                        parser.Raiz = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        //NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        //nuevo.Hijos.add(nodsentencias);
                        //nuevo.Hijos.add(nod);
                        //RESULT = nuevo;
                        
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARARASIGNAR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        RESULT=nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IMPRIM 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        //System.out.println("ID LINEA : SENTENCIA IMPRIMIR" + nodleft + " Columna " + nodright);
                        RESULT=nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= ELIF 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= ELIFELSE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= ELWHILE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= ELDOWHILE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= ELFOR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= ELBREAK 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= ELCONTINUE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= ELSWITCH 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= error puntoycoma 
            {
              NodoAbstracto RESULT =null;
		
                         NodoAbstracto nuevo = new ERRORES("Error");
                         NodoAbstracto nuevoid = new Nodo("#Error En alguna mulada XD");
                         nuevo.Cadena   = "#Error Semantico Encontrado ver reporte";
                         RESULT= nuevo; 
                     
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELSWITCH ::= SWITCH parentesisabrir EXP parentesiscerrar llaveabrir EXPRESIONESSWITCH llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Switch("SWITCH");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                RESULT = nuevo;
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELSWITCH",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELSWITCH ::= SWITCH parentesisabrir EXP parentesiscerrar llaveabrir EXPRESIONESSWITCH DEF DOSP SENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentdefleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentdefright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentdef = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Switch("SWITCH");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                nuevo.Hijos.add(sentdef);
                RESULT = nuevo;
            
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELSWITCH",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESIONESSWITCH ::= EXPRESIONESSWITCH CASE EXP DOSP SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("CASE");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(sentencias);
                        nodsentencias.Hijos.add(nuevo);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONESSWITCH",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESIONESSWITCH ::= CASE EXP DOSP SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("CASE");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(sentencias);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONESSWITCH",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELBREAK ::= BREAK FINAL 
            {
              NodoAbstracto RESULT =null;
		
             NodoAbstracto nuevo = new Break("Break");
             RESULT= nuevo; 
          
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELBREAK",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELCONTINUE ::= CONTINUE FINAL 
            {
              NodoAbstracto RESULT =null;
		
            NodoAbstracto nuevo = new Continue("Break");
             RESULT= nuevo; 
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELCONTINUE",24, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELFOR ::= FOR parentesisabrir EXP IN EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new For("DoWhile");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(exp2);
            nuevo.Hijos.add(sentencias);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;
    
         
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELFOR",22, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELDOWHILE ::= DO llaveabrir LISTASENTENCIAS llavecerrar WHILE parentesisabrir EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
           NodoAbstracto nuevo = new DoWhile("DoWhile");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;


              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELDOWHILE",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELWHILE ::= WHILE parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIASwhile llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new While("WHILE");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< ExpresionesWhile.size();i++){
                           nuevo.Expresiones.add(ExpresionesWhile.get(i));
                        }
            ExpresionesWhile.clear();
            RESULT = nuevo;
    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELWHILE",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTASENTENCIASwhile ::= LISTASENTENCIASwhile SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                         ExpresionesWhile.add(nod);
                       // Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIASwhile",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTASENTENCIASwhile ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        ExpresionesWhile.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIASwhile",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIF("IF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar ELSE llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIF("IF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            for(int i = 0; i< Expresiones2.size();i++){
                           nuevo.Expresiones2.add(Expresiones2.get(i));
                        }
            Expresiones2.clear();
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar LISTAELSES 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
            NodoAbstracto nuevo = new SentenciaIFElseIF("IFelseIF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar LISTAELSES ELSE llaveabrir LISTASENTENCIAS3 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentaleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentaright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto senta = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIFElseIF("IFelseIF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.Hijos.add(senta);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;            
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTAELSES ::= LISTAELSES ELSE IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int noditoleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int noditoright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		NodoAbstracto nodito = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Nodo("ELSEIF1");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                nodito.Hijos.add(nuevo);
                RESULT = nodito;
              
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAELSES",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTAELSES ::= ELSE IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new Nodo("ELSEIF2");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                RESULT = nuevo;
              
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAELSES",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTASENTENCIAS ::= LISTASENTENCIAS SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        Expresiones.add(nod);
                       // Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTASENTENCIAS ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTASENTENCIAS3 ::= LISTASENTENCIAS3 SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        
                        Expresiones4.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS3",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTASENTENCIAS3 ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        Expresiones4.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS3",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTASENTENCIAS2 ::= LISTASENTENCIAS2 SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        //Expresiones.add(nod);
                        Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS2",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTASENTENCIAS2 ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        //Expresiones.add(nod);
                        Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS2",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MODVECTOR ::= id corcheteabrir EXP corchetecerrar igual EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MODVECTOR",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MODVECTOR ::= id corcheteabrir EXP corchetecerrar igual FuncionC EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MODVECTOR",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARARVECTORC ::= id igual FuncionC LISTAEXPRESIONES parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int Listaleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int Listaright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto Lista = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                        NodoAbstracto nuevo = new FuncionC("CASTEAR");
                        NodoAbstracto nuevoid = new Nodo(valor);
                        nuevo.Hijos.add(nuevoid);
                        for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
                        Expresiones.clear();
                        nuevo.Hijos.add(Lista);
                        Manejor_Error = "Error al crear vector" + valor;
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVECTORC",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTAEXPRESIONES ::= LISTAEXPRESIONES coma EXP 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                       // NodoAbstracto nuevo = new Nodo("EXP");
                       // nuevo.Hijos.add(nodsentencias);
                       // nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                        Expresiones2.add(nod);
                        Expresiones3.add(nod);
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        //RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTAEXPRESIONES ::= EXP 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        //NodoAbstracto nuevo = new Nodo("EXP");
                        //nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                        Expresiones2.add(nod);
                        Expresiones3.add(nod);
                        //RESULT = nuevo;
                        NodoAbstracto nuevo = new Nodo("EXP");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARARASIGNAR ::= id igual EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new DeclararAsignar("DECLARARASIGNAR");
                        NodoAbstracto nuevoid = new Nodo(valor);
                        nuevo.Hijos.add(nuevoid);
                        nuevo.Hijos.add(exp1);
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                        // for(int i = 0; i< Expresiones.size();i++){
                        //   nuevo.Expresiones.add(Expresiones.get(i));
                       // }
                       // Expresiones.clear();
                       // for(int i = 0; i< Expresiones3.size();i++){
                       //    nuevo.Expresiones2.add(Expresiones3.get(i));
                       // }
                       // Expresiones3.clear();
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARASIGNAR",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FINAL ::= puntoycoma 
            {
              NodoAbstracto RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FINAL ::= 
            {
              NodoAbstracto RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IMPRIM ::= imprimir parentesisabrir EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                        NodoAbstracto nuevo = new Imprimir("IMPRIMIR");
                        nuevo.Hijos.add(exp1);
                         Manejor_Error = "Error al imprimir";
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIM",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= LISTA parentesisabrir LISTAEXPRESIONES parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int valo4left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valo4right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valo4 = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int listaValoresleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int listaValoresright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto listaValores = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Lista");
                        NodoAbstracto nuevo2 = new Nodo("list(");
                        nuevo.Hijos.add(nuevo2);
                        nuevo.Hijos.add(listaValores);
                        nuevo.TipoDato = "Lista";
                        
                        RESULT = nuevo;

                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= FuncionC LISTAEXPRESIONES parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int valo4left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int valo4right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object valo4 = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int listaValoresleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int listaValoresright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto listaValores = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("FuncionC");
                        NodoAbstracto nuevo2 = new Nodo("c(");
                        nuevo.Hijos.add(nuevo2);
                        nuevo.Hijos.add(listaValores);
                        nuevo.TipoDato = "FuncionC";
                        //for(int i = 0; i< Expresiones2.size();i++){
                        //   nuevo.Expresiones2.add(Expresiones2.get(i));
                       // }
                       // Expresiones2.clear();
                        RESULT = nuevo;

                
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= EXP PREGUNTAC EXP DOSP EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp3 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Ternario("EXP");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(exp2);  
                        nuevo.Hijos.add(exp3);
                         Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= NOT EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new NOT("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= menos EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Negativo("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= EXP mas EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("+");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= EXP menos EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                    
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= EXP por EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("*");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= EXP div EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("/");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                      
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= EXP modulo EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("%%");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2); 
                        Manejor_Error = "Error en expresion";                   
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= EXP potencia EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("^");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);   
                        Manejor_Error = "Error en expresion";                 
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= EXP igualdad EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("==");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= EXP Noigualdad EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= EXP MayorQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= EXP MenorQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= EXP MayorIgualQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= EXP MenorIgualQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= EXP AND EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("&&");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";                      
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXP OR EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("||");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        Manejor_Error = "Error en expresion";
                        RESULT = exp1;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= NUMERO 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        Manejor_Error = "Error en expresion";
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= id 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("id");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "id";
                        nuevo.Nombre = valor;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= nulo 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= id corcheteabrir EXP corchetecerrar 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto pos = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Vector");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(pos);
                        nuevo.TipoDato = "vector";
                        Manejor_Error = "Error en expresion";
                        //RESULT = nuevo;
                        //nuevo.id = Integer.parseInt(pos);
                        nuevo.columna = valorleft;
                        nuevo.linea = valorright;
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= cadena 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        valor =  valor.replaceAll("\"", "");
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= ttrue 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= tfalse 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= typeof parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("TypeOF");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= length parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Length");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= stringlength parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("StringLength");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= remove parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Remove");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= tolowercase parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("ToLowerCase");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= touppercase parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("ToUpperCase");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= trunk parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Trunk");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= round parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Round");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        RESULT = nuevo;
                        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= mean parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mean");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(null);
                        nuevo.TipoDato = "decimal";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= mean parentesisabrir EXP coma EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int limiteleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int limiteright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto limite = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mean");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(limite);
                        nuevo.TipoDato = "decimal";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= median parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Median");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "median";
                        nuevo.Hijos.add(null);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= mode parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int nuevovalorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nuevovalorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nuevovalor = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Mode");
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(null);
                        nuevo.TipoDato = "mode";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NUMERO ::= entero 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Entero");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("NUMERO",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NUMERO ::= decimal 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Decimal");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "decimal";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("NUMERO",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analisis_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analisis_Sintactico$do_action_part00000000(
                               CUP$Analisis_Sintactico$act_num,
                               CUP$Analisis_Sintactico$parser,
                               CUP$Analisis_Sintactico$stack,
                               CUP$Analisis_Sintactico$top);
    }
}

}
