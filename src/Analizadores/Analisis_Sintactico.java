
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import static Analizadores.IDE.TABLA_DE_ERRORES_SINTACTICOS;
import CodigoASTCUP.*;
import Codigo.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analisis_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analisis_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analisis_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\026\011\000\002\022" +
    "\011\000\002\022\015\000\002\022\012\000\002\022\016" +
    "\000\002\025\013\000\002\025\012\000\002\023\004\000" +
    "\002\023\003\000\002\021\004\000\002\021\003\000\002" +
    "\020\004\000\002\020\003\000\002\015\011\000\002\015" +
    "\013\000\002\013\010\000\002\014\005\000\002\014\003" +
    "\000\002\007\006\000\002\011\003\000\002\011\002\000" +
    "\002\010\007\000\002\016\007\000\002\016\004\000\002" +
    "\016\004\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\006" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\014\003\016\036\010\045\012\047\014\051" +
    "\005\001\002\000\020\002\ufffa\003\ufffa\004\ufffa\036\ufffa" +
    "\045\ufffa\047\ufffa\051\ufffa\001\002\000\004\006\206\001" +
    "\002\000\016\002\000\003\016\036\010\045\012\047\014" +
    "\051\005\001\002\000\020\002\ufff9\003\ufff9\004\ufff9\036" +
    "\ufff9\045\ufff9\047\ufff9\051\ufff9\001\002\000\006\010\160" +
    "\013\161\001\002\000\004\002\157\001\002\000\004\006" +
    "\153\001\002\000\020\002\ufffd\003\ufffd\004\ufffd\036\ufffd" +
    "\045\ufffd\047\ufffd\051\ufffd\001\002\000\004\006\026\001" +
    "\002\000\016\002\ufffe\003\ufffe\036\ufffe\045\ufffe\047\ufffe" +
    "\051\ufffe\001\002\000\020\003\016\004\023\012\025\036" +
    "\010\045\012\047\014\051\005\001\002\000\020\002\ufff8" +
    "\003\ufff8\004\ufff8\036\ufff8\045\ufff8\047\ufff8\051\ufff8\001" +
    "\002\000\020\002\ufff7\003\ufff7\004\ufff7\036\ufff7\045\ufff7" +
    "\047\ufff7\051\ufff7\001\002\000\020\002\ufffb\003\ufffb\004" +
    "\ufffb\036\ufffb\045\ufffb\047\ufffb\051\ufffb\001\002\000\020" +
    "\002\ufffc\003\ufffc\004\ufffc\036\ufffc\045\ufffc\047\ufffc\051" +
    "\ufffc\001\002\000\020\002\ufff4\003\ufff4\004\ufff4\036\ufff4" +
    "\045\ufff4\047\ufff4\051\ufff4\001\002\000\020\002\ufff5\003" +
    "\ufff5\004\ufff5\036\ufff5\045\ufff5\047\ufff5\051\ufff5\001\002" +
    "\000\020\002\ufff6\003\ufff6\004\ufff6\036\ufff6\045\ufff6\047" +
    "\ufff6\051\ufff6\001\002\000\026\006\030\015\035\032\041" +
    "\036\027\040\040\041\031\042\036\043\032\044\034\046" +
    "\033\001\002\000\072\002\uffca\003\uffca\004\uffca\007\uffca" +
    "\010\150\011\uffca\012\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\033\uffca\034\uffca\036" +
    "\uffca\037\uffca\045\uffca\047\uffca\051\uffca\001\002\000\026" +
    "\006\030\015\035\032\041\036\027\040\040\041\031\042" +
    "\036\043\032\044\034\046\033\001\002\000\070\002\uffc6" +
    "\003\uffc6\004\uffc6\007\uffc6\011\uffc6\012\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\033" +
    "\uffc6\034\uffc6\036\uffc6\037\uffc6\045\uffc6\047\uffc6\051\uffc6" +
    "\001\002\000\070\002\uffc9\003\uffc9\004\uffc9\007\uffc9\011" +
    "\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9\036\uffc9\037\uffc9" +
    "\045\uffc9\047\uffc9\051\uffc9\001\002\000\070\002\uffc7\003" +
    "\uffc7\004\uffc7\007\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7" +
    "\034\uffc7\036\uffc7\037\uffc7\045\uffc7\047\uffc7\051\uffc7\001" +
    "\002\000\070\002\uffc3\003\uffc3\004\uffc3\007\uffc3\011\uffc3" +
    "\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3\045" +
    "\uffc3\047\uffc3\051\uffc3\001\002\000\026\006\030\015\035" +
    "\032\041\036\027\040\040\041\031\042\036\043\032\044" +
    "\034\046\033\001\002\000\070\002\uffc5\003\uffc5\004\uffc5" +
    "\007\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\034\uffc5\036" +
    "\uffc5\037\uffc5\045\uffc5\047\uffc5\051\uffc5\001\002\000\070" +
    "\002\uffcb\003\uffcb\004\uffcb\007\uffcb\011\uffcb\012\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb\045\uffcb\047\uffcb" +
    "\051\uffcb\001\002\000\070\002\uffc4\003\uffc4\004\uffc4\007" +
    "\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\033\uffc4\034\uffc4\036\uffc4" +
    "\037\uffc4\045\uffc4\047\uffc4\051\uffc4\001\002\000\026\006" +
    "\030\015\035\032\041\036\027\040\040\041\031\042\036" +
    "\043\032\044\034\046\033\001\002\000\042\007\060\014" +
    "\056\015\050\016\053\017\045\020\043\021\051\022\062" +
    "\023\057\024\052\025\046\026\047\027\054\030\044\031" +
    "\055\033\061\001\002\000\026\006\030\015\035\032\041" +
    "\036\027\040\040\041\031\042\036\043\032\044\034\046" +
    "\033\001\002\000\026\006\030\015\035\032\041\036\027" +
    "\040\040\041\031\042\036\043\032\044\034\046\033\001" +
    "\002\000\026\006\030\015\035\032\041\036\027\040\040" +
    "\041\031\042\036\043\032\044\034\046\033\001\002\000" +
    "\026\006\030\015\035\032\041\036\027\040\040\041\031" +
    "\042\036\043\032\044\034\046\033\001\002\000\026\006" +
    "\030\015\035\032\041\036\027\040\040\041\031\042\036" +
    "\043\032\044\034\046\033\001\002\000\026\006\030\015" +
    "\035\032\041\036\027\040\040\041\031\042\036\043\032" +
    "\044\034\046\033\001\002\000\026\006\030\015\035\032" +
    "\041\036\027\040\040\041\031\042\036\043\032\044\034" +
    "\046\033\001\002\000\026\006\030\015\035\032\041\036" +
    "\027\040\040\041\031\042\036\043\032\044\034\046\033" +
    "\001\002\000\026\006\030\015\035\032\041\036\027\040" +
    "\040\041\031\042\036\043\032\044\034\046\033\001\002" +
    "\000\026\006\030\015\035\032\041\036\027\040\040\041" +
    "\031\042\036\043\032\044\034\046\033\001\002\000\026" +
    "\006\030\015\035\032\041\036\027\040\040\041\031\042" +
    "\036\043\032\044\034\046\033\001\002\000\026\006\030" +
    "\015\035\032\041\036\027\040\040\041\031\042\036\043" +
    "\032\044\034\046\033\001\002\000\026\006\030\015\035" +
    "\032\041\036\027\040\040\041\031\042\036\043\032\044" +
    "\034\046\033\001\002\000\004\005\067\001\002\000\026" +
    "\006\030\015\035\032\041\036\027\040\040\041\031\042" +
    "\036\043\032\044\034\046\033\001\002\000\026\006\030" +
    "\015\035\032\041\036\027\040\040\041\031\042\036\043" +
    "\032\044\034\046\033\001\002\000\070\002\uffd4\003\uffd4" +
    "\004\uffd4\007\uffd4\011\uffd4\012\uffd4\014\056\015\050\016" +
    "\053\017\045\020\043\021\051\022\uffd4\023\uffd4\024\052" +
    "\025\046\026\047\027\054\030\uffd4\031\uffd4\033\uffd4\034" +
    "\uffd4\036\uffd4\037\uffd4\045\uffd4\047\uffd4\051\uffd4\001\002" +
    "\000\042\014\056\015\050\016\053\017\045\020\043\021" +
    "\051\022\062\023\057\024\052\025\046\026\047\027\054" +
    "\030\044\031\055\033\061\034\065\001\002\000\026\006" +
    "\030\015\035\032\041\036\027\040\040\041\031\042\036" +
    "\043\032\044\034\046\033\001\002\000\070\002\uffdd\003" +
    "\uffdd\004\uffdd\007\uffdd\011\uffdd\012\uffdd\014\056\015\050" +
    "\016\053\017\045\020\043\021\051\022\062\023\057\024" +
    "\052\025\046\026\047\027\054\030\044\031\055\033\061" +
    "\034\uffdd\036\uffdd\037\uffdd\045\uffdd\047\uffdd\051\uffdd\001" +
    "\002\000\014\003\016\036\010\045\012\047\014\051\005" +
    "\001\002\000\016\003\uffeb\004\uffeb\036\uffeb\045\uffeb\047" +
    "\uffeb\051\uffeb\001\002\000\016\003\016\004\072\036\010" +
    "\045\012\047\014\051\005\001\002\000\022\002\ufff2\003" +
    "\ufff2\004\ufff2\036\ufff2\045\ufff2\047\ufff2\050\074\051\ufff2" +
    "\001\002\000\016\003\uffec\004\uffec\036\uffec\045\uffec\047" +
    "\uffec\051\uffec\001\002\000\006\005\115\047\116\001\002" +
    "\000\022\002\ufff0\003\ufff0\004\ufff0\036\ufff0\045\ufff0\047" +
    "\ufff0\050\076\051\ufff0\001\002\000\006\005\077\047\100" +
    "\001\002\000\014\003\016\036\010\045\012\047\014\051" +
    "\005\001\002\000\004\006\101\001\002\000\026\006\030" +
    "\015\035\032\041\036\027\040\040\041\031\042\036\043" +
    "\032\044\034\046\033\001\002\000\042\007\103\014\056" +
    "\015\050\016\053\017\045\020\043\021\051\022\062\023" +
    "\057\024\052\025\046\026\047\027\054\030\044\031\055" +
    "\033\061\001\002\000\004\005\104\001\002\000\014\003" +
    "\016\036\010\045\012\047\014\051\005\001\002\000\016" +
    "\003\uffe7\004\uffe7\036\uffe7\045\uffe7\047\uffe7\051\uffe7\001" +
    "\002\000\016\003\016\004\107\036\010\045\012\047\014" +
    "\051\005\001\002\000\022\002\uffee\003\uffee\004\uffee\036" +
    "\uffee\045\uffee\047\uffee\050\uffee\051\uffee\001\002\000\016" +
    "\003\uffe8\004\uffe8\036\uffe8\045\uffe8\047\uffe8\051\uffe8\001" +
    "\002\000\016\003\uffe9\004\uffe9\036\uffe9\045\uffe9\047\uffe9" +
    "\051\uffe9\001\002\000\016\003\016\004\113\036\010\045" +
    "\012\047\014\051\005\001\002\000\020\002\uffef\003\uffef" +
    "\004\uffef\036\uffef\045\uffef\047\uffef\051\uffef\001\002\000" +
    "\016\003\uffea\004\uffea\036\uffea\045\uffea\047\uffea\051\uffea" +
    "\001\002\000\014\003\016\036\010\045\012\047\014\051" +
    "\005\001\002\000\004\006\117\001\002\000\026\006\030" +
    "\015\035\032\041\036\027\040\040\041\031\042\036\043" +
    "\032\044\034\046\033\001\002\000\042\007\121\014\056" +
    "\015\050\016\053\017\045\020\043\021\051\022\062\023" +
    "\057\024\052\025\046\026\047\027\054\030\044\031\055" +
    "\033\061\001\002\000\004\005\122\001\002\000\014\003" +
    "\016\036\010\045\012\047\014\051\005\001\002\000\016" +
    "\003\016\004\124\036\010\045\012\047\014\051\005\001" +
    "\002\000\022\002\uffed\003\uffed\004\uffed\036\uffed\045\uffed" +
    "\047\uffed\050\uffed\051\uffed\001\002\000\016\003\016\004" +
    "\126\036\010\045\012\047\014\051\005\001\002\000\020" +
    "\002\ufff1\003\ufff1\004\ufff1\036\ufff1\045\ufff1\047\ufff1\051" +
    "\ufff1\001\002\000\070\002\uffd3\003\uffd3\004\uffd3\007\uffd3" +
    "\011\uffd3\012\uffd3\014\056\015\050\016\053\017\045\020" +
    "\043\021\051\022\uffd3\023\uffd3\024\052\025\046\026\047" +
    "\027\054\030\uffd3\031\uffd3\033\uffd3\034\uffd3\036\uffd3\037" +
    "\uffd3\045\uffd3\047\uffd3\051\uffd3\001\002\000\070\002\uffda" +
    "\003\uffda\004\uffda\007\uffda\011\uffda\012\uffda\014\uffda\015" +
    "\uffda\016\053\017\045\020\uffda\021\051\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\033" +
    "\uffda\034\uffda\036\uffda\037\uffda\045\uffda\047\uffda\051\uffda" +
    "\001\002\000\070\002\uffcd\003\uffcd\004\uffcd\007\uffcd\011" +
    "\uffcd\012\uffcd\014\056\015\050\016\053\017\045\020\043" +
    "\021\051\022\062\023\057\024\052\025\046\026\047\027" +
    "\054\030\uffcd\031\uffcd\033\uffcd\034\uffcd\036\uffcd\037\uffcd" +
    "\045\uffcd\047\uffcd\051\uffcd\001\002\000\070\002\uffd0\003" +
    "\uffd0\004\uffd0\007\uffd0\011\uffd0\012\uffd0\014\056\015\050" +
    "\016\053\017\045\020\043\021\051\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0" +
    "\034\uffd0\036\uffd0\037\uffd0\045\uffd0\047\uffd0\051\uffd0\001" +
    "\002\000\070\002\uffd8\003\uffd8\004\uffd8\007\uffd8\011\uffd8" +
    "\012\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8\045" +
    "\uffd8\047\uffd8\051\uffd8\001\002\000\070\002\uffd1\003\uffd1" +
    "\004\uffd1\007\uffd1\011\uffd1\012\uffd1\014\056\015\050\016" +
    "\053\017\045\020\043\021\051\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034" +
    "\uffd1\036\uffd1\037\uffd1\045\uffd1\047\uffd1\051\uffd1\001\002" +
    "\000\070\002\uffd6\003\uffd6\004\uffd6\007\uffd6\011\uffd6\012" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6\045\uffd6" +
    "\047\uffd6\051\uffd6\001\002\000\070\002\uffd9\003\uffd9\004" +
    "\uffd9\007\uffd9\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016\053" +
    "\017\045\020\uffd9\021\051\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9" +
    "\036\uffd9\037\uffd9\045\uffd9\047\uffd9\051\uffd9\001\002\000" +
    "\070\002\uffcf\003\uffcf\004\uffcf\007\uffcf\011\uffcf\012\uffcf" +
    "\014\056\015\050\016\053\017\045\020\043\021\051\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf\045\uffcf\047" +
    "\uffcf\051\uffcf\001\002\000\070\002\uffd2\003\uffd2\004\uffd2" +
    "\007\uffd2\011\uffd2\012\uffd2\014\056\015\050\016\053\017" +
    "\045\020\043\021\051\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\036" +
    "\uffd2\037\uffd2\045\uffd2\047\uffd2\051\uffd2\001\002\000\070" +
    "\002\uffd7\003\uffd7\004\uffd7\007\uffd7\011\uffd7\012\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7\045\uffd7\047\uffd7" +
    "\051\uffd7\001\002\000\070\002\uffce\003\uffce\004\uffce\007" +
    "\uffce\011\uffce\012\uffce\014\056\015\050\016\053\017\045" +
    "\020\043\021\051\022\062\023\057\024\052\025\046\026" +
    "\047\027\054\030\uffce\031\uffce\033\uffce\034\uffce\036\uffce" +
    "\037\uffce\045\uffce\047\uffce\051\uffce\001\002\000\070\002" +
    "\uffd5\003\uffd5\004\uffd5\007\uffd5\011\uffd5\012\uffd5\014\056" +
    "\015\050\016\053\017\045\020\uffd5\021\051\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\033\uffd5\034\uffd5\036\uffd5\037\uffd5\045\uffd5\047\uffd5\051" +
    "\uffd5\001\002\000\070\002\uffdc\003\uffdc\004\uffdc\007\uffdc" +
    "\011\uffdc\012\uffdc\014\056\015\050\016\053\017\045\020" +
    "\043\021\051\022\062\023\057\024\052\025\046\026\047" +
    "\027\054\030\044\031\055\033\061\034\uffdc\036\uffdc\037" +
    "\uffdc\045\uffdc\047\uffdc\051\uffdc\001\002\000\070\002\uffdb" +
    "\003\uffdb\004\uffdb\007\uffdb\011\uffdb\012\uffdb\014\uffdb\015" +
    "\uffdb\016\053\017\045\020\uffdb\021\051\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\033" +
    "\uffdb\034\uffdb\036\uffdb\037\uffdb\045\uffdb\047\uffdb\051\uffdb" +
    "\001\002\000\042\007\147\014\056\015\050\016\053\017" +
    "\045\020\043\021\051\022\062\023\057\024\052\025\046" +
    "\026\047\027\054\030\044\031\055\033\061\001\002\000" +
    "\070\002\uffcc\003\uffcc\004\uffcc\007\uffcc\011\uffcc\012\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\033\uffcc\034\uffcc\036\uffcc\037\uffcc\045\uffcc\047" +
    "\uffcc\051\uffcc\001\002\000\026\006\030\015\035\032\041" +
    "\036\027\040\040\041\031\042\036\043\032\044\034\046" +
    "\033\001\002\000\042\011\152\014\056\015\050\016\053" +
    "\017\045\020\043\021\051\022\062\023\057\024\052\025" +
    "\046\026\047\027\054\030\044\031\055\033\061\001\002" +
    "\000\070\002\uffc8\003\uffc8\004\uffc8\007\uffc8\011\uffc8\012" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\033\uffc8\034\uffc8\036\uffc8\037\uffc8\045\uffc8" +
    "\047\uffc8\051\uffc8\001\002\000\026\006\030\015\035\032" +
    "\041\036\027\040\040\041\031\042\036\043\032\044\034" +
    "\046\033\001\002\000\042\007\155\014\056\015\050\016" +
    "\053\017\045\020\043\021\051\022\062\023\057\024\052" +
    "\025\046\026\047\027\054\030\044\031\055\033\061\001" +
    "\002\000\004\012\156\001\002\000\020\002\uffde\003\uffde" +
    "\004\uffde\036\uffde\045\uffde\047\uffde\051\uffde\001\002\000" +
    "\004\002\001\001\002\000\026\006\030\015\035\032\041" +
    "\036\027\040\040\041\031\042\036\043\032\044\034\046" +
    "\033\001\002\000\030\006\030\015\035\032\041\035\162" +
    "\036\027\040\040\041\031\042\036\043\032\044\034\046" +
    "\033\001\002\000\026\006\030\015\035\032\041\036\027" +
    "\040\040\041\031\042\036\043\032\044\034\046\033\001" +
    "\002\000\060\002\uffdf\003\uffdf\004\uffdf\012\164\014\056" +
    "\015\050\016\053\017\045\020\043\021\051\022\062\023" +
    "\057\024\052\025\046\026\047\027\054\030\044\031\055" +
    "\033\061\036\uffdf\045\uffdf\047\uffdf\051\uffdf\001\002\000" +
    "\020\002\uffe0\003\uffe0\004\uffe0\036\uffe0\045\uffe0\047\uffe0" +
    "\051\uffe0\001\002\000\020\002\uffe1\003\uffe1\004\uffe1\036" +
    "\uffe1\045\uffe1\047\uffe1\051\uffe1\001\002\000\006\007\171" +
    "\037\170\001\002\000\044\007\uffe2\014\056\015\050\016" +
    "\053\017\045\020\043\021\051\022\062\023\057\024\052" +
    "\025\046\026\047\027\054\030\044\031\055\033\061\037" +
    "\uffe2\001\002\000\026\006\030\015\035\032\041\036\027" +
    "\040\040\041\031\042\036\043\032\044\034\046\033\001" +
    "\002\000\022\002\uffdf\003\uffdf\004\uffdf\012\164\036\uffdf" +
    "\045\uffdf\047\uffdf\051\uffdf\001\002\000\020\002\uffe4\003" +
    "\uffe4\004\uffe4\036\uffe4\045\uffe4\047\uffe4\051\uffe4\001\002" +
    "\000\044\007\uffe3\014\056\015\050\016\053\017\045\020" +
    "\043\021\051\022\062\023\057\024\052\025\046\026\047" +
    "\027\054\030\044\031\055\033\061\037\uffe3\001\002\000" +
    "\042\011\175\014\056\015\050\016\053\017\045\020\043" +
    "\021\051\022\062\023\057\024\052\025\046\026\047\027" +
    "\054\030\044\031\055\033\061\001\002\000\004\013\176" +
    "\001\002\000\030\006\030\015\035\032\041\035\177\036" +
    "\027\040\040\041\031\042\036\043\032\044\034\046\033" +
    "\001\002\000\026\006\030\015\035\032\041\036\027\040" +
    "\040\041\031\042\036\043\032\044\034\046\033\001\002" +
    "\000\060\002\uffdf\003\uffdf\004\uffdf\012\164\014\056\015" +
    "\050\016\053\017\045\020\043\021\051\022\062\023\057" +
    "\024\052\025\046\026\047\027\054\030\044\031\055\033" +
    "\061\036\uffdf\045\uffdf\047\uffdf\051\uffdf\001\002\000\020" +
    "\002\uffe6\003\uffe6\004\uffe6\036\uffe6\045\uffe6\047\uffe6\051" +
    "\uffe6\001\002\000\042\007\203\014\056\015\050\016\053" +
    "\017\045\020\043\021\051\022\062\023\057\024\052\025" +
    "\046\026\047\027\054\030\044\031\055\033\061\001\002" +
    "\000\022\002\uffdf\003\uffdf\004\uffdf\012\164\036\uffdf\045" +
    "\uffdf\047\uffdf\051\uffdf\001\002\000\020\002\uffe5\003\uffe5" +
    "\004\uffe5\036\uffe5\045\uffe5\047\uffe5\051\uffe5\001\002\000" +
    "\016\002\uffff\003\uffff\036\uffff\045\uffff\047\uffff\051\uffff" +
    "\001\002\000\026\006\030\015\035\032\041\036\027\040" +
    "\040\041\031\042\036\043\032\044\034\046\033\001\002" +
    "\000\042\007\210\014\056\015\050\016\053\017\045\020" +
    "\043\021\051\022\062\023\057\024\052\025\046\026\047" +
    "\027\054\030\044\031\055\033\061\001\002\000\004\005" +
    "\211\001\002\000\014\003\016\036\010\045\012\047\014" +
    "\051\005\001\002\000\016\003\016\004\213\036\010\045" +
    "\012\047\014\051\005\001\002\000\020\002\ufff3\003\ufff3" +
    "\004\ufff3\036\ufff3\045\ufff3\047\ufff3\051\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\026\002\010\003\005\004\014\007\012\010" +
    "\021\013\020\015\003\022\006\024\016\026\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\204\007" +
    "\012\010\021\013\020\015\003\022\006\024\016\026\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\023\007\012\010\021\013" +
    "\020\015\003\022\006\024\016\026\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\041\017\036\001\001\000\002\001\001\000" +
    "\006\016\145\017\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\144\017\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\143\017\036\001\001\000" +
    "\002\001\001\000\006\016\142\017\036\001\001\000\006" +
    "\016\141\017\036\001\001\000\006\016\140\017\036\001" +
    "\001\000\006\016\137\017\036\001\001\000\006\016\136" +
    "\017\036\001\001\000\006\016\135\017\036\001\001\000" +
    "\006\016\134\017\036\001\001\000\006\016\133\017\036" +
    "\001\001\000\006\016\132\017\036\001\001\000\006\016" +
    "\131\017\036\001\001\000\006\016\130\017\036\001\001" +
    "\000\006\016\127\017\036\001\001\000\006\016\126\017" +
    "\036\001\001\000\002\001\001\000\006\016\063\017\036" +
    "\001\001\000\006\016\062\017\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\065\017\036\001\001" +
    "\000\002\001\001\000\024\004\067\007\012\010\021\013" +
    "\020\015\003\022\006\023\070\024\016\026\017\001\001" +
    "\000\002\001\001\000\022\004\072\007\012\010\021\013" +
    "\020\015\003\022\006\024\016\026\017\001\001\000\004" +
    "\025\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\110\007\012" +
    "\010\021\013\020\015\003\021\111\022\006\024\016\026" +
    "\017\001\001\000\002\001\001\000\006\016\101\017\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\104\007\012\010\021\013\020\015\003\020\105\022\006" +
    "\024\016\026\017\001\001\000\002\001\001\000\022\004" +
    "\107\007\012\010\021\013\020\015\003\022\006\024\016" +
    "\026\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\113\007\012\010\021\013\020" +
    "\015\003\022\006\024\016\026\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\104\007\012\010\021" +
    "\013\020\015\003\020\124\022\006\024\016\026\017\001" +
    "\001\000\002\001\001\000\006\016\117\017\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\104\007" +
    "\012\010\021\013\020\015\003\020\122\022\006\024\016" +
    "\026\017\001\001\000\022\004\107\007\012\010\021\013" +
    "\020\015\003\022\006\024\016\026\017\001\001\000\002" +
    "\001\001\000\022\004\107\007\012\010\021\013\020\015" +
    "\003\022\006\024\016\026\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\150\017\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\153\017\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\173\017\036\001\001\000" +
    "\006\016\162\017\036\001\001\000\010\014\165\016\166" +
    "\017\036\001\001\000\004\011\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\172\017\036\001\001\000\004\011\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\177\017\036\001\001\000" +
    "\006\016\201\017\036\001\001\000\004\011\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\206" +
    "\017\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\067\007\012\010\021\013\020\015\003\022\006" +
    "\023\211\024\016\026\017\001\001\000\022\004\072\007" +
    "\012\010\021\013\020\015\003\022\006\024\016\026\017" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      
    public NodoAbstracto Raiz;
    public ArrayList <NodoAbstracto> Expresiones = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones2 = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones3 = new ArrayList();
    public ArrayList <NodoAbstracto> Expresiones4 = new ArrayList();
    public String Lado1, Lado2 = "";
    public String Manejor_Error = "";
     public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila+1);
        System.out.println("\t\tColumna: "+columna);

         TError ERRORES = new TError(lexema,fila,columna,"Sintactico", "Sentencia incorrecta" );
         TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
       
        
        
    }

//Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       // TERROR ERRORES = new TERROR(lexema,"Error Sintactico","Caracter no esperado",fila,columna);
       // TABLA_DE_ERRORES_SINTACTICOS.add(ERRORES);
     
    }


    public void semantic(String msg, Object obj) {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analisis_Sintactico$actions {



  private final Analisis_Sintactico parser;

  /** Constructor */
  CUP$Analisis_Sintactico$actions(Analisis_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action_part00000000(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto start_val = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico$parser.done_parsing();
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("INICIO");
                        nuevo.Hijos.add(nod);
                        parser.Raiz = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        //NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        //nuevo.Hijos.add(nodsentencias);
                        //nuevo.Hijos.add(nod);
                        //RESULT = nuevo;
                        
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIAS");
                        nuevo.Hijos.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARARASIGNAR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        RESULT=nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IMPRIM 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        //System.out.println("ID LINEA : SENTENCIA IMPRIMIR" + nodleft + " Columna " + nodright);
                        RESULT=nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLARARVECTORC 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        Manejor_Error = "SENTENCIA INCORRECTA";
                        RESULT=nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= MODVECTOR 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                      Manejor_Error = "SENTENCIA INCORRECTA";
                      RESULT=nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= ELIF 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= ELIFELSE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= ELWHILE 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= error puntoycoma 
            {
              NodoAbstracto RESULT =null;
		
                         NodoAbstracto nuevo = new ERRORES("Error");
                         NodoAbstracto nuevoid = new Nodo("#Error En alguna mulada XD");
                         nuevo.Cadena   = "#Error Semantico Encontrado ver reporte";
                         RESULT= nuevo; 
                     
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= error SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		
                         NodoAbstracto nuevo = new ERRORES("Error");
                         NodoAbstracto nuevoid = new Nodo("#Error En alguna mulada XD");
                         nuevo.Cadena  = "#Error Semantico Encontrado ver reporte";
                         RESULT= nuevo; 
                     
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= error llavecerrar 
            {
              NodoAbstracto RESULT =null;
		
                         NodoAbstracto nuevo = new ERRORES("Error");
                         NodoAbstracto nuevoid = new Nodo("#Error En alguna mulada XD");
                         nuevo.Cadena  = "#Error Semantico Encontrado ver reporte";
                         RESULT= nuevo; 
                     
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELWHILE ::= WHILE parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new While("IF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;
    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELWHILE",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIF("IF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(null);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar ELSE llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
            NodoAbstracto nuevo = new SentenciaIF("IF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
            Expresiones.clear();
            for(int i = 0; i< Expresiones2.size();i++){
                           nuevo.Expresiones2.add(Expresiones2.get(i));
                        }
            Expresiones2.clear();
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar LISTAELSES 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
            NodoAbstracto nuevo = new SentenciaIFElseIF("IFelseIF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones2.add(Expresiones.get(i));
           }
            Expresiones.clear();
            for(int i = 0; i< Expresiones3.size();i++){
                           nuevo.Expresiones.add(Expresiones3.get(i));
                        }
            Expresiones3.clear();
            RESULT = nuevo;
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELIF ::= IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS llavecerrar LISTAELSES ELSE llaveabrir LISTASENTENCIAS3 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int sentencias2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int sentencias2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto sentencias2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
            NodoAbstracto nuevo = new SentenciaIFElseIF("IFelseIF");
            nuevo.Hijos.add(exp1);
            nuevo.Hijos.add(sentencias);
            nuevo.Hijos.add(sentencias2);
            nuevo.columna = exp1left;
            nuevo.linea = exp1right;
            for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones2.add(Expresiones.get(i));
           }
            Expresiones.clear();
            for(int i = 0; i< Expresiones3.size();i++){
                           nuevo.Expresiones.add(Expresiones3.get(i));
                        }
            Expresiones3.clear();
            for(int i = 0; i< Expresiones4.size();i++){
                           nuevo.Expresiones3.add(Expresiones4.get(i));
                        }
            Expresiones4.clear();

            //agregar parte del else
            
            RESULT = nuevo;
            
            
        
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELIF",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTAELSES ::= LISTAELSES ELSE IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new SentenciaIFElseIF("IFelseIF");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                nuevo.columna = exp1left;
                nuevo.linea = exp1right;
                for(int i = 0; i< Expresiones2.size();i++){
                           nuevo.Expresiones.add(Expresiones2.get(i));
                        }
                Expresiones2.clear();
                Expresiones3.add(nuevo);
                RESULT = nuevo;
              
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAELSES",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTAELSES ::= ELSE IF parentesisabrir EXP parentesiscerrar llaveabrir LISTASENTENCIAS2 llavecerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto sentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new SentenciaIFElseIF("IFelseIF");
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(sentencias);
                nuevo.columna = exp1left;
                nuevo.linea = exp1right;
                Expresiones3.add(nuevo);
                for(int i = 0; i< Expresiones2.size();i++){
                           nuevo.Expresiones.add(Expresiones2.get(i));
                        }
                Expresiones2.clear();
                RESULT = nuevo;
              
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAELSES",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTASENTENCIAS ::= LISTASENTENCIAS SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        Expresiones.add(nod);
                       // Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTASENTENCIAS ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTASENTENCIAS3 ::= LISTASENTENCIAS3 SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        
                        Expresiones4.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nodsentencias;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS3",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTASENTENCIAS3 ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        Expresiones4.add(nod);
                       // Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS3",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTASENTENCIAS2 ::= LISTASENTENCIAS2 SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        nodsentencias.Hijos.add(nod);
                        RESULT = nodsentencias;
                        //Expresiones.add(nod);
                        Expresiones2.add(nod);
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS2",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTASENTENCIAS2 ::= SENTENCIA 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("SENTENCIA");
                        nuevo.Hijos.add(nod);
                        //Expresiones.add(nod);
                        Expresiones2.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTASENTENCIAS2",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MODVECTOR ::= id corcheteabrir EXP corchetecerrar igual EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MODVECTOR",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MODVECTOR ::= id corcheteabrir EXP corchetecerrar igual FuncionC EXP parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                NodoAbstracto nuevo = new ModificarVector("Vecto");
                NodoAbstracto nuevoid = new Nodo(valor);
                nuevo.Hijos.add(nuevoid);
                nuevo.Hijos.add(exp1);
                nuevo.Hijos.add(exp2);
                Manejor_Error = "Error al Modificar Vector" + valor;
                nuevo.columna = valorleft;
                nuevo.linea = valorright;
                RESULT=nuevo;
                
            
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MODVECTOR",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARARVECTORC ::= id igual FuncionC LISTAEXPRESIONES parentesiscerrar FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int Listaleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int Listaright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto Lista = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                        NodoAbstracto nuevo = new FuncionC("CASTEAR");
                        NodoAbstracto nuevoid = new Nodo(valor);
                        nuevo.Hijos.add(nuevoid);
                        for(int i = 0; i< Expresiones.size();i++){
                           nuevo.Expresiones.add(Expresiones.get(i));
                        }
                        Expresiones.clear();
                        nuevo.Hijos.add(Lista);
                        Manejor_Error = "Error al crear vector" + valor;
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARVECTORC",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTAEXPRESIONES ::= LISTAEXPRESIONES coma EXP 
            {
              NodoAbstracto RESULT =null;
		int nodsentenciasleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int nodsentenciasright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto nodsentencias = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("LISTAEXPRESIONES");
                        nuevo.Hijos.add(nodsentencias);
                        nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTAEXPRESIONES ::= EXP 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("LISTAEXPRESIONES");
                        nuevo.Hijos.add(nod);
                        Expresiones.add(nod);
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARARASIGNAR ::= id igual EXP FINAL 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new DeclararAsignar("DECLARARASIGNAR");
                        NodoAbstracto nuevoid = new Nodo(valor);
                        nuevo.Hijos.add(nuevoid);
                        nuevo.Hijos.add(exp1);
                        Manejor_Error = "Error al crear vector" + valor;
                        //System.out.println("ID LINEA : SENTENCIA IMPRIMIR" + nodleft + " Columna " + nodright);
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARASIGNAR",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FINAL ::= puntoycoma 
            {
              NodoAbstracto RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FINAL ::= 
            {
              NodoAbstracto RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IMPRIM ::= imprimir parentesisabrir EXP parentesiscerrar puntoycoma 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
                        NodoAbstracto nuevo = new Imprimir("IMPRIMIR");
                        nuevo.Hijos.add(exp1);
                         Manejor_Error = "Error al imprimir";
                        nuevo.columna = exp1left;
                        nuevo.linea = exp1right;
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIM",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= EXP PREGUNTAC EXP DOSP EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp3 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Ternario("EXP");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(exp2);  
                        nuevo.Hijos.add(exp3);
                         Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= NOT EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new NOT("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;

                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= menos EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Negativo("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp1);                        
                        nuevo.TipoDato = exp1.TipoDato;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= EXP mas EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("+");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= EXP menos EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("-");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                    
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= EXP por EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("*");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= EXP div EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("/");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);  
                        Manejor_Error = "Error en expresion";                      
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= EXP modulo EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("%%");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2); 
                        Manejor_Error = "Error en expresion";                   
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= EXP potencia EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("^");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);   
                        Manejor_Error = "Error en expresion";                 
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= EXP igualdad EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("==");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= EXP Noigualdad EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("!=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= EXP MayorQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= EXP MenorQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= EXP MayorIgualQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo(">=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= EXP MenorIgualQue EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("<=");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= EXP AND EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("&&");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";                      
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= EXP OR EXP 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto exp2 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Aritmetica("EXP");
                        NodoAbstracto nuevooperador = new Nodo("||");
                        nuevo.Hijos.add(exp1);
                        nuevo.Hijos.add(nuevooperador);
                        nuevo.Hijos.add(exp2);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                        
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= parentesisabrir EXP parentesiscerrar 
            {
              NodoAbstracto RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto exp1 = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        Manejor_Error = "Error en expresion";
                        RESULT = exp1;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= NUMERO 
            {
              NodoAbstracto RESULT =null;
		int nodleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int nodright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoAbstracto nod = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        Manejor_Error = "Error en expresion";
                        RESULT = nod;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= id 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("id");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "id";
                        nuevo.Nombre = valor;
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= nulo 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= id corcheteabrir EXP corchetecerrar 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoAbstracto pos = (NodoAbstracto)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
                        NodoAbstracto nuevo = new Nodo("Vector");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.Hijos.add(pos);
                        nuevo.TipoDato = "vector";
                        Manejor_Error = "Error en expresion";
                        //RESULT = nuevo;
                        //nuevo.id = Integer.parseInt(pos);
                        nuevo.columna = valorleft;
                        nuevo.linea = valorright;
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= cadena 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        valor =  valor.replaceAll("\"", "");
                        NodoAbstracto nuevo = new Nodo("Cadena");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "cadena";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= ttrue 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= tfalse 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Booleano");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "booleano";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NUMERO ::= entero 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Entero");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "entero";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("NUMERO",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NUMERO ::= decimal 
            {
              NodoAbstracto RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
                        NodoAbstracto nuevo = new Nodo("Decimal");
                        NodoAbstracto nuevovalor = new Nodo(valor);
                        nuevo.Hijos.add(nuevovalor);
                        nuevo.TipoDato = "decimal";
                        Manejor_Error = "Error en expresion";
                        RESULT = nuevo;
                    
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("NUMERO",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analisis_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analisis_Sintactico$do_action_part00000000(
                               CUP$Analisis_Sintactico$act_num,
                               CUP$Analisis_Sintactico$parser,
                               CUP$Analisis_Sintactico$stack,
                               CUP$Analisis_Sintactico$top);
    }
}

}
